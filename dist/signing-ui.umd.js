(function(wI,b){typeof exports=="object"&&typeof module<"u"?module.exports=b(require("vue"),require("pdfjs-dist")):typeof define=="function"&&define.amd?define(["vue","pdfjs-dist"],b):(wI=typeof globalThis<"u"?globalThis:wI||self,wI.SigningUI=b(wI.Vue,wI.pdfjsLib))})(this,function(vue,pdfjsDist){"use strict";var PC=Object.defineProperty;var BC=wI=>{throw TypeError(wI)};var fC=(wI,b,ZI)=>b in wI?PC(wI,b,{enumerable:!0,configurable:!0,writable:!0,value:ZI}):wI[b]=ZI;var fI=(wI,b,ZI)=>fC(wI,typeof b!="symbol"?b+"":b,ZI),pg=(wI,b,ZI)=>b.has(wI)||BC("Cannot "+ZI);var I=(wI,b,ZI)=>(pg(wI,b,"read from private field"),ZI?ZI.call(wI):b.get(wI)),_=(wI,b,ZI)=>b.has(wI)?BC("Cannot add the same private member more than once"):b instanceof WeakSet?b.add(wI):b.set(wI,ZI),gI=(wI,b,ZI,G)=>(pg(wI,b,"write to private field"),G?G.call(wI,ZI):b.set(wI,ZI),ZI),O=(wI,b,ZI)=>(pg(wI,b,"access private method"),ZI);var bg=(wI,b,ZI,G)=>({set _(R){gI(wI,b,R,ZI)},get _(){return I(wI,b,G)}});function getAugmentedNamespace(wI){if(wI.__esModule)return wI;var b=wI.default;if(typeof b=="function"){var ZI=function G(){return this instanceof G?Reflect.construct(b,arguments,this.constructor):b.apply(this,arguments)};ZI.prototype=b.prototype}else ZI={};return Object.defineProperty(ZI,"__esModule",{value:!0}),Object.keys(wI).forEach(function(G){var R=Object.getOwnPropertyDescriptor(wI,G);Object.defineProperty(ZI,G,R.get?R:{enumerable:!0,get:function(){return wI[G]}})}),ZI}function commonjsRequire(wI){throw new Error('Could not dynamically require "'+wI+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var pdf={exports:{}};const __viteBrowserExternal={},__viteBrowserExternal$1=Object.freeze(Object.defineProperty({__proto__:null,default:__viteBrowserExternal},Symbol.toStringTag,{value:"Module"})),require$$5=getAugmentedNamespace(__viteBrowserExternal$1);(function(module,exports){(function(b,ZI){module.exports=b.pdfjsLib=ZI()})(globalThis,()=>(()=>{var __webpack_modules__=[,(wI,b)=>{var rI;Object.defineProperty(b,"__esModule",{value:!0}),b.VerbosityLevel=b.Util=b.UnknownErrorException=b.UnexpectedResponseException=b.TextRenderingMode=b.RenderingIntentFlag=b.PromiseCapability=b.PermissionFlag=b.PasswordResponses=b.PasswordException=b.PageActionEventType=b.OPS=b.MissingPDFException=b.MAX_IMAGE_SIZE_TO_CACHE=b.LINE_FACTOR=b.LINE_DESCENT_FACTOR=b.InvalidPDFException=b.ImageKind=b.IDENTITY_MATRIX=b.FormatError=b.FeatureTest=b.FONT_IDENTITY_MATRIX=b.DocumentActionEventType=b.CMapCompressionType=b.BaseException=b.BASELINE_FACTOR=b.AnnotationType=b.AnnotationReplyType=b.AnnotationPrefix=b.AnnotationMode=b.AnnotationFlag=b.AnnotationFieldFlag=b.AnnotationEditorType=b.AnnotationEditorPrefix=b.AnnotationEditorParamsType=b.AnnotationBorderStyleType=b.AnnotationActionEventType=b.AbortException=void 0,b.assert=M,b.bytesToString=bI,b.createValidAbsoluteUrl=P,b.getModificationDate=yI,b.getUuid=JI,b.getVerbosityLevel=j,b.info=r,b.isArrayBuffer=E,b.isArrayEqual=MI,b.isNodeJS=void 0,b.normalizeUnicode=eI,b.objectFromMap=aI,b.objectSize=XI,b.setVerbosityLevel=lI,b.shadow=N,b.string32=YI,b.stringToBytes=sI,b.stringToPDFString=mI,b.stringToUTF8String=NI,b.unreachable=dI,b.utf8StringToString=hI,b.warn=T;const ZI=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");b.isNodeJS=ZI;const G=[1,0,0,1,0,0];b.IDENTITY_MATRIX=G;const R=[.001,0,0,.001,0,0];b.FONT_IDENTITY_MATRIX=R;const cI=1e7;b.MAX_IMAGE_SIZE_TO_CACHE=cI;const U=1.35;b.LINE_FACTOR=U;const WI=.35;b.LINE_DESCENT_FACTOR=WI;const L=WI/U;b.BASELINE_FACTOR=L;const e={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256};b.RenderingIntentFlag=e;const W={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};b.AnnotationMode=W;const z="pdfjs_internal_editor_";b.AnnotationEditorPrefix=z;const J={DISABLE:-1,NONE:0,FREETEXT:3,STAMP:13,INK:15};b.AnnotationEditorType=J;const V={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23};b.AnnotationEditorParamsType=V;const o={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};b.PermissionFlag=o;const y={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};b.TextRenderingMode=y;const B={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};b.ImageKind=B;const s={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};b.AnnotationType=s;const Y={GROUP:"Group",REPLY:"R"};b.AnnotationReplyType=Y;const t={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};b.AnnotationFlag=t;const h={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};b.AnnotationFieldFlag=h;const Z={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};b.AnnotationBorderStyleType=Z;const i={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};b.AnnotationActionEventType=i;const A={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};b.DocumentActionEventType=A;const d={O:"PageOpen",C:"PageClose"};b.PageActionEventType=d;const c={ERRORS:0,WARNINGS:1,INFOS:5};b.VerbosityLevel=c;const F={NONE:0,BINARY:1};b.CMapCompressionType=F;const l={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};b.OPS=l;const X={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};b.PasswordResponses=X;let K=c.WARNINGS;function lI(VI){Number.isInteger(VI)&&(K=VI)}function j(){return K}function r(VI){K>=c.INFOS&&console.log(`Info: ${VI}`)}function T(VI){K>=c.WARNINGS&&console.log(`Warning: ${VI}`)}function dI(VI){throw new Error(VI)}function M(VI,II){VI||dI(II)}function k(VI){switch(VI==null?void 0:VI.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function P(VI,II=null,AI=null){if(!VI)return null;try{if(AI&&typeof VI=="string"){if(AI.addDefaultProtocol&&VI.startsWith("www.")){const OI=VI.match(/\./g);(OI==null?void 0:OI.length)>=2&&(VI=`http://${VI}`)}if(AI.tryConvertEncoding)try{VI=NI(VI)}catch{}}const DI=II?new URL(VI,II):new URL(VI);if(k(DI))return DI}catch{}return null}function N(VI,II,AI,DI=!1){return Object.defineProperty(VI,II,{value:AI,enumerable:!DI,configurable:!0,writable:!1}),AI}const g=function(){function II(AI,DI){this.constructor===II&&dI("Cannot initialize BaseException."),this.message=AI,this.name=DI}return II.prototype=new Error,II.constructor=II,II}();b.BaseException=g;class C extends g{constructor(II,AI){super(II,"PasswordException"),this.code=AI}}b.PasswordException=C;class m extends g{constructor(II,AI){super(II,"UnknownErrorException"),this.details=AI}}b.UnknownErrorException=m;class u extends g{constructor(II){super(II,"InvalidPDFException")}}b.InvalidPDFException=u;class n extends g{constructor(II){super(II,"MissingPDFException")}}b.MissingPDFException=n;class D extends g{constructor(II,AI){super(II,"UnexpectedResponseException"),this.status=AI}}b.UnexpectedResponseException=D;class x extends g{constructor(II){super(II,"FormatError")}}b.FormatError=x;class CI extends g{constructor(II){super(II,"AbortException")}}b.AbortException=CI;function bI(VI){(typeof VI!="object"||(VI==null?void 0:VI.length)===void 0)&&dI("Invalid argument for bytesToString");const II=VI.length,AI=8192;if(II<AI)return String.fromCharCode.apply(null,VI);const DI=[];for(let OI=0;OI<II;OI+=AI){const xI=Math.min(OI+AI,II),S=VI.subarray(OI,xI);DI.push(String.fromCharCode.apply(null,S))}return DI.join("")}function sI(VI){typeof VI!="string"&&dI("Invalid argument for stringToBytes");const II=VI.length,AI=new Uint8Array(II);for(let DI=0;DI<II;++DI)AI[DI]=VI.charCodeAt(DI)&255;return AI}function YI(VI){return String.fromCharCode(VI>>24&255,VI>>16&255,VI>>8&255,VI&255)}function XI(VI){return Object.keys(VI).length}function aI(VI){const II=Object.create(null);for(const[AI,DI]of VI)II[AI]=DI;return II}function f(){const VI=new Uint8Array(4);return VI[0]=1,new Uint32Array(VI.buffer,0,1)[0]===1}function $(){try{return new Function(""),!0}catch{return!1}}class w{static get isLittleEndian(){return N(this,"isLittleEndian",f())}static get isEvalSupported(){return N(this,"isEvalSupported",$())}static get isOffscreenCanvasSupported(){return N(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}static get platform(){return typeof navigator>"u"?N(this,"platform",{isWin:!1,isMac:!1}):N(this,"platform",{isWin:navigator.platform.includes("Win"),isMac:navigator.platform.includes("Mac")})}static get isCSSRoundSupported(){var II,AI;return N(this,"isCSSRoundSupported",(AI=(II=globalThis.CSS)==null?void 0:II.supports)==null?void 0:AI.call(II,"width: round(1.5px, 1px)"))}}b.FeatureTest=w;const p=[...Array(256).keys()].map(VI=>VI.toString(16).padStart(2,"0"));class v{static makeHexColor(II,AI,DI){return`#${p[II]}${p[AI]}${p[DI]}`}static scaleMinMax(II,AI){let DI;II[0]?(II[0]<0&&(DI=AI[0],AI[0]=AI[1],AI[1]=DI),AI[0]*=II[0],AI[1]*=II[0],II[3]<0&&(DI=AI[2],AI[2]=AI[3],AI[3]=DI),AI[2]*=II[3],AI[3]*=II[3]):(DI=AI[0],AI[0]=AI[2],AI[2]=DI,DI=AI[1],AI[1]=AI[3],AI[3]=DI,II[1]<0&&(DI=AI[2],AI[2]=AI[3],AI[3]=DI),AI[2]*=II[1],AI[3]*=II[1],II[2]<0&&(DI=AI[0],AI[0]=AI[1],AI[1]=DI),AI[0]*=II[2],AI[1]*=II[2]),AI[0]+=II[4],AI[1]+=II[4],AI[2]+=II[5],AI[3]+=II[5]}static transform(II,AI){return[II[0]*AI[0]+II[2]*AI[1],II[1]*AI[0]+II[3]*AI[1],II[0]*AI[2]+II[2]*AI[3],II[1]*AI[2]+II[3]*AI[3],II[0]*AI[4]+II[2]*AI[5]+II[4],II[1]*AI[4]+II[3]*AI[5]+II[5]]}static applyTransform(II,AI){const DI=II[0]*AI[0]+II[1]*AI[2]+AI[4],OI=II[0]*AI[1]+II[1]*AI[3]+AI[5];return[DI,OI]}static applyInverseTransform(II,AI){const DI=AI[0]*AI[3]-AI[1]*AI[2],OI=(II[0]*AI[3]-II[1]*AI[2]+AI[2]*AI[5]-AI[4]*AI[3])/DI,xI=(-II[0]*AI[1]+II[1]*AI[0]+AI[4]*AI[1]-AI[5]*AI[0])/DI;return[OI,xI]}static getAxialAlignedBoundingBox(II,AI){const DI=this.applyTransform(II,AI),OI=this.applyTransform(II.slice(2,4),AI),xI=this.applyTransform([II[0],II[3]],AI),S=this.applyTransform([II[2],II[1]],AI);return[Math.min(DI[0],OI[0],xI[0],S[0]),Math.min(DI[1],OI[1],xI[1],S[1]),Math.max(DI[0],OI[0],xI[0],S[0]),Math.max(DI[1],OI[1],xI[1],S[1])]}static inverseTransform(II){const AI=II[0]*II[3]-II[1]*II[2];return[II[3]/AI,-II[1]/AI,-II[2]/AI,II[0]/AI,(II[2]*II[5]-II[4]*II[3])/AI,(II[4]*II[1]-II[5]*II[0])/AI]}static singularValueDecompose2dScale(II){const AI=[II[0],II[2],II[1],II[3]],DI=II[0]*AI[0]+II[1]*AI[2],OI=II[0]*AI[1]+II[1]*AI[3],xI=II[2]*AI[0]+II[3]*AI[2],S=II[2]*AI[1]+II[3]*AI[3],BI=(DI+S)/2,HI=Math.sqrt((DI+S)**2-4*(DI*S-xI*OI))/2,SI=BI+HI||1,zI=BI-HI||1;return[Math.sqrt(SI),Math.sqrt(zI)]}static normalizeRect(II){const AI=II.slice(0);return II[0]>II[2]&&(AI[0]=II[2],AI[2]=II[0]),II[1]>II[3]&&(AI[1]=II[3],AI[3]=II[1]),AI}static intersect(II,AI){const DI=Math.max(Math.min(II[0],II[2]),Math.min(AI[0],AI[2])),OI=Math.min(Math.max(II[0],II[2]),Math.max(AI[0],AI[2]));if(DI>OI)return null;const xI=Math.max(Math.min(II[1],II[3]),Math.min(AI[1],AI[3])),S=Math.min(Math.max(II[1],II[3]),Math.max(AI[1],AI[3]));return xI>S?null:[DI,xI,OI,S]}static bezierBoundingBox(II,AI,DI,OI,xI,S,BI,HI){const SI=[],zI=[[],[]];let nI,H,a,Q,GI,iI,oI,RI;for(let QI=0;QI<2;++QI){if(QI===0?(H=6*II-12*DI+6*xI,nI=-3*II+9*DI-9*xI+3*BI,a=3*DI-3*II):(H=6*AI-12*OI+6*S,nI=-3*AI+9*OI-9*S+3*HI,a=3*OI-3*AI),Math.abs(nI)<1e-12){if(Math.abs(H)<1e-12)continue;Q=-a/H,0<Q&&Q<1&&SI.push(Q);continue}oI=H*H-4*a*nI,RI=Math.sqrt(oI),!(oI<0)&&(GI=(-H+RI)/(2*nI),0<GI&&GI<1&&SI.push(GI),iI=(-H-RI)/(2*nI),0<iI&&iI<1&&SI.push(iI))}let tI=SI.length,KI;const uI=tI;for(;tI--;)Q=SI[tI],KI=1-Q,zI[0][tI]=KI*KI*KI*II+3*KI*KI*Q*DI+3*KI*Q*Q*xI+Q*Q*Q*BI,zI[1][tI]=KI*KI*KI*AI+3*KI*KI*Q*OI+3*KI*Q*Q*S+Q*Q*Q*HI;return zI[0][uI]=II,zI[1][uI]=AI,zI[0][uI+1]=BI,zI[1][uI+1]=HI,zI[0].length=zI[1].length=uI+2,[Math.min(...zI[0]),Math.min(...zI[1]),Math.max(...zI[0]),Math.max(...zI[1])]}}b.Util=v;const q=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function mI(VI){if(VI[0]>="ï"){let AI;if(VI[0]==="þ"&&VI[1]==="ÿ"?AI="utf-16be":VI[0]==="ÿ"&&VI[1]==="þ"?AI="utf-16le":VI[0]==="ï"&&VI[1]==="»"&&VI[2]==="¿"&&(AI="utf-8"),AI)try{const DI=new TextDecoder(AI,{fatal:!0}),OI=sI(VI);return DI.decode(OI)}catch(DI){T(`stringToPDFString: "${DI}".`)}}const II=[];for(let AI=0,DI=VI.length;AI<DI;AI++){const OI=q[VI.charCodeAt(AI)];II.push(OI?String.fromCharCode(OI):VI.charAt(AI))}return II.join("")}function NI(VI){return decodeURIComponent(escape(VI))}function hI(VI){return unescape(encodeURIComponent(VI))}function E(VI){return typeof VI=="object"&&(VI==null?void 0:VI.byteLength)!==void 0}function MI(VI,II){if(VI.length!==II.length)return!1;for(let AI=0,DI=VI.length;AI<DI;AI++)if(VI[AI]!==II[AI])return!1;return!0}function yI(VI=new Date){return[VI.getUTCFullYear().toString(),(VI.getUTCMonth()+1).toString().padStart(2,"0"),VI.getUTCDate().toString().padStart(2,"0"),VI.getUTCHours().toString().padStart(2,"0"),VI.getUTCMinutes().toString().padStart(2,"0"),VI.getUTCSeconds().toString().padStart(2,"0")].join("")}class TI{constructor(){_(this,rI,!1);this.promise=new Promise((II,AI)=>{this.resolve=DI=>{gI(this,rI,!0),II(DI)},this.reject=DI=>{gI(this,rI,!0),AI(DI)}})}get settled(){return I(this,rI)}}rI=new WeakMap,b.PromiseCapability=TI;let LI=null,UI=null;function eI(VI){return LI||(LI=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,UI=new Map([["ﬅ","ſt"]])),VI.replaceAll(LI,(II,AI,DI)=>AI?AI.normalize("NFKC"):UI.get(DI))}function JI(){if(typeof crypto<"u"&&typeof(crypto==null?void 0:crypto.randomUUID)=="function")return crypto.randomUUID();const VI=new Uint8Array(32);if(typeof crypto<"u"&&typeof(crypto==null?void 0:crypto.getRandomValues)=="function")crypto.getRandomValues(VI);else for(let II=0;II<32;II++)VI[II]=Math.floor(Math.random()*255);return bI(VI)}const vI="pdfjs_internal_id_";b.AnnotationPrefix=vI},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{var wI,ZI,G,R,Zg,Vg,WI,L,e,W,z,J,V,o,y,Xg,s,Y,Sg,h,Z;Object.defineProperty(exports,"__esModule",{value:!0}),exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultFilterFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,Object.defineProperty(exports,"SVGGraphics",{enumerable:!0,get:function(){return _displaySvg.SVGGraphics}}),exports.build=void 0,exports.getDocument=getDocument,exports.version=void 0;var _util=__w_pdfjs_require__(1),_annotation_storage=__w_pdfjs_require__(3),_display_utils=__w_pdfjs_require__(6),_font_loader=__w_pdfjs_require__(9),_displayNode_utils=__w_pdfjs_require__(10),_canvas=__w_pdfjs_require__(11),_worker_options=__w_pdfjs_require__(14),_message_handler=__w_pdfjs_require__(15),_metadata=__w_pdfjs_require__(16),_optional_content_config=__w_pdfjs_require__(17),_transport_stream=__w_pdfjs_require__(18),_displayFetch_stream=__w_pdfjs_require__(19),_displayNetwork=__w_pdfjs_require__(22),_displayNode_stream=__w_pdfjs_require__(23),_displaySvg=__w_pdfjs_require__(24),_xfa_text=__w_pdfjs_require__(25);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100,DELAYED_CLEANUP_TIMEOUT=5e3,DefaultCanvasFactory=_util.isNodeJS?_displayNode_utils.NodeCanvasFactory:_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;const DefaultCMapReaderFactory=_util.isNodeJS?_displayNode_utils.NodeCMapReaderFactory:_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;const DefaultFilterFactory=_util.isNodeJS?_displayNode_utils.NodeFilterFactory:_display_utils.DOMFilterFactory;exports.DefaultFilterFactory=DefaultFilterFactory;const DefaultStandardFontDataFactory=_util.isNodeJS?_displayNode_utils.NodeStandardFontDataFactory:_display_utils.DOMStandardFontDataFactory;exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory;function getDocument(A){if(typeof A=="string"||A instanceof URL?A={url:A}:(0,_util.isArrayBuffer)(A)&&(A={data:A}),typeof A!="object")throw new Error("Invalid parameter in getDocument, need parameter object.");if(!A.url&&!A.data&&!A.range)throw new Error("Invalid parameter object: need either .data, .range or .url");const d=new PDFDocumentLoadingTask,{docId:c}=d,F=A.url?getUrlProp(A.url):null,l=A.data?getDataProp(A.data):null,X=A.httpHeaders||null,K=A.withCredentials===!0,lI=A.password??null,j=A.range instanceof PDFDataRangeTransport?A.range:null,r=Number.isInteger(A.rangeChunkSize)&&A.rangeChunkSize>0?A.rangeChunkSize:DEFAULT_RANGE_CHUNK_SIZE;let T=A.worker instanceof PDFWorker?A.worker:null;const dI=A.verbosity,M=typeof A.docBaseUrl=="string"&&!(0,_display_utils.isDataScheme)(A.docBaseUrl)?A.docBaseUrl:null,k=typeof A.cMapUrl=="string"?A.cMapUrl:null,P=A.cMapPacked!==!1,N=A.CMapReaderFactory||DefaultCMapReaderFactory,g=typeof A.standardFontDataUrl=="string"?A.standardFontDataUrl:null,C=A.StandardFontDataFactory||DefaultStandardFontDataFactory,m=A.stopAtErrors!==!0,u=Number.isInteger(A.maxImageSize)&&A.maxImageSize>-1?A.maxImageSize:-1,n=A.isEvalSupported!==!1,D=typeof A.isOffscreenCanvasSupported=="boolean"?A.isOffscreenCanvasSupported:!_util.isNodeJS,x=Number.isInteger(A.canvasMaxAreaInBytes)?A.canvasMaxAreaInBytes:-1,CI=typeof A.disableFontFace=="boolean"?A.disableFontFace:_util.isNodeJS,bI=A.fontExtraProperties===!0,sI=A.enableXfa===!0,YI=A.ownerDocument||globalThis.document,XI=A.disableRange===!0,aI=A.disableStream===!0,f=A.disableAutoFetch===!0,$=A.pdfBug===!0,w=j?j.length:A.length??NaN,p=typeof A.useSystemFonts=="boolean"?A.useSystemFonts:!_util.isNodeJS&&!CI,v=typeof A.useWorkerFetch=="boolean"?A.useWorkerFetch:N===_display_utils.DOMCMapReaderFactory&&C===_display_utils.DOMStandardFontDataFactory&&k&&g&&(0,_display_utils.isValidFetchUrl)(k,document.baseURI)&&(0,_display_utils.isValidFetchUrl)(g,document.baseURI),q=A.canvasFactory||new DefaultCanvasFactory({ownerDocument:YI}),mI=A.filterFactory||new DefaultFilterFactory({docId:c,ownerDocument:YI}),NI=null;(0,_util.setVerbosityLevel)(dI);const hI={canvasFactory:q,filterFactory:mI};if(v||(hI.cMapReaderFactory=new N({baseUrl:k,isCompressed:P}),hI.standardFontDataFactory=new C({baseUrl:g})),!T){const yI={verbosity:dI,port:_worker_options.GlobalWorkerOptions.workerPort};T=yI.port?PDFWorker.fromPort(yI):new PDFWorker(yI),d._worker=T}const E={docId:c,apiVersion:"3.11.174",data:l,password:lI,disableAutoFetch:f,rangeChunkSize:r,length:w,docBaseUrl:M,enableXfa:sI,evaluatorOptions:{maxImageSize:u,disableFontFace:CI,ignoreErrors:m,isEvalSupported:n,isOffscreenCanvasSupported:D,canvasMaxAreaInBytes:x,fontExtraProperties:bI,useSystemFonts:p,cMapUrl:v?k:null,standardFontDataUrl:v?g:null}},MI={ignoreErrors:m,isEvalSupported:n,disableFontFace:CI,fontExtraProperties:bI,enableXfa:sI,ownerDocument:YI,disableAutoFetch:f,pdfBug:$,styleElement:NI};return T.promise.then(function(){if(d.destroyed)throw new Error("Loading aborted");const yI=_fetchDocument(T,E),TI=new Promise(function(LI){let UI;j?UI=new _transport_stream.PDFDataTransportStream({length:w,initialData:j.initialData,progressiveDone:j.progressiveDone,contentDispositionFilename:j.contentDispositionFilename,disableRange:XI,disableStream:aI},j):l||(UI=(JI=>_util.isNodeJS?new _displayNode_stream.PDFNodeStream(JI):(0,_display_utils.isValidFetchUrl)(JI.url)?new _displayFetch_stream.PDFFetchStream(JI):new _displayNetwork.PDFNetworkStream(JI))({url:F,length:w,httpHeaders:X,withCredentials:K,rangeChunkSize:r,disableRange:XI,disableStream:aI})),LI(UI)});return Promise.all([yI,TI]).then(function([LI,UI]){if(d.destroyed)throw new Error("Loading aborted");const eI=new _message_handler.MessageHandler(c,LI,T.port),JI=new WorkerTransport(eI,d,UI,MI,hI);d._transport=JI,eI.send("Ready",null)})}).catch(d._capability.reject),d}async function _fetchDocument(A,d){if(A.destroyed)throw new Error("Worker was destroyed");const c=await A.messageHandler.sendWithPromise("GetDocRequest",d,d.data?[d.data.buffer]:null);if(A.destroyed)throw new Error("Worker was destroyed");return c}function getUrlProp(A){if(A instanceof URL)return A.href;try{return new URL(A,window.location).href}catch{if(_util.isNodeJS&&typeof A=="string")return A}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function getDataProp(A){if(_util.isNodeJS&&typeof Buffer<"u"&&A instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(A instanceof Uint8Array&&A.byteLength===A.buffer.byteLength)return A;if(typeof A=="string")return(0,_util.stringToBytes)(A);if(typeof A=="object"&&!isNaN(A==null?void 0:A.length)||(0,_util.isArrayBuffer)(A))return new Uint8Array(A);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}const b=class b{constructor(){this._capability=new _util.PromiseCapability,this._transport=null,this._worker=null,this.docId=`d${bg(b,wI)._++}`,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}async destroy(){var d,c,F;this.destroyed=!0;try{(d=this._worker)!=null&&d.port&&(this._worker._pendingDestroy=!0),await((c=this._transport)==null?void 0:c.destroy())}catch(l){throw(F=this._worker)!=null&&F.port&&delete this._worker._pendingDestroy,l}this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}};wI=new WeakMap,_(b,wI,0);let PDFDocumentLoadingTask=b;exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;class PDFDataRangeTransport{constructor(d,c,F=!1,l=null){this.length=d,this.initialData=c,this.progressiveDone=F,this.contentDispositionFilename=l,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=new _util.PromiseCapability}addRangeListener(d){this._rangeListeners.push(d)}addProgressListener(d){this._progressListeners.push(d)}addProgressiveReadListener(d){this._progressiveReadListeners.push(d)}addProgressiveDoneListener(d){this._progressiveDoneListeners.push(d)}onDataRange(d,c){for(const F of this._rangeListeners)F(d,c)}onDataProgress(d,c){this._readyCapability.promise.then(()=>{for(const F of this._progressListeners)F(d,c)})}onDataProgressiveRead(d){this._readyCapability.promise.then(()=>{for(const c of this._progressiveReadListeners)c(d)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const d of this._progressiveDoneListeners)d()})}transportReady(){this._readyCapability.resolve()}requestDataRange(d,c){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(d,c){this._pdfInfo=d,this._transport=c,Object.defineProperty(this,"getJavaScript",{value:()=>((0,_display_utils.deprecated)("`PDFDocumentProxy.getJavaScript`, please use `PDFDocumentProxy.getJSActions` instead."),this.getJSActions().then(F=>{if(!F)return F;const l=[];for(const X in F)l.push(...F[X]);return l}))})}get annotationStorage(){return this._transport.annotationStorage}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(d){return this._transport.getPage(d)}getPageIndex(d){return this._transport.getPageIndex(d)}getDestinations(){return this._transport.getDestinations()}getDestination(d){return this._transport.getDestination(d)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(d=!1){return this._transport.startCleanup(d||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(d,c,F,l=!1){_(this,R);_(this,ZI,null);_(this,G,!1);this._pageIndex=d,this._pageInfo=c,this._transport=F,this._stats=l?new _display_utils.StatTimer:null,this._pdfBug=l,this.commonObjs=F.commonObjs,this.objs=new PDFObjects,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:d,rotation:c=this.rotate,offsetX:F=0,offsetY:l=0,dontFlip:X=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:d,rotation:c,offsetX:F,offsetY:l,dontFlip:X})}getAnnotations({intent:d="display"}={}){const c=this._transport.getRenderingIntent(d);return this._transport.getAnnotations(this._pageIndex,c.renderingIntent)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){var d;return((d=this._transport._htmlForXfa)==null?void 0:d.children[this._pageIndex])||null}render({canvasContext:d,viewport:c,intent:F="display",annotationMode:l=_util.AnnotationMode.ENABLE,transform:X=null,background:K=null,optionalContentConfigPromise:lI=null,annotationCanvasMap:j=null,pageColors:r=null,printAnnotationStorage:T=null}){var C,m;(C=this._stats)==null||C.time("Overall");const dI=this._transport.getRenderingIntent(F,l,T);gI(this,G,!1),O(this,R,Vg).call(this),lI||(lI=this._transport.getOptionalContentConfig());let M=this._intentStates.get(dI.cacheKey);M||(M=Object.create(null),this._intentStates.set(dI.cacheKey,M)),M.streamReaderCancelTimeout&&(clearTimeout(M.streamReaderCancelTimeout),M.streamReaderCancelTimeout=null);const k=!!(dI.renderingIntent&_util.RenderingIntentFlag.PRINT);M.displayReadyCapability||(M.displayReadyCapability=new _util.PromiseCapability,M.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(m=this._stats)==null||m.time("Page Request"),this._pumpOperatorList(dI));const P=u=>{var n,D;M.renderTasks.delete(N),(this._maybeCleanupAfterRender||k)&&gI(this,G,!0),O(this,R,Zg).call(this,!k),u?(N.capability.reject(u),this._abortOperatorList({intentState:M,reason:u instanceof Error?u:new Error(u)})):N.capability.resolve(),(n=this._stats)==null||n.timeEnd("Rendering"),(D=this._stats)==null||D.timeEnd("Overall")},N=new InternalRenderTask({callback:P,params:{canvasContext:d,viewport:c,transform:X,background:K},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:j,operatorList:M.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!k,pdfBug:this._pdfBug,pageColors:r});(M.renderTasks||(M.renderTasks=new Set)).add(N);const g=N.task;return Promise.all([M.displayReadyCapability.promise,lI]).then(([u,n])=>{var D;if(this.destroyed){P();return}(D=this._stats)==null||D.time("Rendering"),N.initializeGraphics({transparency:u,optionalContentConfig:n}),N.operatorListChanged()}).catch(P),g}getOperatorList({intent:d="display",annotationMode:c=_util.AnnotationMode.ENABLE,printAnnotationStorage:F=null}={}){var j;function l(){K.operatorList.lastChunk&&(K.opListReadCapability.resolve(K.operatorList),K.renderTasks.delete(lI))}const X=this._transport.getRenderingIntent(d,c,F,!0);let K=this._intentStates.get(X.cacheKey);K||(K=Object.create(null),this._intentStates.set(X.cacheKey,K));let lI;return K.opListReadCapability||(lI=Object.create(null),lI.operatorListChanged=l,K.opListReadCapability=new _util.PromiseCapability,(K.renderTasks||(K.renderTasks=new Set)).add(lI),K.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(j=this._stats)==null||j.time("Page Request"),this._pumpOperatorList(X)),K.opListReadCapability.promise}streamTextContent({includeMarkedContent:d=!1,disableNormalization:c=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:d===!0,disableNormalization:c===!0},{highWaterMark:100,size(l){return l.items.length}})}getTextContent(d={}){if(this._transport._htmlForXfa)return this.getXfa().then(F=>_xfa_text.XfaText.textContent(F));const c=this.streamTextContent(d);return new Promise(function(F,l){function X(){K.read().then(function({value:j,done:r}){if(r){F(lI);return}Object.assign(lI.styles,j.styles),lI.items.push(...j.items),X()},l)}const K=c.getReader(),lI={items:[],styles:Object.create(null)};X()})}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const d=[];for(const c of this._intentStates.values())if(this._abortOperatorList({intentState:c,reason:new Error("Page was destroyed."),force:!0}),!c.opListReadCapability)for(const F of c.renderTasks)d.push(F.completed),F.cancel();return this.objs.clear(),gI(this,G,!1),O(this,R,Vg).call(this),Promise.all(d)}cleanup(d=!1){gI(this,G,!0);const c=O(this,R,Zg).call(this,!1);return d&&c&&this._stats&&(this._stats=new _display_utils.StatTimer),c}_startRenderPage(d,c){var l,X;const F=this._intentStates.get(c);F&&((l=this._stats)==null||l.timeEnd("Page Request"),(X=F.displayReadyCapability)==null||X.resolve(d))}_renderPageChunk(d,c){for(let F=0,l=d.length;F<l;F++)c.operatorList.fnArray.push(d.fnArray[F]),c.operatorList.argsArray.push(d.argsArray[F]);c.operatorList.lastChunk=d.lastChunk,c.operatorList.separateAnnots=d.separateAnnots;for(const F of c.renderTasks)F.operatorListChanged();d.lastChunk&&O(this,R,Zg).call(this,!0)}_pumpOperatorList({renderingIntent:d,cacheKey:c,annotationStorageSerializable:F}){const{map:l,transfers:X}=F,lI=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:d,cacheKey:c,annotationStorage:l},X).getReader(),j=this._intentStates.get(c);j.streamReader=lI;const r=()=>{lI.read().then(({value:T,done:dI})=>{if(dI){j.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(T,j),r())},T=>{if(j.streamReader=null,!this._transport.destroyed){if(j.operatorList){j.operatorList.lastChunk=!0;for(const dI of j.renderTasks)dI.operatorListChanged();O(this,R,Zg).call(this,!0)}if(j.displayReadyCapability)j.displayReadyCapability.reject(T);else if(j.opListReadCapability)j.opListReadCapability.reject(T);else throw T}})};r()}_abortOperatorList({intentState:d,reason:c,force:F=!1}){if(d.streamReader){if(d.streamReaderCancelTimeout&&(clearTimeout(d.streamReaderCancelTimeout),d.streamReaderCancelTimeout=null),!F){if(d.renderTasks.size>0)return;if(c instanceof _display_utils.RenderingCancelledException){let l=RENDERING_CANCELLED_TIMEOUT;c.extraDelay>0&&c.extraDelay<1e3&&(l+=c.extraDelay),d.streamReaderCancelTimeout=setTimeout(()=>{d.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:d,reason:c,force:!0})},l);return}}if(d.streamReader.cancel(new _util.AbortException(c.message)).catch(()=>{}),d.streamReader=null,!this._transport.destroyed){for(const[l,X]of this._intentStates)if(X===d){this._intentStates.delete(l);break}this.cleanup()}}}get stats(){return this._stats}}ZI=new WeakMap,G=new WeakMap,R=new WeakSet,Zg=function(d=!1){if(O(this,R,Vg).call(this),!I(this,G)||this.destroyed)return!1;if(d)return gI(this,ZI,setTimeout(()=>{gI(this,ZI,null),O(this,R,Zg).call(this,!1)},DELAYED_CLEANUP_TIMEOUT)),!1;for(const{renderTasks:c,operatorList:F}of this._intentStates.values())if(c.size>0||!F.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),gI(this,G,!1),!0},Vg=function(){I(this,ZI)&&(clearTimeout(I(this,ZI)),gI(this,ZI,null))},exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(){_(this,WI,new Set);_(this,L,Promise.resolve())}postMessage(d,c){const F={data:structuredClone(d,c?{transfer:c}:null)};I(this,L).then(()=>{for(const l of I(this,WI))l.call(this,F)})}addEventListener(d,c){I(this,WI).add(c)}removeEventListener(d,c){I(this,WI).delete(c)}terminate(){I(this,WI).clear()}}WI=new WeakMap,L=new WeakMap,exports.LoopbackPort=LoopbackPort;const PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};exports.PDFWorkerUtil=PDFWorkerUtil;{if(_util.isNodeJS&&typeof commonjsRequire=="function")PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if(typeof document=="object"){const A=(e=document==null?void 0:document.currentScript)==null?void 0:e.src;A&&(PDFWorkerUtil.fallbackWorkerSrc=A.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.isSameOrigin=function(A,d){let c;try{if(c=new URL(A),!c.origin||c.origin==="null")return!1}catch{return!1}const F=new URL(d,c);return c.origin===F.origin},PDFWorkerUtil.createCDNWrapper=function(A){const d=`importScripts("${A}");`;return URL.createObjectURL(new Blob([d]))}}const _PDFWorker=class _PDFWorker{constructor({name:A=null,port:d=null,verbosity:c=(0,_util.getVerbosityLevel)()}={}){var F;if(this.name=A,this.destroyed=!1,this.verbosity=c,this._readyCapability=new _util.PromiseCapability,this._port=null,this._webWorker=null,this._messageHandler=null,d){if((F=I(_PDFWorker,W))!=null&&F.has(d))throw new Error("Cannot use more than one PDFWorker per port.");(I(_PDFWorker,W)||gI(_PDFWorker,W,new WeakMap)).set(d,this),this._initializeFromPort(d);return}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(A){this._port=A,this._messageHandler=new _message_handler.MessageHandler("main","worker",A),this._messageHandler.on("ready",function(){}),this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})}_initialize(){if(!PDFWorkerUtil.isWorkerDisabled&&!_PDFWorker._mainThreadWorkerMessageHandler){let{workerSrc:A}=_PDFWorker;try{PDFWorkerUtil.isSameOrigin(window.location.href,A)||(A=PDFWorkerUtil.createCDNWrapper(new URL(A,window.location).href));const d=new Worker(A),c=new _message_handler.MessageHandler("main","worker",d),F=()=>{d.removeEventListener("error",l),c.destroy(),d.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},l=()=>{this._webWorker||F()};d.addEventListener("error",l),c.on("test",K=>{if(d.removeEventListener("error",l),this.destroyed){F();return}K?(this._messageHandler=c,this._port=d,this._webWorker=d,this._readyCapability.resolve(),c.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),c.destroy(),d.terminate())}),c.on("ready",K=>{if(d.removeEventListener("error",l),this.destroyed){F();return}try{X()}catch{this._setupFakeWorker()}});const X=()=>{const K=new Uint8Array;c.send("test",K,[K.buffer])};X();return}catch{(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),_PDFWorker._setupFakeWorkerGlobal.then(A=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}const d=new LoopbackPort;this._port=d;const c=`fake${PDFWorkerUtil.fakeWorkerId++}`,F=new _message_handler.MessageHandler(c+"_worker",c,d);A.setup(F,d);const l=new _message_handler.MessageHandler(c,c+"_worker",d);this._messageHandler=l,this._readyCapability.resolve(),l.send("configure",{verbosity:this.verbosity})}).catch(A=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${A.message}".`))})}destroy(){var A;this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),(A=I(_PDFWorker,W))==null||A.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(A){var c;if(!(A!=null&&A.port))throw new Error("PDFWorker.fromPort - invalid method signature.");const d=(c=I(this,W))==null?void 0:c.get(A.port);if(d){if(d._pendingDestroy)throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return d}return new _PDFWorker(A)}static get workerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(PDFWorkerUtil.fallbackWorkerSrc!==null)return _util.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _mainThreadWorkerMessageHandler(){var A;try{return((A=globalThis.pdfjsWorker)==null?void 0:A.WorkerMessageHandler)||null}catch{return null}}static get _setupFakeWorkerGlobal(){const loader=async()=>{const mainWorkerMessageHandler=this._mainThreadWorkerMessageHandler;if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_util.isNodeJS&&typeof commonjsRequire=="function"){const worker=eval("require")(this.workerSrc);return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(this.workerSrc),window.pdfjsWorker.WorkerMessageHandler};return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}};W=new WeakMap,_(_PDFWorker,W);let PDFWorker=_PDFWorker;exports.PDFWorker=PDFWorker;class WorkerTransport{constructor(d,c,F,l,X){_(this,y);_(this,z,new Map);_(this,J,new Map);_(this,V,new Map);_(this,o,null);this.messageHandler=d,this.loadingTask=c,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({ownerDocument:l.ownerDocument,styleElement:l.styleElement}),this._params=l,this.canvasFactory=X.canvasFactory,this.filterFactory=X.filterFactory,this.cMapReaderFactory=X.cMapReaderFactory,this.standardFontDataFactory=X.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=F,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=new _util.PromiseCapability,this.setupMessageHandler()}get annotationStorage(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}getRenderingIntent(d,c=_util.AnnotationMode.ENABLE,F=null,l=!1){let X=_util.RenderingIntentFlag.DISPLAY,K=_annotation_storage.SerializableEmpty;switch(d){case"any":X=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":X=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(`getRenderingIntent - invalid intent: ${d}`)}switch(c){case _util.AnnotationMode.DISABLE:X+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:X+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:X+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,K=(X&_util.RenderingIntentFlag.PRINT&&F instanceof _annotation_storage.PrintAnnotationStorage?F:this.annotationStorage).serializable;break;default:(0,_util.warn)(`getRenderingIntent - invalid annotationMode: ${c}`)}return l&&(X+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:X,cacheKey:`${X}_${K.hash}`,annotationStorageSerializable:K}}destroy(){var F;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=new _util.PromiseCapability,(F=I(this,o))==null||F.reject(new Error("Worker was destroyed during onPassword callback"));const d=[];for(const l of I(this,J).values())d.push(l._destroy());I(this,J).clear(),I(this,V).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const c=this.messageHandler.sendWithPromise("Terminate",null);return d.push(c),Promise.all(d).then(()=>{var l;this.commonObjs.clear(),this.fontLoader.clear(),I(this,z).clear(),this.filterFactory.destroy(),(l=this._networkStream)==null||l.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:d,loadingTask:c}=this;d.on("GetReader",(F,l)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=X=>{this._lastProgress={loaded:X.loaded,total:X.total}},l.onPull=()=>{this._fullReader.read().then(function({value:X,done:K}){if(K){l.close();return}(0,_util.assert)(X instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),l.enqueue(new Uint8Array(X),1,[X])}).catch(X=>{l.error(X)})},l.onCancel=X=>{this._fullReader.cancel(X),l.ready.catch(K=>{if(!this.destroyed)throw K})}}),d.on("ReaderHeadersReady",F=>{const l=new _util.PromiseCapability,X=this._fullReader;return X.headersReady.then(()=>{var K;(!X.isStreamingSupported||!X.isRangeSupported)&&(this._lastProgress&&((K=c.onProgress)==null||K.call(c,this._lastProgress)),X.onProgress=lI=>{var j;(j=c.onProgress)==null||j.call(c,{loaded:lI.loaded,total:lI.total})}),l.resolve({isStreamingSupported:X.isStreamingSupported,isRangeSupported:X.isRangeSupported,contentLength:X.contentLength})},l.reject),l.promise}),d.on("GetRangeReader",(F,l)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const X=this._networkStream.getRangeReader(F.begin,F.end);if(!X){l.close();return}l.onPull=()=>{X.read().then(function({value:K,done:lI}){if(lI){l.close();return}(0,_util.assert)(K instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),l.enqueue(new Uint8Array(K),1,[K])}).catch(K=>{l.error(K)})},l.onCancel=K=>{X.cancel(K),l.ready.catch(lI=>{if(!this.destroyed)throw lI})}}),d.on("GetDoc",({pdfInfo:F})=>{this._numPages=F.numPages,this._htmlForXfa=F.htmlForXfa,delete F.htmlForXfa,c._capability.resolve(new PDFDocumentProxy(F,this))}),d.on("DocException",function(F){let l;switch(F.name){case"PasswordException":l=new _util.PasswordException(F.message,F.code);break;case"InvalidPDFException":l=new _util.InvalidPDFException(F.message);break;case"MissingPDFException":l=new _util.MissingPDFException(F.message);break;case"UnexpectedResponseException":l=new _util.UnexpectedResponseException(F.message,F.status);break;case"UnknownErrorException":l=new _util.UnknownErrorException(F.message,F.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}c._capability.reject(l)}),d.on("PasswordRequest",F=>{if(gI(this,o,new _util.PromiseCapability),c.onPassword){const l=X=>{X instanceof Error?I(this,o).reject(X):I(this,o).resolve({password:X})};try{c.onPassword(l,F.code)}catch(X){I(this,o).reject(X)}}else I(this,o).reject(new _util.PasswordException(F.message,F.code));return I(this,o).promise}),d.on("DataLoaded",F=>{var l;(l=c.onProgress)==null||l.call(c,{loaded:F.length,total:F.length}),this.downloadInfoCapability.resolve(F)}),d.on("StartRenderPage",F=>{if(this.destroyed)return;I(this,J).get(F.pageIndex)._startRenderPage(F.transparency,F.cacheKey)}),d.on("commonobj",([F,l,X])=>{var K;if(!this.destroyed&&!this.commonObjs.has(F))switch(l){case"Font":const lI=this._params;if("error"in X){const T=X.error;(0,_util.warn)(`Error during font loading: ${T}`),this.commonObjs.resolve(F,T);break}const j=lI.pdfBug&&((K=globalThis.FontInspector)!=null&&K.enabled)?(T,dI)=>globalThis.FontInspector.fontAdded(T,dI):null,r=new _font_loader.FontFaceObject(X,{isEvalSupported:lI.isEvalSupported,disableFontFace:lI.disableFontFace,ignoreErrors:lI.ignoreErrors,inspectFont:j});this.fontLoader.bind(r).catch(T=>d.sendWithPromise("FontFallback",{id:F})).finally(()=>{!lI.fontExtraProperties&&r.data&&(r.data=null),this.commonObjs.resolve(F,r)});break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(F,X);break;default:throw new Error(`Got unknown common object type ${l}`)}}),d.on("obj",([F,l,X,K])=>{var j;if(this.destroyed)return;const lI=I(this,J).get(l);if(!lI.objs.has(F))switch(X){case"Image":if(lI.objs.resolve(F,K),K){let r;if(K.bitmap){const{width:T,height:dI}=K;r=T*dI*4}else r=((j=K.data)==null?void 0:j.length)||0;r>_util.MAX_IMAGE_SIZE_TO_CACHE&&(lI._maybeCleanupAfterRender=!0)}break;case"Pattern":lI.objs.resolve(F,K);break;default:throw new Error(`Got unknown object type ${X}`)}}),d.on("DocProgress",F=>{var l;this.destroyed||(l=c.onProgress)==null||l.call(c,{loaded:F.loaded,total:F.total})}),d.on("FetchBuiltInCMap",F=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.cMapReaderFactory?this.cMapReaderFactory.fetch(F):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),d.on("FetchStandardFontData",F=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.standardFontDataFactory?this.standardFontDataFactory.fetch(F):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){var F;this.annotationStorage.size<=0&&(0,_util.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:d,transfers:c}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:d,filename:((F=this._fullReader)==null?void 0:F.filename)??null},c).finally(()=>{this.annotationStorage.resetModified()})}getPage(d){if(!Number.isInteger(d)||d<=0||d>this._numPages)return Promise.reject(new Error("Invalid page request."));const c=d-1,F=I(this,V).get(c);if(F)return F;const l=this.messageHandler.sendWithPromise("GetPage",{pageIndex:c}).then(X=>{if(this.destroyed)throw new Error("Transport destroyed");const K=new PDFPageProxy(c,X,this,this._params.pdfBug);return I(this,J).set(c,K),K});return I(this,V).set(c,l),l}getPageIndex(d){return typeof d!="object"||d===null||!Number.isInteger(d.num)||d.num<0||!Number.isInteger(d.gen)||d.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:d.num,gen:d.gen})}getAnnotations(d,c){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:d,intent:c})}getFieldObjects(){return O(this,y,Xg).call(this,"GetFieldObjects")}hasJSActions(){return O(this,y,Xg).call(this,"HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(d){return typeof d!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:d})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return O(this,y,Xg).call(this,"GetDocJSActions")}getPageJSActions(d){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:d})}getStructTree(d){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:d})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then(d=>new _optional_content_config.OptionalContentConfig(d))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const d="GetMetadata",c=I(this,z).get(d);if(c)return c;const F=this.messageHandler.sendWithPromise(d,null).then(l=>{var X,K;return{info:l[0],metadata:l[1]?new _metadata.Metadata(l[1]):null,contentDispositionFilename:((X=this._fullReader)==null?void 0:X.filename)??null,contentLength:((K=this._fullReader)==null?void 0:K.contentLength)??null}});return I(this,z).set(d,F),F}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(d=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const c of I(this,J).values())if(!c.cleanup())throw new Error(`startCleanup: Page ${c.pageNumber} is currently rendering.`);this.commonObjs.clear(),d||this.fontLoader.clear(),I(this,z).clear(),this.filterFactory.destroy(!0)}}get loadingParams(){const{disableAutoFetch:d,enableXfa:c}=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:d,enableXfa:c})}}z=new WeakMap,J=new WeakMap,V=new WeakMap,o=new WeakMap,y=new WeakSet,Xg=function(d,c=null){const F=I(this,z).get(d);if(F)return F;const l=this.messageHandler.sendWithPromise(d,c);return I(this,z).set(d,l),l};class PDFObjects{constructor(){_(this,Y);_(this,s,Object.create(null))}get(d,c=null){if(c){const l=O(this,Y,Sg).call(this,d);return l.capability.promise.then(()=>c(l.data)),null}const F=I(this,s)[d];if(!(F!=null&&F.capability.settled))throw new Error(`Requesting object that isn't resolved yet ${d}.`);return F.data}has(d){const c=I(this,s)[d];return(c==null?void 0:c.capability.settled)||!1}resolve(d,c=null){const F=O(this,Y,Sg).call(this,d);F.data=c,F.capability.resolve()}clear(){var d;for(const c in I(this,s)){const{data:F}=I(this,s)[c];(d=F==null?void 0:F.bitmap)==null||d.close()}gI(this,s,Object.create(null))}}s=new WeakMap,Y=new WeakSet,Sg=function(d){var c;return(c=I(this,s))[d]||(c[d]={capability:new _util.PromiseCapability,data:null})};class RenderTask{constructor(d){_(this,h,null);gI(this,h,d),this.onContinue=null}get promise(){return I(this,h).capability.promise}cancel(d=0){I(this,h).cancel(null,d)}get separateAnnots(){const{separateAnnots:d}=I(this,h).operatorList;if(!d)return!1;const{annotationCanvasMap:c}=I(this,h);return d.form||d.canvas&&(c==null?void 0:c.size)>0}}h=new WeakMap,exports.RenderTask=RenderTask;const i=class i{constructor({callback:d,params:c,objs:F,commonObjs:l,annotationCanvasMap:X,operatorList:K,pageIndex:lI,canvasFactory:j,filterFactory:r,useRequestAnimationFrame:T=!1,pdfBug:dI=!1,pageColors:M=null}){this.callback=d,this.params=c,this.objs=F,this.commonObjs=l,this.annotationCanvasMap=X,this.operatorListIdx=null,this.operatorList=K,this._pageIndex=lI,this.canvasFactory=j,this.filterFactory=r,this._pdfBug=dI,this.pageColors=M,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=T===!0&&typeof window<"u",this.cancelled=!1,this.capability=new _util.PromiseCapability,this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=c.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:d=!1,optionalContentConfig:c}){var lI,j;if(this.cancelled)return;if(this._canvas){if(I(i,Z).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");I(i,Z).add(this._canvas)}this._pdfBug&&((lI=globalThis.StepperManager)!=null&&lI.enabled)&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:F,viewport:l,transform:X,background:K}=this.params;this.gfx=new _canvas.CanvasGraphics(F,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:c},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:X,viewport:l,transparency:d,background:K}),this.operatorListIdx=0,this.graphicsReady=!0,(j=this.graphicsReadyCallback)==null||j.call(this)}cancel(d=null,c=0){var F;this.running=!1,this.cancelled=!0,(F=this.gfx)==null||F.endDrawing(),I(i,Z).delete(this._canvas),this.callback(d||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,c))}operatorListChanged(){var d;if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}(d=this.stepper)==null||d.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame(()=>{this._nextBound().catch(this._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),I(i,Z).delete(this._canvas),this.callback())))}};Z=new WeakMap,_(i,Z,new WeakSet);let InternalRenderTask=i;const version="3.11.174";exports.version=version;const build="ce8716743";exports.build=build},(wI,b,ZI)=>{var e,W,z,wC,V;Object.defineProperty(b,"__esModule",{value:!0}),b.SerializableEmpty=b.PrintAnnotationStorage=b.AnnotationStorage=void 0;var G=ZI(1),R=ZI(4),cI=ZI(8);const U=Object.freeze({map:null,hash:"",transfers:void 0});b.SerializableEmpty=U;class WI{constructor(){_(this,z);_(this,e,!1);_(this,W,new Map);this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(y,B){const s=I(this,W).get(y);return s===void 0?B:Object.assign(B,s)}getRawValue(y){return I(this,W).get(y)}remove(y){if(I(this,W).delete(y),I(this,W).size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const B of I(this,W).values())if(B instanceof R.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(y,B){const s=I(this,W).get(y);let Y=!1;if(s!==void 0)for(const[t,h]of Object.entries(B))s[t]!==h&&(Y=!0,s[t]=h);else Y=!0,I(this,W).set(y,B);Y&&O(this,z,wC).call(this),B instanceof R.AnnotationEditor&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(B.constructor._type)}has(y){return I(this,W).has(y)}getAll(){return I(this,W).size>0?(0,G.objectFromMap)(I(this,W)):null}setAll(y){for(const[B,s]of Object.entries(y))this.setValue(B,s)}get size(){return I(this,W).size}resetModified(){I(this,e)&&(gI(this,e,!1),typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new L(this)}get serializable(){if(I(this,W).size===0)return U;const y=new Map,B=new cI.MurmurHash3_64,s=[],Y=Object.create(null);let t=!1;for(const[h,Z]of I(this,W)){const i=Z instanceof R.AnnotationEditor?Z.serialize(!1,Y):Z;i&&(y.set(h,i),B.update(`${h}:${JSON.stringify(i)}`),t||(t=!!i.bitmap))}if(t)for(const h of y.values())h.bitmap&&s.push(h.bitmap);return y.size>0?{map:y,hash:B.hexdigest(),transfers:s}:U}}e=new WeakMap,W=new WeakMap,z=new WeakSet,wC=function(){I(this,e)||(gI(this,e,!0),typeof this.onSetModified=="function"&&this.onSetModified())},b.AnnotationStorage=WI;class L extends WI{constructor(B){super();_(this,V);const{map:s,hash:Y,transfers:t}=B.serializable,h=structuredClone(s,t?{transfer:t}:null);gI(this,V,{map:h,hash:Y,transfers:t})}get print(){(0,G.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return I(this,V)}}V=new WeakMap,b.PrintAnnotationStorage=L},(wI,b,ZI)=>{var L,e,W,z,J,V,o,y,B,s,Y,t,h,Z,i,tg,Fg,c,zg,Jg,YC,oC,VC,Lg,XC;Object.defineProperty(b,"__esModule",{value:!0}),b.AnnotationEditor=void 0;var G=ZI(5),R=ZI(1),cI=ZI(6);const T=class T{constructor(M){_(this,i);_(this,L,"");_(this,e,!1);_(this,W,null);_(this,z,null);_(this,J,null);_(this,V,!1);_(this,o,null);_(this,y,this.focusin.bind(this));_(this,B,this.focusout.bind(this));_(this,s,!1);_(this,Y,!1);_(this,t,!1);fI(this,"_initialOptions",Object.create(null));fI(this,"_uiManager",null);fI(this,"_focusEventsAllowed",!0);fI(this,"_l10nPromise",null);_(this,h,!1);_(this,Z,T._zIndex++);this.constructor===T&&(0,R.unreachable)("Cannot initialize AnnotationEditor."),this.parent=M.parent,this.id=M.id,this.width=this.height=null,this.pageIndex=M.parent.pageIndex,this.name=M.name,this.div=null,this._uiManager=M.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=M.isCentered,this._structTreeParentId=null;const{rotation:k,rawDims:{pageWidth:P,pageHeight:N,pageX:g,pageY:C}}=this.parent.viewport;this.rotation=k,this.pageRotation=(360+k-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[P,N],this.pageTranslation=[g,C];const[m,u]=this.parentDimensions;this.x=M.x/m,this.y=M.y/u,this.isAttachedToDOM=!1,this.deleted=!1}get editorType(){return Object.getPrototypeOf(this).constructor._type}static get _defaultLineColor(){return(0,R.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(M){const k=new WI({id:M.parent.getNextId(),parent:M.parent,uiManager:M._uiManager});k.annotationElementId=M.annotationElementId,k.deleted=!0,k._uiManager.addToAnnotationStorage(k)}static initialize(M,k=null){if(T._l10nPromise||(T._l10nPromise=new Map(["editor_alt_text_button_label","editor_alt_text_edit_button_label","editor_alt_text_decorative_tooltip"].map(N=>[N,M.get(N)]))),k!=null&&k.strings)for(const N of k.strings)T._l10nPromise.set(N,M.get(N));if(T._borderLineWidth!==-1)return;const P=getComputedStyle(document.documentElement);T._borderLineWidth=parseFloat(P.getPropertyValue("--outline-width"))||0}static updateDefaultParams(M,k){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(M){return!1}static paste(M,k){(0,R.unreachable)("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return I(this,h)}set _isDraggable(M){var k;gI(this,h,M),(k=this.div)==null||k.classList.toggle("draggable",M)}center(){const[M,k]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*k/(M*2),this.y+=this.width*M/(k*2);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*k/(M*2),this.y-=this.width*M/(k*2);break;default:this.x-=this.width/2,this.y-=this.height/2;break}this.fixAndSetPosition()}addCommands(M){this._uiManager.addCommands(M)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=I(this,Z)}setParent(M){M!==null&&(this.pageIndex=M.pageIndex,this.pageDimensions=M.pageDimensions),this.parent=M}focusin(M){this._focusEventsAllowed&&(I(this,s)?gI(this,s,!1):this.parent.setSelected(this))}focusout(M){var P;if(!this._focusEventsAllowed||!this.isAttachedToDOM)return;const k=M.relatedTarget;k!=null&&k.closest(`#${this.id}`)||(M.preventDefault(),(P=this.parent)!=null&&P.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(M,k,P,N){const[g,C]=this.parentDimensions;[P,N]=this.screenToPageTranslation(P,N),this.x=(M+P)/g,this.y=(k+N)/C,this.fixAndSetPosition()}translate(M,k){O(this,i,tg).call(this,this.parentDimensions,M,k)}translateInPage(M,k){O(this,i,tg).call(this,this.pageDimensions,M,k),this.div.scrollIntoView({block:"nearest"})}drag(M,k){const[P,N]=this.parentDimensions;if(this.x+=M/P,this.y+=k/N,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:n,y:D}=this.div.getBoundingClientRect();this.parent.findNewParent(this,n,D)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:g,y:C}=this;const[m,u]=O(this,i,Fg).call(this);g+=m,C+=u,this.div.style.left=`${(100*g).toFixed(2)}%`,this.div.style.top=`${(100*C).toFixed(2)}%`,this.div.scrollIntoView({block:"nearest"})}fixAndSetPosition(){const[M,k]=this.pageDimensions;let{x:P,y:N,width:g,height:C}=this;switch(g*=M,C*=k,P*=M,N*=k,this.rotation){case 0:P=Math.max(0,Math.min(M-g,P)),N=Math.max(0,Math.min(k-C,N));break;case 90:P=Math.max(0,Math.min(M-C,P)),N=Math.min(k,Math.max(g,N));break;case 180:P=Math.min(M,Math.max(g,P)),N=Math.min(k,Math.max(C,N));break;case 270:P=Math.min(M,Math.max(C,P)),N=Math.max(0,Math.min(k-g,N));break}this.x=P/=M,this.y=N/=k;const[m,u]=O(this,i,Fg).call(this);P+=m,N+=u;const{style:n}=this.div;n.left=`${(100*P).toFixed(2)}%`,n.top=`${(100*N).toFixed(2)}%`,this.moveInDOM()}screenToPageTranslation(M,k){var P;return O(P=T,c,zg).call(P,M,k,this.parentRotation)}pageTranslationToScreen(M,k){var P;return O(P=T,c,zg).call(P,M,k,360-this.parentRotation)}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:M,pageDimensions:[k,P]}=this,N=k*M,g=P*M;return R.FeatureTest.isCSSRoundSupported?[Math.round(N),Math.round(g)]:[N,g]}setDims(M,k){var g;const[P,N]=this.parentDimensions;this.div.style.width=`${(100*M/P).toFixed(2)}%`,I(this,V)||(this.div.style.height=`${(100*k/N).toFixed(2)}%`),(g=I(this,W))==null||g.classList.toggle("small",M<T.SMALL_EDITOR_SIZE||k<T.SMALL_EDITOR_SIZE)}fixDims(){const{style:M}=this.div,{height:k,width:P}=M,N=P.endsWith("%"),g=!I(this,V)&&k.endsWith("%");if(N&&g)return;const[C,m]=this.parentDimensions;N||(M.width=`${(100*parseFloat(P)/C).toFixed(2)}%`),!I(this,V)&&!g&&(M.height=`${(100*parseFloat(k)/m).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}async addAltTextButton(){if(I(this,W))return;const M=gI(this,W,document.createElement("button"));M.className="altText";const k=await T._l10nPromise.get("editor_alt_text_button_label");M.textContent=k,M.setAttribute("aria-label",k),M.tabIndex="0",M.addEventListener("contextmenu",cI.noContextMenu),M.addEventListener("pointerdown",P=>P.stopPropagation()),M.addEventListener("click",P=>{P.preventDefault(),this._uiManager.editAltText(this)},{capture:!0}),M.addEventListener("keydown",P=>{P.target===M&&P.key==="Enter"&&(P.preventDefault(),this._uiManager.editAltText(this))}),O(this,i,Lg).call(this),this.div.append(M),T.SMALL_EDITOR_SIZE||(T.SMALL_EDITOR_SIZE=Math.min(128,Math.round(M.getBoundingClientRect().width*1.4)))}getClientDimensions(){return this.div.getBoundingClientRect()}get altTextData(){return{altText:I(this,L),decorative:I(this,e)}}set altTextData({altText:M,decorative:k}){I(this,L)===M&&I(this,e)===k||(gI(this,L,M),gI(this,e,k),O(this,i,Lg).call(this))}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",I(this,y)),this.div.addEventListener("focusout",I(this,B));const[M,k]=this.parentDimensions;this.parentRotation%180!==0&&(this.div.style.maxWidth=`${(100*k/M).toFixed(2)}%`,this.div.style.maxHeight=`${(100*M/k).toFixed(2)}%`);const[P,N]=this.getInitialTranslation();return this.translate(P,N),(0,G.bindEvents)(this,this.div,["pointerdown"]),this.div}pointerdown(M){const{isMac:k}=R.FeatureTest.platform;if(M.button!==0||M.ctrlKey&&k){M.preventDefault();return}gI(this,s,!0),O(this,i,XC).call(this,M)}moveInDOM(){var M;(M=this.parent)==null||M.moveEditorInDOM(this)}_setParentAndPosition(M,k,P){M.changeParent(this),this.x=k,this.y=P,this.fixAndSetPosition()}getRect(M,k){const P=this.parentScale,[N,g]=this.pageDimensions,[C,m]=this.pageTranslation,u=M/P,n=k/P,D=this.x*N,x=this.y*g,CI=this.width*N,bI=this.height*g;switch(this.rotation){case 0:return[D+u+C,g-x-n-bI+m,D+u+CI+C,g-x-n+m];case 90:return[D+n+C,g-x+u+m,D+n+bI+C,g-x+u+CI+m];case 180:return[D-u-CI+C,g-x+n+m,D-u+C,g-x+n+bI+m];case 270:return[D-n-bI+C,g-x-u-CI+m,D-n+C,g-x-u+m];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(M,k){const[P,N,g,C]=M,m=g-P,u=C-N;switch(this.rotation){case 0:return[P,k-C,m,u];case 90:return[P,k-N,u,m];case 180:return[g,k-N,m,u];case 270:return[g,k-C,u,m];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){gI(this,t,!0)}disableEditMode(){gI(this,t,!1)}isInEditMode(){return I(this,t)}shouldGetKeyboardEvents(){return!1}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){var M,k;(M=this.div)==null||M.addEventListener("focusin",I(this,y)),(k=this.div)==null||k.addEventListener("focusout",I(this,B))}serialize(M=!1,k=null){(0,R.unreachable)("An editor must be serializable")}static deserialize(M,k,P){const N=new this.prototype.constructor({parent:k,id:k.getNextId(),uiManager:P});N.rotation=M.rotation;const[g,C]=N.pageDimensions,[m,u,n,D]=N.getRectInCurrentCoords(M.rect,C);return N.x=m/g,N.y=u/C,N.width=n/g,N.height=D/C,N}remove(){var M;this.div.removeEventListener("focusin",I(this,y)),this.div.removeEventListener("focusout",I(this,B)),this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),(M=I(this,W))==null||M.remove(),gI(this,W,null),gI(this,z,null)}get isResizable(){return!1}makeResizable(){this.isResizable&&(O(this,i,YC).call(this),I(this,o).classList.remove("hidden"))}select(){var M;this.makeResizable(),(M=this.div)==null||M.classList.add("selectedEditor")}unselect(){var M,k,P;(M=I(this,o))==null||M.classList.add("hidden"),(k=this.div)==null||k.classList.remove("selectedEditor"),(P=this.div)!=null&&P.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus()}updateParams(M,k){}disableEditing(){I(this,W)&&(I(this,W).hidden=!0)}enableEditing(){I(this,W)&&(I(this,W).hidden=!1)}enterInEditMode(){}get contentDiv(){return this.div}get isEditing(){return I(this,Y)}set isEditing(M){gI(this,Y,M),this.parent&&(M?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(M,k){gI(this,V,!0);const P=M/k,{style:N}=this.div;N.aspectRatio=P,N.height="auto"}static get MIN_SIZE(){return 16}};L=new WeakMap,e=new WeakMap,W=new WeakMap,z=new WeakMap,J=new WeakMap,V=new WeakMap,o=new WeakMap,y=new WeakMap,B=new WeakMap,s=new WeakMap,Y=new WeakMap,t=new WeakMap,h=new WeakMap,Z=new WeakMap,i=new WeakSet,tg=function([M,k],P,N){[P,N]=this.screenToPageTranslation(P,N),this.x+=P/M,this.y+=N/k,this.fixAndSetPosition()},Fg=function(){const[M,k]=this.parentDimensions,{_borderLineWidth:P}=T,N=P/M,g=P/k;switch(this.rotation){case 90:return[-N,g];case 180:return[N,g];case 270:return[N,-g];default:return[-N,-g]}},c=new WeakSet,zg=function(M,k,P){switch(P){case 90:return[k,-M];case 180:return[-M,-k];case 270:return[-k,M];default:return[M,k]}},Jg=function(M){switch(M){case 90:{const[k,P]=this.pageDimensions;return[0,-k/P,P/k,0]}case 180:return[-1,0,0,-1];case 270:{const[k,P]=this.pageDimensions;return[0,k/P,-P/k,0]}default:return[1,0,0,1]}},YC=function(){if(I(this,o))return;gI(this,o,document.createElement("div")),I(this,o).classList.add("resizers");const M=["topLeft","topRight","bottomRight","bottomLeft"];this._willKeepAspectRatio||M.push("topMiddle","middleRight","bottomMiddle","middleLeft");for(const k of M){const P=document.createElement("div");I(this,o).append(P),P.classList.add("resizer",k),P.addEventListener("pointerdown",O(this,i,oC).bind(this,k)),P.addEventListener("contextmenu",cI.noContextMenu)}this.div.prepend(I(this,o))},oC=function(M,k){k.preventDefault();const{isMac:P}=R.FeatureTest.platform;if(k.button!==0||k.ctrlKey&&P)return;const N=O(this,i,VC).bind(this,M),g=this._isDraggable;this._isDraggable=!1;const C={passive:!0,capture:!0};window.addEventListener("pointermove",N,C);const m=this.x,u=this.y,n=this.width,D=this.height,x=this.parent.div.style.cursor,CI=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(k.target).cursor;const bI=()=>{this._isDraggable=g,window.removeEventListener("pointerup",bI),window.removeEventListener("blur",bI),window.removeEventListener("pointermove",N,C),this.parent.div.style.cursor=x,this.div.style.cursor=CI;const sI=this.x,YI=this.y,XI=this.width,aI=this.height;sI===m&&YI===u&&XI===n&&aI===D||this.addCommands({cmd:()=>{this.width=XI,this.height=aI,this.x=sI,this.y=YI;const[f,$]=this.parentDimensions;this.setDims(f*XI,$*aI),this.fixAndSetPosition()},undo:()=>{this.width=n,this.height=D,this.x=m,this.y=u;const[f,$]=this.parentDimensions;this.setDims(f*n,$*D),this.fixAndSetPosition()},mustExec:!0})};window.addEventListener("pointerup",bI),window.addEventListener("blur",bI)},VC=function(M,k){const[P,N]=this.parentDimensions,g=this.x,C=this.y,m=this.width,u=this.height,n=T.MIN_SIZE/P,D=T.MIN_SIZE/N,x=eI=>Math.round(eI*1e4)/1e4,CI=O(this,i,Jg).call(this,this.rotation),bI=(eI,JI)=>[CI[0]*eI+CI[2]*JI,CI[1]*eI+CI[3]*JI],sI=O(this,i,Jg).call(this,360-this.rotation),YI=(eI,JI)=>[sI[0]*eI+sI[2]*JI,sI[1]*eI+sI[3]*JI];let XI,aI,f=!1,$=!1;switch(M){case"topLeft":f=!0,XI=(eI,JI)=>[0,0],aI=(eI,JI)=>[eI,JI];break;case"topMiddle":XI=(eI,JI)=>[eI/2,0],aI=(eI,JI)=>[eI/2,JI];break;case"topRight":f=!0,XI=(eI,JI)=>[eI,0],aI=(eI,JI)=>[0,JI];break;case"middleRight":$=!0,XI=(eI,JI)=>[eI,JI/2],aI=(eI,JI)=>[0,JI/2];break;case"bottomRight":f=!0,XI=(eI,JI)=>[eI,JI],aI=(eI,JI)=>[0,0];break;case"bottomMiddle":XI=(eI,JI)=>[eI/2,JI],aI=(eI,JI)=>[eI/2,0];break;case"bottomLeft":f=!0,XI=(eI,JI)=>[0,JI],aI=(eI,JI)=>[eI,0];break;case"middleLeft":$=!0,XI=(eI,JI)=>[0,JI/2],aI=(eI,JI)=>[eI,JI/2];break}const w=XI(m,u),p=aI(m,u);let v=bI(...p);const q=x(g+v[0]),mI=x(C+v[1]);let NI=1,hI=1,[E,MI]=this.screenToPageTranslation(k.movementX,k.movementY);if([E,MI]=YI(E/P,MI/N),f){const eI=Math.hypot(m,u);NI=hI=Math.max(Math.min(Math.hypot(p[0]-w[0]-E,p[1]-w[1]-MI)/eI,1/m,1/u),n/m,D/u)}else $?NI=Math.max(n,Math.min(1,Math.abs(p[0]-w[0]-E)))/m:hI=Math.max(D,Math.min(1,Math.abs(p[1]-w[1]-MI)))/u;const yI=x(m*NI),TI=x(u*hI);v=bI(...aI(yI,TI));const LI=q-v[0],UI=mI-v[1];this.width=yI,this.height=TI,this.x=LI,this.y=UI,this.setDims(P*yI,N*TI),this.fixAndSetPosition()},Lg=async function(){var P;const M=I(this,W);if(!M)return;if(!I(this,L)&&!I(this,e)){M.classList.remove("done"),(P=I(this,z))==null||P.remove();return}T._l10nPromise.get("editor_alt_text_edit_button_label").then(N=>{M.setAttribute("aria-label",N)});let k=I(this,z);if(!k){gI(this,z,k=document.createElement("span")),k.className="tooltip",k.setAttribute("role","tooltip");const N=k.id=`alt-text-tooltip-${this.id}`;M.setAttribute("aria-describedby",N);const g=100;M.addEventListener("mouseenter",()=>{gI(this,J,setTimeout(()=>{gI(this,J,null),I(this,z).classList.add("show"),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"alt_text_tooltip"}}})},g))}),M.addEventListener("mouseleave",()=>{var C;clearTimeout(I(this,J)),gI(this,J,null),(C=I(this,z))==null||C.classList.remove("show")})}M.classList.add("done"),k.innerText=I(this,e)?await T._l10nPromise.get("editor_alt_text_decorative_tooltip"):I(this,L),k.parentNode||M.append(k)},XC=function(M){if(!this._isDraggable)return;const k=this._uiManager.isSelected(this);this._uiManager.setUpDragSession();let P,N;k&&(P={passive:!0,capture:!0},N=C=>{const[m,u]=this.screenToPageTranslation(C.movementX,C.movementY);this._uiManager.dragSelectedEditors(m,u)},window.addEventListener("pointermove",N,P));const g=()=>{if(window.removeEventListener("pointerup",g),window.removeEventListener("blur",g),k&&window.removeEventListener("pointermove",N,P),gI(this,s,!1),!this._uiManager.endDragSession()){const{isMac:C}=R.FeatureTest.platform;M.ctrlKey&&!C||M.shiftKey||M.metaKey&&C?this.parent.toggleSelected(this):this.parent.setSelected(this)}};window.addEventListener("pointerup",g),window.addEventListener("blur",g)},_(T,c),fI(T,"_borderLineWidth",-1),fI(T,"_colorManager",new G.ColorManager),fI(T,"_zIndex",1),fI(T,"SMALL_EDITOR_SIZE",0);let U=T;b.AnnotationEditor=U;class WI extends U{constructor(M){super(M),this.annotationElementId=M.annotationElementId,this.deleted=!0}serialize(){return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex}}}},(wI,b,ZI)=>{var V,o,y,B,s,kg,h,Z,i,A,d,hC,l,X,K,lI,j,r,T,dI,M,k,P,N,g,C,m,u,n,D,x,CI,bI,sI,YI,XI,aI,f,$,w,p,v,q,mI,NI,hI,E,aC,Tg,Qg,hg,jg,xg,$I,sg,NC,RC,Og,mg,Ug;Object.defineProperty(b,"__esModule",{value:!0}),b.KeyboardManager=b.CommandManager=b.ColorManager=b.AnnotationEditorUIManager=void 0,b.bindEvents=cI,b.opacityToHex=U;var G=ZI(1),R=ZI(6);function cI(xI,S,BI){for(const HI of BI)S.addEventListener(HI,xI[HI].bind(xI))}function U(xI){return Math.round(Math.min(255,Math.max(1,255*xI))).toString(16).padStart(2,"0")}class WI{constructor(){_(this,V,0)}getId(){return`${G.AnnotationEditorPrefix}${bg(this,V)._++}`}}V=new WeakMap;const t=class t{constructor(){_(this,s);_(this,o,(0,G.getUuid)());_(this,y,0);_(this,B,null)}static get _isSVGFittingCanvas(){const S='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>',HI=new OffscreenCanvas(1,3).getContext("2d"),SI=new Image;SI.src=S;const zI=SI.decode().then(()=>(HI.drawImage(SI,0,0,1,1,0,0,1,3),new Uint32Array(HI.getImageData(0,0,1,1).data.buffer)[0]===0));return(0,G.shadow)(this,"_isSVGFittingCanvas",zI)}async getFromFile(S){const{lastModified:BI,name:HI,size:SI,type:zI}=S;return O(this,s,kg).call(this,`${BI}_${HI}_${SI}_${zI}`,S)}async getFromUrl(S){return O(this,s,kg).call(this,S,S)}async getFromId(S){I(this,B)||gI(this,B,new Map);const BI=I(this,B).get(S);return BI?BI.bitmap?(BI.refCounter+=1,BI):BI.file?this.getFromFile(BI.file):this.getFromUrl(BI.url):null}getSvgUrl(S){const BI=I(this,B).get(S);return BI!=null&&BI.isSvg?BI.svgUrl:null}deleteId(S){I(this,B)||gI(this,B,new Map);const BI=I(this,B).get(S);BI&&(BI.refCounter-=1,BI.refCounter===0&&(BI.bitmap=null))}isValidId(S){return S.startsWith(`image_${I(this,o)}_`)}};o=new WeakMap,y=new WeakMap,B=new WeakMap,s=new WeakSet,kg=async function(S,BI){I(this,B)||gI(this,B,new Map);let HI=I(this,B).get(S);if(HI===null)return null;if(HI!=null&&HI.bitmap)return HI.refCounter+=1,HI;try{HI||(HI={bitmap:null,id:`image_${I(this,o)}_${bg(this,y)._++}`,refCounter:0,isSvg:!1});let SI;if(typeof BI=="string"){HI.url=BI;const zI=await fetch(BI);if(!zI.ok)throw new Error(zI.statusText);SI=await zI.blob()}else SI=HI.file=BI;if(SI.type==="image/svg+xml"){const zI=t._isSVGFittingCanvas,nI=new FileReader,H=new Image,a=new Promise((Q,GI)=>{H.onload=()=>{HI.bitmap=H,HI.isSvg=!0,Q()},nI.onload=async()=>{const iI=HI.svgUrl=nI.result;H.src=await zI?`${iI}#svgView(preserveAspectRatio(none))`:iI},H.onerror=nI.onerror=GI});nI.readAsDataURL(SI),await a}else HI.bitmap=await createImageBitmap(SI);HI.refCounter=1}catch(SI){console.error(SI),HI=null}return I(this,B).set(S,HI),HI&&I(this,B).set(HI.id,HI),HI};let L=t;class e{constructor(S=128){_(this,h,[]);_(this,Z,!1);_(this,i);_(this,A,-1);gI(this,i,S)}add({cmd:S,undo:BI,mustExec:HI,type:SI=NaN,overwriteIfSameType:zI=!1,keepUndo:nI=!1}){if(HI&&S(),I(this,Z))return;const H={cmd:S,undo:BI,type:SI};if(I(this,A)===-1){I(this,h).length>0&&(I(this,h).length=0),gI(this,A,0),I(this,h).push(H);return}if(zI&&I(this,h)[I(this,A)].type===SI){nI&&(H.undo=I(this,h)[I(this,A)].undo),I(this,h)[I(this,A)]=H;return}const a=I(this,A)+1;a===I(this,i)?I(this,h).splice(0,1):(gI(this,A,a),a<I(this,h).length&&I(this,h).splice(a)),I(this,h).push(H)}undo(){I(this,A)!==-1&&(gI(this,Z,!0),I(this,h)[I(this,A)].undo(),gI(this,Z,!1),gI(this,A,I(this,A)-1))}redo(){I(this,A)<I(this,h).length-1&&(gI(this,A,I(this,A)+1),gI(this,Z,!0),I(this,h)[I(this,A)].cmd(),gI(this,Z,!1))}hasSomethingToUndo(){return I(this,A)!==-1}hasSomethingToRedo(){return I(this,A)<I(this,h).length-1}destroy(){gI(this,h,null)}}h=new WeakMap,Z=new WeakMap,i=new WeakMap,A=new WeakMap,b.CommandManager=e;class W{constructor(S){_(this,d);this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:BI}=G.FeatureTest.platform;for(const[HI,SI,zI={}]of S)for(const nI of HI){const H=nI.startsWith("mac+");BI&&H?(this.callbacks.set(nI.slice(4),{callback:SI,options:zI}),this.allKeys.add(nI.split("+").at(-1))):!BI&&!H&&(this.callbacks.set(nI,{callback:SI,options:zI}),this.allKeys.add(nI.split("+").at(-1)))}}exec(S,BI){if(!this.allKeys.has(BI.key))return;const HI=this.callbacks.get(O(this,d,hC).call(this,BI));if(!HI)return;const{callback:SI,options:{bubbles:zI=!1,args:nI=[],checker:H=null}}=HI;H&&!H(S,BI)||(SI.bind(S,...nI)(),zI||(BI.stopPropagation(),BI.preventDefault()))}}d=new WeakSet,hC=function(S){S.altKey&&this.buffer.push("alt"),S.ctrlKey&&this.buffer.push("ctrl"),S.metaKey&&this.buffer.push("meta"),S.shiftKey&&this.buffer.push("shift"),this.buffer.push(S.key);const BI=this.buffer.join("+");return this.buffer.length=0,BI},b.KeyboardManager=W;const F=class F{get _colors(){const S=new Map([["CanvasText",null],["Canvas",null]]);return(0,R.getColorValues)(S),(0,G.shadow)(this,"_colors",S)}convert(S){const BI=(0,R.getRGB)(S);if(!window.matchMedia("(forced-colors: active)").matches)return BI;for(const[HI,SI]of this._colors)if(SI.every((zI,nI)=>zI===BI[nI]))return F._colorsMapping.get(HI);return BI}getHexCode(S){const BI=this._colors.get(S);return BI?G.Util.makeHexColor(...BI):S}};fI(F,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]));let z=F;b.ColorManager=z;const OI=class OI{constructor(S,BI,HI,SI,zI,nI){_(this,E);_(this,l,null);_(this,X,new Map);_(this,K,new Map);_(this,lI,null);_(this,j,null);_(this,r,new e);_(this,T,0);_(this,dI,new Set);_(this,M,null);_(this,k,null);_(this,P,new Set);_(this,N,null);_(this,g,new WI);_(this,C,!1);_(this,m,!1);_(this,u,null);_(this,n,G.AnnotationEditorType.NONE);_(this,D,new Set);_(this,x,null);_(this,CI,this.blur.bind(this));_(this,bI,this.focus.bind(this));_(this,sI,this.copy.bind(this));_(this,YI,this.cut.bind(this));_(this,XI,this.paste.bind(this));_(this,aI,this.keydown.bind(this));_(this,f,this.onEditingAction.bind(this));_(this,$,this.onPageChanging.bind(this));_(this,w,this.onScaleChanging.bind(this));_(this,p,this.onRotationChanging.bind(this));_(this,v,{isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1});_(this,q,[0,0]);_(this,mI,null);_(this,NI,null);_(this,hI,null);gI(this,NI,S),gI(this,hI,BI),gI(this,lI,HI),this._eventBus=SI,this._eventBus._on("editingaction",I(this,f)),this._eventBus._on("pagechanging",I(this,$)),this._eventBus._on("scalechanging",I(this,w)),this._eventBus._on("rotationchanging",I(this,p)),gI(this,j,zI.annotationStorage),gI(this,N,zI.filterFactory),gI(this,x,nI),this.viewParameters={realScale:R.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:0}}static get _keyboardManager(){const S=OI.prototype,BI=zI=>{const{activeElement:nI}=document;return nI&&I(zI,NI).contains(nI)&&zI.hasSomethingToControl()},HI=this.TRANSLATE_SMALL,SI=this.TRANSLATE_BIG;return(0,G.shadow)(this,"_keyboardManager",new W([[["ctrl+a","mac+meta+a"],S.selectAll],[["ctrl+z","mac+meta+z"],S.undo],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],S.redo],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],S.delete],[["Escape","mac+Escape"],S.unselectAll],[["ArrowLeft","mac+ArrowLeft"],S.translateSelectedEditors,{args:[-HI,0],checker:BI}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],S.translateSelectedEditors,{args:[-SI,0],checker:BI}],[["ArrowRight","mac+ArrowRight"],S.translateSelectedEditors,{args:[HI,0],checker:BI}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],S.translateSelectedEditors,{args:[SI,0],checker:BI}],[["ArrowUp","mac+ArrowUp"],S.translateSelectedEditors,{args:[0,-HI],checker:BI}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],S.translateSelectedEditors,{args:[0,-SI],checker:BI}],[["ArrowDown","mac+ArrowDown"],S.translateSelectedEditors,{args:[0,HI],checker:BI}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],S.translateSelectedEditors,{args:[0,SI],checker:BI}]]))}destroy(){O(this,E,hg).call(this),O(this,E,Tg).call(this),this._eventBus._off("editingaction",I(this,f)),this._eventBus._off("pagechanging",I(this,$)),this._eventBus._off("scalechanging",I(this,w)),this._eventBus._off("rotationchanging",I(this,p));for(const S of I(this,K).values())S.destroy();I(this,K).clear(),I(this,X).clear(),I(this,P).clear(),gI(this,l,null),I(this,D).clear(),I(this,r).destroy(),I(this,lI).destroy()}get hcmFilter(){return(0,G.shadow)(this,"hcmFilter",I(this,x)?I(this,N).addHCMFilter(I(this,x).foreground,I(this,x).background):"none")}get direction(){return(0,G.shadow)(this,"direction",getComputedStyle(I(this,NI)).direction)}editAltText(S){var BI;(BI=I(this,lI))==null||BI.editAltText(this,S)}onPageChanging({pageNumber:S}){gI(this,T,S-1)}focusMainContainer(){I(this,NI).focus()}findParent(S,BI){for(const HI of I(this,K).values()){const{x:SI,y:zI,width:nI,height:H}=HI.div.getBoundingClientRect();if(S>=SI&&S<=SI+nI&&BI>=zI&&BI<=zI+H)return HI}return null}disableUserSelect(S=!1){I(this,hI).classList.toggle("noUserSelect",S)}addShouldRescale(S){I(this,P).add(S)}removeShouldRescale(S){I(this,P).delete(S)}onScaleChanging({scale:S}){this.commitOrRemove(),this.viewParameters.realScale=S*R.PixelsPerInch.PDF_TO_CSS_UNITS;for(const BI of I(this,P))BI.onScaleChanging()}onRotationChanging({pagesRotation:S}){this.commitOrRemove(),this.viewParameters.rotation=S}addToAnnotationStorage(S){!S.isEmpty()&&I(this,j)&&!I(this,j).has(S.id)&&I(this,j).setValue(S.id,S)}blur(){if(!this.hasSelection)return;const{activeElement:S}=document;for(const BI of I(this,D))if(BI.div.contains(S)){gI(this,u,[BI,S]),BI._focusEventsAllowed=!1;break}}focus(){if(!I(this,u))return;const[S,BI]=I(this,u);gI(this,u,null),BI.addEventListener("focusin",()=>{S._focusEventsAllowed=!0},{once:!0}),BI.focus()}addEditListeners(){O(this,E,Qg).call(this),O(this,E,jg).call(this)}removeEditListeners(){O(this,E,hg).call(this),O(this,E,xg).call(this)}copy(S){var HI;if(S.preventDefault(),(HI=I(this,l))==null||HI.commitOrRemove(),!this.hasSelection)return;const BI=[];for(const SI of I(this,D)){const zI=SI.serialize(!0);zI&&BI.push(zI)}BI.length!==0&&S.clipboardData.setData("application/pdfjs",JSON.stringify(BI))}cut(S){this.copy(S),this.delete()}paste(S){S.preventDefault();const{clipboardData:BI}=S;for(const zI of BI.items)for(const nI of I(this,k))if(nI.isHandlingMimeForPasting(zI.type)){nI.paste(zI,this.currentLayer);return}let HI=BI.getData("application/pdfjs");if(!HI)return;try{HI=JSON.parse(HI)}catch(zI){(0,G.warn)(`paste: "${zI.message}".`);return}if(!Array.isArray(HI))return;this.unselectAll();const SI=this.currentLayer;try{const zI=[];for(const a of HI){const Q=SI.deserialize(a);if(!Q)return;zI.push(Q)}const nI=()=>{for(const a of zI)O(this,E,Og).call(this,a);O(this,E,Ug).call(this,zI)},H=()=>{for(const a of zI)a.remove()};this.addCommands({cmd:nI,undo:H,mustExec:!0})}catch(zI){(0,G.warn)(`paste: "${zI.message}".`)}}keydown(S){var BI;(BI=this.getActive())!=null&&BI.shouldGetKeyboardEvents()||OI._keyboardManager.exec(this,S)}onEditingAction(S){["undo","redo","delete","selectAll"].includes(S.name)&&this[S.name]()}setEditingState(S){S?(O(this,E,aC).call(this),O(this,E,Qg).call(this),O(this,E,jg).call(this),O(this,E,$I).call(this,{isEditing:I(this,n)!==G.AnnotationEditorType.NONE,isEmpty:O(this,E,mg).call(this),hasSomethingToUndo:I(this,r).hasSomethingToUndo(),hasSomethingToRedo:I(this,r).hasSomethingToRedo(),hasSelectedEditor:!1})):(O(this,E,Tg).call(this),O(this,E,hg).call(this),O(this,E,xg).call(this),O(this,E,$I).call(this,{isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(S){if(!I(this,k)){gI(this,k,S);for(const BI of I(this,k))O(this,E,sg).call(this,BI.defaultPropertiesToUpdate)}}getId(){return I(this,g).getId()}get currentLayer(){return I(this,K).get(I(this,T))}getLayer(S){return I(this,K).get(S)}get currentPageIndex(){return I(this,T)}addLayer(S){I(this,K).set(S.pageIndex,S),I(this,C)?S.enable():S.disable()}removeLayer(S){I(this,K).delete(S.pageIndex)}updateMode(S,BI=null){if(I(this,n)!==S){if(gI(this,n,S),S===G.AnnotationEditorType.NONE){this.setEditingState(!1),O(this,E,RC).call(this);return}this.setEditingState(!0),O(this,E,NC).call(this),this.unselectAll();for(const HI of I(this,K).values())HI.updateMode(S);if(BI){for(const HI of I(this,X).values())if(HI.annotationElementId===BI){this.setSelected(HI),HI.enterInEditMode();break}}}}updateToolbar(S){S!==I(this,n)&&this._eventBus.dispatch("switchannotationeditormode",{source:this,mode:S})}updateParams(S,BI){if(I(this,k)){if(S===G.AnnotationEditorParamsType.CREATE){this.currentLayer.addNewEditor(S);return}for(const HI of I(this,D))HI.updateParams(S,BI);for(const HI of I(this,k))HI.updateDefaultParams(S,BI)}}enableWaiting(S=!1){if(I(this,m)!==S){gI(this,m,S);for(const BI of I(this,K).values())S?BI.disableClick():BI.enableClick(),BI.div.classList.toggle("waiting",S)}}getEditors(S){const BI=[];for(const HI of I(this,X).values())HI.pageIndex===S&&BI.push(HI);return BI}getEditor(S){return I(this,X).get(S)}addEditor(S){I(this,X).set(S.id,S)}removeEditor(S){var BI;I(this,X).delete(S.id),this.unselect(S),(!S.annotationElementId||!I(this,dI).has(S.annotationElementId))&&((BI=I(this,j))==null||BI.remove(S.id))}addDeletedAnnotationElement(S){I(this,dI).add(S.annotationElementId),S.deleted=!0}isDeletedAnnotationElement(S){return I(this,dI).has(S)}removeDeletedAnnotationElement(S){I(this,dI).delete(S.annotationElementId),S.deleted=!1}setActiveEditor(S){I(this,l)!==S&&(gI(this,l,S),S&&O(this,E,sg).call(this,S.propertiesToUpdate))}toggleSelected(S){if(I(this,D).has(S)){I(this,D).delete(S),S.unselect(),O(this,E,$I).call(this,{hasSelectedEditor:this.hasSelection});return}I(this,D).add(S),S.select(),O(this,E,sg).call(this,S.propertiesToUpdate),O(this,E,$I).call(this,{hasSelectedEditor:!0})}setSelected(S){for(const BI of I(this,D))BI!==S&&BI.unselect();I(this,D).clear(),I(this,D).add(S),S.select(),O(this,E,sg).call(this,S.propertiesToUpdate),O(this,E,$I).call(this,{hasSelectedEditor:!0})}isSelected(S){return I(this,D).has(S)}unselect(S){S.unselect(),I(this,D).delete(S),O(this,E,$I).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return I(this,D).size!==0}undo(){I(this,r).undo(),O(this,E,$I).call(this,{hasSomethingToUndo:I(this,r).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:O(this,E,mg).call(this)})}redo(){I(this,r).redo(),O(this,E,$I).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:I(this,r).hasSomethingToRedo(),isEmpty:O(this,E,mg).call(this)})}addCommands(S){I(this,r).add(S),O(this,E,$I).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:O(this,E,mg).call(this)})}delete(){if(this.commitOrRemove(),!this.hasSelection)return;const S=[...I(this,D)],BI=()=>{for(const SI of S)SI.remove()},HI=()=>{for(const SI of S)O(this,E,Og).call(this,SI)};this.addCommands({cmd:BI,undo:HI,mustExec:!0})}commitOrRemove(){var S;(S=I(this,l))==null||S.commitOrRemove()}hasSomethingToControl(){return I(this,l)||this.hasSelection}selectAll(){for(const S of I(this,D))S.commit();O(this,E,Ug).call(this,I(this,X).values())}unselectAll(){if(I(this,l)){I(this,l).commitOrRemove();return}if(this.hasSelection){for(const S of I(this,D))S.unselect();I(this,D).clear(),O(this,E,$I).call(this,{hasSelectedEditor:!1})}}translateSelectedEditors(S,BI,HI=!1){if(HI||this.commitOrRemove(),!this.hasSelection)return;I(this,q)[0]+=S,I(this,q)[1]+=BI;const[SI,zI]=I(this,q),nI=[...I(this,D)],H=1e3;I(this,mI)&&clearTimeout(I(this,mI)),gI(this,mI,setTimeout(()=>{gI(this,mI,null),I(this,q)[0]=I(this,q)[1]=0,this.addCommands({cmd:()=>{for(const a of nI)I(this,X).has(a.id)&&a.translateInPage(SI,zI)},undo:()=>{for(const a of nI)I(this,X).has(a.id)&&a.translateInPage(-SI,-zI)},mustExec:!1})},H));for(const a of nI)a.translateInPage(S,BI)}setUpDragSession(){if(this.hasSelection){this.disableUserSelect(!0),gI(this,M,new Map);for(const S of I(this,D))I(this,M).set(S,{savedX:S.x,savedY:S.y,savedPageIndex:S.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!I(this,M))return!1;this.disableUserSelect(!1);const S=I(this,M);gI(this,M,null);let BI=!1;for(const[{x:SI,y:zI,pageIndex:nI},H]of S)H.newX=SI,H.newY=zI,H.newPageIndex=nI,BI||(BI=SI!==H.savedX||zI!==H.savedY||nI!==H.savedPageIndex);if(!BI)return!1;const HI=(SI,zI,nI,H)=>{if(I(this,X).has(SI.id)){const a=I(this,K).get(H);a?SI._setParentAndPosition(a,zI,nI):(SI.pageIndex=H,SI.x=zI,SI.y=nI)}};return this.addCommands({cmd:()=>{for(const[SI,{newX:zI,newY:nI,newPageIndex:H}]of S)HI(SI,zI,nI,H)},undo:()=>{for(const[SI,{savedX:zI,savedY:nI,savedPageIndex:H}]of S)HI(SI,zI,nI,H)},mustExec:!0}),!0}dragSelectedEditors(S,BI){if(I(this,M))for(const HI of I(this,M).keys())HI.drag(S,BI)}rebuild(S){if(S.parent===null){const BI=this.getLayer(S.pageIndex);BI?(BI.changeParent(S),BI.addOrRebuild(S)):(this.addEditor(S),this.addToAnnotationStorage(S),S.rebuild())}else S.parent.addOrRebuild(S)}isActive(S){return I(this,l)===S}getActive(){return I(this,l)}getMode(){return I(this,n)}get imageManager(){return(0,G.shadow)(this,"imageManager",new L)}};l=new WeakMap,X=new WeakMap,K=new WeakMap,lI=new WeakMap,j=new WeakMap,r=new WeakMap,T=new WeakMap,dI=new WeakMap,M=new WeakMap,k=new WeakMap,P=new WeakMap,N=new WeakMap,g=new WeakMap,C=new WeakMap,m=new WeakMap,u=new WeakMap,n=new WeakMap,D=new WeakMap,x=new WeakMap,CI=new WeakMap,bI=new WeakMap,sI=new WeakMap,YI=new WeakMap,XI=new WeakMap,aI=new WeakMap,f=new WeakMap,$=new WeakMap,w=new WeakMap,p=new WeakMap,v=new WeakMap,q=new WeakMap,mI=new WeakMap,NI=new WeakMap,hI=new WeakMap,E=new WeakSet,aC=function(){window.addEventListener("focus",I(this,bI)),window.addEventListener("blur",I(this,CI))},Tg=function(){window.removeEventListener("focus",I(this,bI)),window.removeEventListener("blur",I(this,CI))},Qg=function(){window.addEventListener("keydown",I(this,aI),{capture:!0})},hg=function(){window.removeEventListener("keydown",I(this,aI),{capture:!0})},jg=function(){document.addEventListener("copy",I(this,sI)),document.addEventListener("cut",I(this,YI)),document.addEventListener("paste",I(this,XI))},xg=function(){document.removeEventListener("copy",I(this,sI)),document.removeEventListener("cut",I(this,YI)),document.removeEventListener("paste",I(this,XI))},$I=function(S){Object.entries(S).some(([HI,SI])=>I(this,v)[HI]!==SI)&&this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(I(this,v),S)})},sg=function(S){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:S})},NC=function(){if(!I(this,C)){gI(this,C,!0);for(const S of I(this,K).values())S.enable()}},RC=function(){if(this.unselectAll(),I(this,C)){gI(this,C,!1);for(const S of I(this,K).values())S.disable()}},Og=function(S){const BI=I(this,K).get(S.pageIndex);BI?BI.addOrRebuild(S):this.addEditor(S)},mg=function(){if(I(this,X).size===0)return!0;if(I(this,X).size===1)for(const S of I(this,X).values())return S.isEmpty();return!1},Ug=function(S){I(this,D).clear();for(const BI of S)BI.isEmpty()||(I(this,D).add(BI),BI.select());O(this,E,$I).call(this,{hasSelectedEditor:!0})},fI(OI,"TRANSLATE_SMALL",1),fI(OI,"TRANSLATE_BIG",10);let J=OI;b.AnnotationEditorUIManager=J},(wI,b,ZI)=>{var T,dI,M,k,P,N,g,C,m,u,n,D,dg,Gg,vg,ag,Ng,Wg,Bg;Object.defineProperty(b,"__esModule",{value:!0}),b.StatTimer=b.RenderingCancelledException=b.PixelsPerInch=b.PageViewport=b.PDFDateString=b.DOMStandardFontDataFactory=b.DOMSVGFactory=b.DOMFilterFactory=b.DOMCanvasFactory=b.DOMCMapReaderFactory=void 0,b.deprecated=A,b.getColorValues=X,b.getCurrentTransform=K,b.getCurrentTransformInverse=lI,b.getFilenameFromUrl=s,b.getPdfFilenameFromUrl=Y,b.getRGB=l,b.getXfaPageViewport=F,b.isDataScheme=y,b.isPdfFile=B,b.isValidFetchUrl=h,b.loadScript=i,b.noContextMenu=Z,b.setLayerDimensions=j;var G=ZI(7),R=ZI(1);const cI="http://www.w3.org/2000/svg",r=class r{};fI(r,"CSS",96),fI(r,"PDF",72),fI(r,"PDF_TO_CSS_UNITS",r.CSS/r.PDF);let U=r;b.PixelsPerInch=U;class WI extends G.BaseFilterFactory{constructor({docId:w,ownerDocument:p=globalThis.document}={}){super();_(this,D);_(this,T);_(this,dI);_(this,M);_(this,k);_(this,P);_(this,N);_(this,g);_(this,C);_(this,m);_(this,u);_(this,n,0);gI(this,M,w),gI(this,k,p)}addFilter(w){if(!w)return"none";let p=I(this,D,dg).get(w);if(p)return p;let v,q,mI,NI;if(w.length===1){const yI=w[0],TI=new Array(256);for(let LI=0;LI<256;LI++)TI[LI]=yI[LI]/255;NI=v=q=mI=TI.join(",")}else{const[yI,TI,LI]=w,UI=new Array(256),eI=new Array(256),JI=new Array(256);for(let vI=0;vI<256;vI++)UI[vI]=yI[vI]/255,eI[vI]=TI[vI]/255,JI[vI]=LI[vI]/255;v=UI.join(","),q=eI.join(","),mI=JI.join(","),NI=`${v}${q}${mI}`}if(p=I(this,D,dg).get(NI),p)return I(this,D,dg).set(w,p),p;const hI=`g_${I(this,M)}_transfer_map_${bg(this,n)._++}`,E=`url(#${hI})`;I(this,D,dg).set(w,E),I(this,D,dg).set(NI,E);const MI=O(this,D,ag).call(this,hI);return O(this,D,Wg).call(this,v,q,mI,MI),E}addHCMFilter(w,p){var TI;const v=`${w}-${p}`;if(I(this,N)===v)return I(this,g);if(gI(this,N,v),gI(this,g,"none"),(TI=I(this,P))==null||TI.remove(),!w||!p)return I(this,g);const q=O(this,D,Bg).call(this,w);w=R.Util.makeHexColor(...q);const mI=O(this,D,Bg).call(this,p);if(p=R.Util.makeHexColor(...mI),I(this,D,Gg).style.color="",w==="#000000"&&p==="#ffffff"||w===p)return I(this,g);const NI=new Array(256);for(let LI=0;LI<=255;LI++){const UI=LI/255;NI[LI]=UI<=.03928?UI/12.92:((UI+.055)/1.055)**2.4}const hI=NI.join(","),E=`g_${I(this,M)}_hcm_filter`,MI=gI(this,C,O(this,D,ag).call(this,E));O(this,D,Wg).call(this,hI,hI,hI,MI),O(this,D,vg).call(this,MI);const yI=(LI,UI)=>{const eI=q[LI]/255,JI=mI[LI]/255,vI=new Array(UI+1);for(let rI=0;rI<=UI;rI++)vI[rI]=eI+rI/UI*(JI-eI);return vI.join(",")};return O(this,D,Wg).call(this,yI(0,5),yI(1,5),yI(2,5),MI),gI(this,g,`url(#${E})`),I(this,g)}addHighlightHCMFilter(w,p,v,q){var JI;const mI=`${w}-${p}-${v}-${q}`;if(I(this,m)===mI)return I(this,u);if(gI(this,m,mI),gI(this,u,"none"),(JI=I(this,C))==null||JI.remove(),!w||!p)return I(this,u);const[NI,hI]=[w,p].map(O(this,D,Bg).bind(this));let E=Math.round(.2126*NI[0]+.7152*NI[1]+.0722*NI[2]),MI=Math.round(.2126*hI[0]+.7152*hI[1]+.0722*hI[2]),[yI,TI]=[v,q].map(O(this,D,Bg).bind(this));MI<E&&([E,MI,yI,TI]=[MI,E,TI,yI]),I(this,D,Gg).style.color="";const LI=(vI,rI,VI)=>{const II=new Array(256),AI=(MI-E)/VI,DI=vI/255,OI=(rI-vI)/(255*VI);let xI=0;for(let S=0;S<=VI;S++){const BI=Math.round(E+S*AI),HI=DI+S*OI;for(let SI=xI;SI<=BI;SI++)II[SI]=HI;xI=BI+1}for(let S=xI;S<256;S++)II[S]=II[xI-1];return II.join(",")},UI=`g_${I(this,M)}_hcm_highlight_filter`,eI=gI(this,C,O(this,D,ag).call(this,UI));return O(this,D,vg).call(this,eI),O(this,D,Wg).call(this,LI(yI[0],TI[0],5),LI(yI[1],TI[1],5),LI(yI[2],TI[2],5),eI),gI(this,u,`url(#${UI})`),I(this,u)}destroy(w=!1){w&&(I(this,g)||I(this,u))||(I(this,dI)&&(I(this,dI).parentNode.parentNode.remove(),gI(this,dI,null)),I(this,T)&&(I(this,T).clear(),gI(this,T,null)),gI(this,n,0))}}T=new WeakMap,dI=new WeakMap,M=new WeakMap,k=new WeakMap,P=new WeakMap,N=new WeakMap,g=new WeakMap,C=new WeakMap,m=new WeakMap,u=new WeakMap,n=new WeakMap,D=new WeakSet,dg=function(){return I(this,T)||gI(this,T,new Map)},Gg=function(){if(!I(this,dI)){const w=I(this,k).createElement("div"),{style:p}=w;p.visibility="hidden",p.contain="strict",p.width=p.height=0,p.position="absolute",p.top=p.left=0,p.zIndex=-1;const v=I(this,k).createElementNS(cI,"svg");v.setAttribute("width",0),v.setAttribute("height",0),gI(this,dI,I(this,k).createElementNS(cI,"defs")),w.append(v),v.append(I(this,dI)),I(this,k).body.append(w)}return I(this,dI)},vg=function(w){const p=I(this,k).createElementNS(cI,"feColorMatrix");p.setAttribute("type","matrix"),p.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),w.append(p)},ag=function(w){const p=I(this,k).createElementNS(cI,"filter");return p.setAttribute("color-interpolation-filters","sRGB"),p.setAttribute("id",w),I(this,D,Gg).append(p),p},Ng=function(w,p,v){const q=I(this,k).createElementNS(cI,p);q.setAttribute("type","discrete"),q.setAttribute("tableValues",v),w.append(q)},Wg=function(w,p,v,q){const mI=I(this,k).createElementNS(cI,"feComponentTransfer");q.append(mI),O(this,D,Ng).call(this,mI,"feFuncR",w),O(this,D,Ng).call(this,mI,"feFuncG",p),O(this,D,Ng).call(this,mI,"feFuncB",v)},Bg=function(w){return I(this,D,Gg).style.color=w,l(getComputedStyle(I(this,D,Gg)).getPropertyValue("color"))},b.DOMFilterFactory=WI;class L extends G.BaseCanvasFactory{constructor({ownerDocument:$=globalThis.document}={}){super(),this._document=$}_createCanvas($,w){const p=this._document.createElement("canvas");return p.width=$,p.height=w,p}}b.DOMCanvasFactory=L;async function e(f,$=!1){if(h(f,document.baseURI)){const w=await fetch(f);if(!w.ok)throw new Error(w.statusText);return $?new Uint8Array(await w.arrayBuffer()):(0,R.stringToBytes)(await w.text())}return new Promise((w,p)=>{const v=new XMLHttpRequest;v.open("GET",f,!0),$&&(v.responseType="arraybuffer"),v.onreadystatechange=()=>{if(v.readyState===XMLHttpRequest.DONE){if(v.status===200||v.status===0){let q;if($&&v.response?q=new Uint8Array(v.response):!$&&v.responseText&&(q=(0,R.stringToBytes)(v.responseText)),q){w(q);return}}p(new Error(v.statusText))}},v.send(null)})}class W extends G.BaseCMapReaderFactory{_fetchData($,w){return e($,this.isCompressed).then(p=>({cMapData:p,compressionType:w}))}}b.DOMCMapReaderFactory=W;class z extends G.BaseStandardFontDataFactory{_fetchData($){return e($,!0)}}b.DOMStandardFontDataFactory=z;class J extends G.BaseSVGFactory{_createSVG($){return document.createElementNS(cI,$)}}b.DOMSVGFactory=J;class V{constructor({viewBox:$,scale:w,rotation:p,offsetX:v=0,offsetY:q=0,dontFlip:mI=!1}){this.viewBox=$,this.scale=w,this.rotation=p,this.offsetX=v,this.offsetY=q;const NI=($[2]+$[0])/2,hI=($[3]+$[1])/2;let E,MI,yI,TI;switch(p%=360,p<0&&(p+=360),p){case 180:E=-1,MI=0,yI=0,TI=1;break;case 90:E=0,MI=1,yI=1,TI=0;break;case 270:E=0,MI=-1,yI=-1,TI=0;break;case 0:E=1,MI=0,yI=0,TI=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}mI&&(yI=-yI,TI=-TI);let LI,UI,eI,JI;E===0?(LI=Math.abs(hI-$[1])*w+v,UI=Math.abs(NI-$[0])*w+q,eI=($[3]-$[1])*w,JI=($[2]-$[0])*w):(LI=Math.abs(NI-$[0])*w+v,UI=Math.abs(hI-$[1])*w+q,eI=($[2]-$[0])*w,JI=($[3]-$[1])*w),this.transform=[E*w,MI*w,yI*w,TI*w,LI-E*w*NI-yI*w*hI,UI-MI*w*NI-TI*w*hI],this.width=eI,this.height=JI}get rawDims(){const{viewBox:$}=this;return(0,R.shadow)(this,"rawDims",{pageWidth:$[2]-$[0],pageHeight:$[3]-$[1],pageX:$[0],pageY:$[1]})}clone({scale:$=this.scale,rotation:w=this.rotation,offsetX:p=this.offsetX,offsetY:v=this.offsetY,dontFlip:q=!1}={}){return new V({viewBox:this.viewBox.slice(),scale:$,rotation:w,offsetX:p,offsetY:v,dontFlip:q})}convertToViewportPoint($,w){return R.Util.applyTransform([$,w],this.transform)}convertToViewportRectangle($){const w=R.Util.applyTransform([$[0],$[1]],this.transform),p=R.Util.applyTransform([$[2],$[3]],this.transform);return[w[0],w[1],p[0],p[1]]}convertToPdfPoint($,w){return R.Util.applyInverseTransform([$,w],this.transform)}}b.PageViewport=V;class o extends R.BaseException{constructor($,w=0){super($,"RenderingCancelledException"),this.extraDelay=w}}b.RenderingCancelledException=o;function y(f){const $=f.length;let w=0;for(;w<$&&f[w].trim()==="";)w++;return f.substring(w,w+5).toLowerCase()==="data:"}function B(f){return typeof f=="string"&&/\.pdf$/i.test(f)}function s(f,$=!1){return $||([f]=f.split(/[#?]/,1)),f.substring(f.lastIndexOf("/")+1)}function Y(f,$="document.pdf"){if(typeof f!="string")return $;if(y(f))return(0,R.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),$;const w=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,p=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,v=w.exec(f);let q=p.exec(v[1])||p.exec(v[2])||p.exec(v[3]);if(q&&(q=q[0],q.includes("%")))try{q=p.exec(decodeURIComponent(q))[0]}catch{}return q||$}class t{constructor(){fI(this,"started",Object.create(null));fI(this,"times",[])}time($){$ in this.started&&(0,R.warn)(`Timer is already running for ${$}`),this.started[$]=Date.now()}timeEnd($){$ in this.started||(0,R.warn)(`Timer has not been started for ${$}`),this.times.push({name:$,start:this.started[$],end:Date.now()}),delete this.started[$]}toString(){const $=[];let w=0;for(const{name:p}of this.times)w=Math.max(p.length,w);for(const{name:p,start:v,end:q}of this.times)$.push(`${p.padEnd(w)} ${q-v}ms
`);return $.join("")}}b.StatTimer=t;function h(f,$){try{const{protocol:w}=$?new URL(f,$):new URL(f);return w==="http:"||w==="https:"}catch{return!1}}function Z(f){f.preventDefault()}function i(f,$=!1){return new Promise((w,p)=>{const v=document.createElement("script");v.src=f,v.onload=function(q){$&&v.remove(),w(q)},v.onerror=function(){p(new Error(`Cannot load script at: ${v.src}`))},(document.head||document.documentElement).append(v)})}function A(f){console.log("Deprecated API usage: "+f)}let d;class c{static toDateObject($){if(!$||typeof $!="string")return null;d||(d=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const w=d.exec($);if(!w)return null;const p=parseInt(w[1],10);let v=parseInt(w[2],10);v=v>=1&&v<=12?v-1:0;let q=parseInt(w[3],10);q=q>=1&&q<=31?q:1;let mI=parseInt(w[4],10);mI=mI>=0&&mI<=23?mI:0;let NI=parseInt(w[5],10);NI=NI>=0&&NI<=59?NI:0;let hI=parseInt(w[6],10);hI=hI>=0&&hI<=59?hI:0;const E=w[7]||"Z";let MI=parseInt(w[8],10);MI=MI>=0&&MI<=23?MI:0;let yI=parseInt(w[9],10)||0;return yI=yI>=0&&yI<=59?yI:0,E==="-"?(mI+=MI,NI+=yI):E==="+"&&(mI-=MI,NI-=yI),new Date(Date.UTC(p,v,q,mI,NI,hI))}}b.PDFDateString=c;function F(f,{scale:$=1,rotation:w=0}){const{width:p,height:v}=f.attributes.style,q=[0,0,parseInt(p),parseInt(v)];return new V({viewBox:q,scale:$,rotation:w})}function l(f){if(f.startsWith("#")){const $=parseInt(f.slice(1),16);return[($&16711680)>>16,($&65280)>>8,$&255]}return f.startsWith("rgb(")?f.slice(4,-1).split(",").map($=>parseInt($)):f.startsWith("rgba(")?f.slice(5,-1).split(",").map($=>parseInt($)).slice(0,3):((0,R.warn)(`Not a valid color format: "${f}"`),[0,0,0])}function X(f){const $=document.createElement("span");$.style.visibility="hidden",document.body.append($);for(const w of f.keys()){$.style.color=w;const p=window.getComputedStyle($).color;f.set(w,l(p))}$.remove()}function K(f){const{a:$,b:w,c:p,d:v,e:q,f:mI}=f.getTransform();return[$,w,p,v,q,mI]}function lI(f){const{a:$,b:w,c:p,d:v,e:q,f:mI}=f.getTransform().invertSelf();return[$,w,p,v,q,mI]}function j(f,$,w=!1,p=!0){if($ instanceof V){const{pageWidth:v,pageHeight:q}=$.rawDims,{style:mI}=f,NI=R.FeatureTest.isCSSRoundSupported,hI=`var(--scale-factor) * ${v}px`,E=`var(--scale-factor) * ${q}px`,MI=NI?`round(${hI}, 1px)`:`calc(${hI})`,yI=NI?`round(${E}, 1px)`:`calc(${E})`;!w||$.rotation%180===0?(mI.width=MI,mI.height=yI):(mI.width=yI,mI.height=MI)}p&&f.setAttribute("data-main-rotation",$.rotation)}},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.BaseStandardFontDataFactory=b.BaseSVGFactory=b.BaseFilterFactory=b.BaseCanvasFactory=b.BaseCMapReaderFactory=void 0;var G=ZI(1);class R{constructor(){this.constructor===R&&(0,G.unreachable)("Cannot initialize BaseFilterFactory.")}addFilter(W){return"none"}addHCMFilter(W,z){return"none"}addHighlightHCMFilter(W,z,J,V){return"none"}destroy(W=!1){}}b.BaseFilterFactory=R;class cI{constructor(){this.constructor===cI&&(0,G.unreachable)("Cannot initialize BaseCanvasFactory.")}create(W,z){if(W<=0||z<=0)throw new Error("Invalid canvas size");const J=this._createCanvas(W,z);return{canvas:J,context:J.getContext("2d")}}reset(W,z,J){if(!W.canvas)throw new Error("Canvas is not specified");if(z<=0||J<=0)throw new Error("Invalid canvas size");W.canvas.width=z,W.canvas.height=J}destroy(W){if(!W.canvas)throw new Error("Canvas is not specified");W.canvas.width=0,W.canvas.height=0,W.canvas=null,W.context=null}_createCanvas(W,z){(0,G.unreachable)("Abstract method `_createCanvas` called.")}}b.BaseCanvasFactory=cI;class U{constructor({baseUrl:W=null,isCompressed:z=!0}){this.constructor===U&&(0,G.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=W,this.isCompressed=z}async fetch({name:W}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!W)throw new Error("CMap name must be specified.");const z=this.baseUrl+W+(this.isCompressed?".bcmap":""),J=this.isCompressed?G.CMapCompressionType.BINARY:G.CMapCompressionType.NONE;return this._fetchData(z,J).catch(V=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${z}`)})}_fetchData(W,z){(0,G.unreachable)("Abstract method `_fetchData` called.")}}b.BaseCMapReaderFactory=U;class WI{constructor({baseUrl:W=null}){this.constructor===WI&&(0,G.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=W}async fetch({filename:W}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!W)throw new Error("Font filename must be specified.");const z=`${this.baseUrl}${W}`;return this._fetchData(z).catch(J=>{throw new Error(`Unable to load font data at: ${z}`)})}_fetchData(W){(0,G.unreachable)("Abstract method `_fetchData` called.")}}b.BaseStandardFontDataFactory=WI;class L{constructor(){this.constructor===L&&(0,G.unreachable)("Cannot initialize BaseSVGFactory.")}create(W,z,J=!1){if(W<=0||z<=0)throw new Error("Invalid SVG dimensions");const V=this._createSVG("svg:svg");return V.setAttribute("version","1.1"),J||(V.setAttribute("width",`${W}px`),V.setAttribute("height",`${z}px`)),V.setAttribute("preserveAspectRatio","none"),V.setAttribute("viewBox",`0 0 ${W} ${z}`),V}createElement(W){if(typeof W!="string")throw new Error("Invalid SVG element type");return this._createSVG(W)}_createSVG(W){(0,G.unreachable)("Abstract method `_createSVG` called.")}}b.BaseSVGFactory=L},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.MurmurHash3_64=void 0;var G=ZI(1);const R=3285377520,cI=4294901760,U=65535;class WI{constructor(e){this.h1=e?e&4294967295:R,this.h2=e?e&4294967295:R}update(e){let W,z;if(typeof e=="string"){W=new Uint8Array(e.length*2),z=0;for(let A=0,d=e.length;A<d;A++){const c=e.charCodeAt(A);c<=255?W[z++]=c:(W[z++]=c>>>8,W[z++]=c&255)}}else if((0,G.isArrayBuffer)(e))W=e.slice(),z=W.byteLength;else throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");const J=z>>2,V=z-J*4,o=new Uint32Array(W.buffer,0,J);let y=0,B=0,s=this.h1,Y=this.h2;const t=3432918353,h=461845907,Z=t&U,i=h&U;for(let A=0;A<J;A++)A&1?(y=o[A],y=y*t&cI|y*Z&U,y=y<<15|y>>>17,y=y*h&cI|y*i&U,s^=y,s=s<<13|s>>>19,s=s*5+3864292196):(B=o[A],B=B*t&cI|B*Z&U,B=B<<15|B>>>17,B=B*h&cI|B*i&U,Y^=B,Y=Y<<13|Y>>>19,Y=Y*5+3864292196);switch(y=0,V){case 3:y^=W[J*4+2]<<16;case 2:y^=W[J*4+1]<<8;case 1:y^=W[J*4],y=y*t&cI|y*Z&U,y=y<<15|y>>>17,y=y*h&cI|y*i&U,J&1?s^=y:Y^=y}this.h1=s,this.h2=Y}hexdigest(){let e=this.h1,W=this.h2;return e^=W>>>1,e=e*3981806797&cI|e*36045&U,W=W*4283543511&cI|((W<<16|e>>>16)*2950163797&cI)>>>16,e^=W>>>1,e=e*444984403&cI|e*60499&U,W=W*3301882366&cI|((W<<16|e>>>16)*3120437893&cI)>>>16,e^=W>>>1,(e>>>0).toString(16).padStart(8,"0")+(W>>>0).toString(16).padStart(8,"0")}}b.MurmurHash3_64=WI},(wI,b,ZI)=>{var U;Object.defineProperty(b,"__esModule",{value:!0}),b.FontLoader=b.FontFaceObject=void 0;var G=ZI(1);class R{constructor({ownerDocument:L=globalThis.document,styleElement:e=null}){_(this,U,new Set);this._document=L,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(L){this.nativeFontFaces.add(L),this._document.fonts.add(L)}removeNativeFontFace(L){this.nativeFontFaces.delete(L),this._document.fonts.delete(L)}insertRule(L){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const e=this.styleElement.sheet;e.insertRule(L,e.cssRules.length)}clear(){for(const L of this.nativeFontFaces)this._document.fonts.delete(L);this.nativeFontFaces.clear(),I(this,U).clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont(L){if(!(!L||I(this,U).has(L.loadedName))){if((0,G.assert)(!this.disableFontFace,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:e,src:W,style:z}=L,J=new FontFace(e,W,z);this.addNativeFontFace(J);try{await J.load(),I(this,U).add(e)}catch{(0,G.warn)(`Cannot load system font: ${L.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(J)}return}(0,G.unreachable)("Not implemented: loadSystemFont without the Font Loading API.")}}async bind(L){if(L.attached||L.missingFile&&!L.systemFontInfo)return;if(L.attached=!0,L.systemFontInfo){await this.loadSystemFont(L.systemFontInfo);return}if(this.isFontLoadingAPISupported){const W=L.createNativeFontFace();if(W){this.addNativeFontFace(W);try{await W.loaded}catch(z){throw(0,G.warn)(`Failed to load font '${W.family}': '${z}'.`),L.disableFontFace=!0,z}}return}const e=L.createFontFaceRule();if(e){if(this.insertRule(e),this.isSyncFontLoadingSupported)return;await new Promise(W=>{const z=this._queueLoadingCallback(W);this._prepareFontLoadEvent(L,z)})}}get isFontLoadingAPISupported(){var e;const L=!!((e=this._document)!=null&&e.fonts);return(0,G.shadow)(this,"isFontLoadingAPISupported",L)}get isSyncFontLoadingSupported(){let L=!1;return(G.isNodeJS||typeof navigator<"u"&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(L=!0),(0,G.shadow)(this,"isSyncFontLoadingSupported",L)}_queueLoadingCallback(L){function e(){for((0,G.assert)(!z.done,"completeRequest() cannot be called twice."),z.done=!0;W.length>0&&W[0].done;){const J=W.shift();setTimeout(J.callback,0)}}const{loadingRequests:W}=this,z={done:!1,complete:e,callback:L};return W.push(z),z}get _loadTestFont(){const L=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return(0,G.shadow)(this,"_loadTestFont",L)}_prepareFontLoadEvent(L,e){function W(l,X){return l.charCodeAt(X)<<24|l.charCodeAt(X+1)<<16|l.charCodeAt(X+2)<<8|l.charCodeAt(X+3)&255}function z(l,X,K,lI){const j=l.substring(0,X),r=l.substring(X+K);return j+lI+r}let J,V;const o=this._document.createElement("canvas");o.width=1,o.height=1;const y=o.getContext("2d");let B=0;function s(l,X){if(++B>30){(0,G.warn)("Load test font never loaded."),X();return}if(y.font="30px "+l,y.fillText(".",0,20),y.getImageData(0,0,1,1).data[3]>0){X();return}setTimeout(s.bind(null,l,X))}const Y=`lt${Date.now()}${this.loadTestFontId++}`;let t=this._loadTestFont;t=z(t,976,Y.length,Y);const Z=16,i=1482184792;let A=W(t,Z);for(J=0,V=Y.length-3;J<V;J+=4)A=A-i+W(Y,J)|0;J<Y.length&&(A=A-i+W(Y+"XXX",J)|0),t=z(t,Z,4,(0,G.string32)(A));const d=`url(data:font/opentype;base64,${btoa(t)});`,c=`@font-face {font-family:"${Y}";src:${d}}`;this.insertRule(c);const F=this._document.createElement("div");F.style.visibility="hidden",F.style.width=F.style.height="10px",F.style.position="absolute",F.style.top=F.style.left="0px";for(const l of[L.loadedName,Y]){const X=this._document.createElement("span");X.textContent="Hi",X.style.fontFamily=l,F.append(X)}this._document.body.append(F),s(Y,()=>{F.remove(),e.complete()})}}U=new WeakMap,b.FontLoader=R;class cI{constructor(L,{isEvalSupported:e=!0,disableFontFace:W=!1,ignoreErrors:z=!1,inspectFont:J=null}){this.compiledGlyphs=Object.create(null);for(const V in L)this[V]=L[V];this.isEvalSupported=e!==!1,this.disableFontFace=W===!0,this.ignoreErrors=z===!0,this._inspectFont=J}createNativeFontFace(){var e;if(!this.data||this.disableFontFace)return null;let L;if(!this.cssFontInfo)L=new FontFace(this.loadedName,this.data,{});else{const W={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(W.style=`oblique ${this.cssFontInfo.italicAngle}deg`),L=new FontFace(this.cssFontInfo.fontFamily,this.data,W)}return(e=this._inspectFont)==null||e.call(this,this),L}createFontFaceRule(){var z;if(!this.data||this.disableFontFace)return null;const L=(0,G.bytesToString)(this.data),e=`url(data:${this.mimetype};base64,${btoa(L)});`;let W;if(!this.cssFontInfo)W=`@font-face {font-family:"${this.loadedName}";src:${e}}`;else{let J=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(J+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),W=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${J}src:${e}}`}return(z=this._inspectFont)==null||z.call(this,this,e),W}getPathGenerator(L,e){if(this.compiledGlyphs[e]!==void 0)return this.compiledGlyphs[e];let W;try{W=L.get(this.loadedName+"_path_"+e)}catch(z){if(!this.ignoreErrors)throw z;return(0,G.warn)(`getPathGenerator - ignoring character: "${z}".`),this.compiledGlyphs[e]=function(J,V){}}if(this.isEvalSupported&&G.FeatureTest.isEvalSupported){const z=[];for(const J of W){const V=J.args!==void 0?J.args.join(","):"";z.push("c.",J.cmd,"(",V,`);
`)}return this.compiledGlyphs[e]=new Function("c","size",z.join(""))}return this.compiledGlyphs[e]=function(z,J){for(const V of W)V.cmd==="scale"&&(V.args=[J,-J]),z[V.cmd].apply(z,V.args)}}}b.FontFaceObject=cI},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.NodeStandardFontDataFactory=b.NodeFilterFactory=b.NodeCanvasFactory=b.NodeCMapReaderFactory=void 0;var G=ZI(7);ZI(1);const R=function(e){return new Promise((W,z)=>{require$$5.readFile(e,(V,o)=>{if(V||!o){z(new Error(V));return}W(new Uint8Array(o))})})};class cI extends G.BaseFilterFactory{}b.NodeFilterFactory=cI;class U extends G.BaseCanvasFactory{_createCanvas(W,z){return require$$5.createCanvas(W,z)}}b.NodeCanvasFactory=U;class WI extends G.BaseCMapReaderFactory{_fetchData(W,z){return R(W).then(J=>({cMapData:J,compressionType:z}))}}b.NodeCMapReaderFactory=WI;class L extends G.BaseStandardFontDataFactory{_fetchData(W){return R(W)}}b.NodeStandardFontDataFactory=L},(wI,b,ZI)=>{var dI,Eg,rg;Object.defineProperty(b,"__esModule",{value:!0}),b.CanvasGraphics=void 0;var G=ZI(1),R=ZI(6),cI=ZI(12),U=ZI(13);const WI=16,L=100,e=4096,W=15,z=10,J=1e3,V=16;function o(N,g){if(N._removeMirroring)throw new Error("Context is already forwarding operations.");N.__originalSave=N.save,N.__originalRestore=N.restore,N.__originalRotate=N.rotate,N.__originalScale=N.scale,N.__originalTranslate=N.translate,N.__originalTransform=N.transform,N.__originalSetTransform=N.setTransform,N.__originalResetTransform=N.resetTransform,N.__originalClip=N.clip,N.__originalMoveTo=N.moveTo,N.__originalLineTo=N.lineTo,N.__originalBezierCurveTo=N.bezierCurveTo,N.__originalRect=N.rect,N.__originalClosePath=N.closePath,N.__originalBeginPath=N.beginPath,N._removeMirroring=()=>{N.save=N.__originalSave,N.restore=N.__originalRestore,N.rotate=N.__originalRotate,N.scale=N.__originalScale,N.translate=N.__originalTranslate,N.transform=N.__originalTransform,N.setTransform=N.__originalSetTransform,N.resetTransform=N.__originalResetTransform,N.clip=N.__originalClip,N.moveTo=N.__originalMoveTo,N.lineTo=N.__originalLineTo,N.bezierCurveTo=N.__originalBezierCurveTo,N.rect=N.__originalRect,N.closePath=N.__originalClosePath,N.beginPath=N.__originalBeginPath,delete N._removeMirroring},N.save=function(){g.save(),this.__originalSave()},N.restore=function(){g.restore(),this.__originalRestore()},N.translate=function(m,u){g.translate(m,u),this.__originalTranslate(m,u)},N.scale=function(m,u){g.scale(m,u),this.__originalScale(m,u)},N.transform=function(m,u,n,D,x,CI){g.transform(m,u,n,D,x,CI),this.__originalTransform(m,u,n,D,x,CI)},N.setTransform=function(m,u,n,D,x,CI){g.setTransform(m,u,n,D,x,CI),this.__originalSetTransform(m,u,n,D,x,CI)},N.resetTransform=function(){g.resetTransform(),this.__originalResetTransform()},N.rotate=function(m){g.rotate(m),this.__originalRotate(m)},N.clip=function(m){g.clip(m),this.__originalClip(m)},N.moveTo=function(C,m){g.moveTo(C,m),this.__originalMoveTo(C,m)},N.lineTo=function(C,m){g.lineTo(C,m),this.__originalLineTo(C,m)},N.bezierCurveTo=function(C,m,u,n,D,x){g.bezierCurveTo(C,m,u,n,D,x),this.__originalBezierCurveTo(C,m,u,n,D,x)},N.rect=function(C,m,u,n){g.rect(C,m,u,n),this.__originalRect(C,m,u,n)},N.closePath=function(){g.closePath(),this.__originalClosePath()},N.beginPath=function(){g.beginPath(),this.__originalBeginPath()}}class y{constructor(g){this.canvasFactory=g,this.cache=Object.create(null)}getCanvas(g,C,m){let u;return this.cache[g]!==void 0?(u=this.cache[g],this.canvasFactory.reset(u,C,m)):(u=this.canvasFactory.create(C,m),this.cache[g]=u),u}delete(g){delete this.cache[g]}clear(){for(const g in this.cache){const C=this.cache[g];this.canvasFactory.destroy(C),delete this.cache[g]}}}function B(N,g,C,m,u,n,D,x,CI,bI){const[sI,YI,XI,aI,f,$]=(0,R.getCurrentTransform)(N);if(YI===0&&XI===0){const v=D*sI+f,q=Math.round(v),mI=x*aI+$,NI=Math.round(mI),hI=(D+CI)*sI+f,E=Math.abs(Math.round(hI)-q)||1,MI=(x+bI)*aI+$,yI=Math.abs(Math.round(MI)-NI)||1;return N.setTransform(Math.sign(sI),0,0,Math.sign(aI),q,NI),N.drawImage(g,C,m,u,n,0,0,E,yI),N.setTransform(sI,YI,XI,aI,f,$),[E,yI]}if(sI===0&&aI===0){const v=x*XI+f,q=Math.round(v),mI=D*YI+$,NI=Math.round(mI),hI=(x+bI)*XI+f,E=Math.abs(Math.round(hI)-q)||1,MI=(D+CI)*YI+$,yI=Math.abs(Math.round(MI)-NI)||1;return N.setTransform(0,Math.sign(YI),Math.sign(XI),0,q,NI),N.drawImage(g,C,m,u,n,0,0,yI,E),N.setTransform(sI,YI,XI,aI,f,$),[yI,E]}N.drawImage(g,C,m,u,n,D,x,CI,bI);const w=Math.hypot(sI,YI),p=Math.hypot(XI,aI);return[w*CI,p*bI]}function s(N){const{width:g,height:C}=N;if(g>J||C>J)return null;const m=1e3,u=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),n=g+1;let D=new Uint8Array(n*(C+1)),x,CI,bI;const sI=g+7&-8;let YI=new Uint8Array(sI*C),XI=0;for(const p of N.data){let v=128;for(;v>0;)YI[XI++]=p&v?0:255,v>>=1}let aI=0;for(XI=0,YI[XI]!==0&&(D[0]=1,++aI),CI=1;CI<g;CI++)YI[XI]!==YI[XI+1]&&(D[CI]=YI[XI]?2:1,++aI),XI++;for(YI[XI]!==0&&(D[CI]=2,++aI),x=1;x<C;x++){XI=x*sI,bI=x*n,YI[XI-sI]!==YI[XI]&&(D[bI]=YI[XI]?1:8,++aI);let p=(YI[XI]?4:0)+(YI[XI-sI]?8:0);for(CI=1;CI<g;CI++)p=(p>>2)+(YI[XI+1]?4:0)+(YI[XI-sI+1]?8:0),u[p]&&(D[bI+CI]=u[p],++aI),XI++;if(YI[XI-sI]!==YI[XI]&&(D[bI+CI]=YI[XI]?2:4,++aI),aI>m)return null}for(XI=sI*(C-1),bI=x*n,YI[XI]!==0&&(D[bI]=8,++aI),CI=1;CI<g;CI++)YI[XI]!==YI[XI+1]&&(D[bI+CI]=YI[XI]?4:8,++aI),XI++;if(YI[XI]!==0&&(D[bI+CI]=4,++aI),aI>m)return null;const f=new Int32Array([0,n,-1,0,-n,0,0,0,1]),$=new Path2D;for(x=0;aI&&x<=C;x++){let p=x*n;const v=p+g;for(;p<v&&!D[p];)p++;if(p===v)continue;$.moveTo(p%n,x);const q=p;let mI=D[p];do{const NI=f[mI];do p+=NI;while(!D[p]);const hI=D[p];hI!==5&&hI!==10?(mI=hI,D[p]=0):(mI=hI&51*mI>>4,D[p]&=mI>>2|mI<<2),$.lineTo(p%n,p/n|0),D[p]||--aI}while(q!==p);--x}return YI=null,D=null,function(p){p.save(),p.scale(1/g,-1/C),p.translate(0,-C),p.fill($),p.beginPath(),p.restore()}}class Y{constructor(g,C){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=G.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=G.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=G.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,g,C])}clone(){const g=Object.create(this);return g.clipBox=this.clipBox.slice(),g}setCurrentPoint(g,C){this.x=g,this.y=C}updatePathMinMax(g,C,m){[C,m]=G.Util.applyTransform([C,m],g),this.minX=Math.min(this.minX,C),this.minY=Math.min(this.minY,m),this.maxX=Math.max(this.maxX,C),this.maxY=Math.max(this.maxY,m)}updateRectMinMax(g,C){const m=G.Util.applyTransform(C,g),u=G.Util.applyTransform(C.slice(2),g);this.minX=Math.min(this.minX,m[0],u[0]),this.minY=Math.min(this.minY,m[1],u[1]),this.maxX=Math.max(this.maxX,m[0],u[0]),this.maxY=Math.max(this.maxY,m[1],u[1])}updateScalingPathMinMax(g,C){G.Util.scaleMinMax(g,C),this.minX=Math.min(this.minX,C[0]),this.maxX=Math.max(this.maxX,C[1]),this.minY=Math.min(this.minY,C[2]),this.maxY=Math.max(this.maxY,C[3])}updateCurvePathMinMax(g,C,m,u,n,D,x,CI,bI,sI){const YI=G.Util.bezierBoundingBox(C,m,u,n,D,x,CI,bI);if(sI){sI[0]=Math.min(sI[0],YI[0],YI[2]),sI[1]=Math.max(sI[1],YI[0],YI[2]),sI[2]=Math.min(sI[2],YI[1],YI[3]),sI[3]=Math.max(sI[3],YI[1],YI[3]);return}this.updateRectMinMax(g,YI)}getPathBoundingBox(g=cI.PathType.FILL,C=null){const m=[this.minX,this.minY,this.maxX,this.maxY];if(g===cI.PathType.STROKE){C||(0,G.unreachable)("Stroke bounding box must include transform.");const u=G.Util.singularValueDecompose2dScale(C),n=u[0]*this.lineWidth/2,D=u[1]*this.lineWidth/2;m[0]-=n,m[1]-=D,m[2]+=n,m[3]+=D}return m}updateClipFromPath(){const g=G.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(g||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(g){this.clipBox=g,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(g=cI.PathType.FILL,C=null){return G.Util.intersect(this.clipBox,this.getPathBoundingBox(g,C))}}function t(N,g){if(typeof ImageData<"u"&&g instanceof ImageData){N.putImageData(g,0,0);return}const C=g.height,m=g.width,u=C%V,n=(C-u)/V,D=u===0?n:n+1,x=N.createImageData(m,V);let CI=0,bI;const sI=g.data,YI=x.data;let XI,aI,f,$;if(g.kind===G.ImageKind.GRAYSCALE_1BPP){const w=sI.byteLength,p=new Uint32Array(YI.buffer,0,YI.byteLength>>2),v=p.length,q=m+7>>3,mI=4294967295,NI=G.FeatureTest.isLittleEndian?4278190080:255;for(XI=0;XI<D;XI++){for(f=XI<n?V:u,bI=0,aI=0;aI<f;aI++){const hI=w-CI;let E=0;const MI=hI>q?m:hI*8-7,yI=MI&-8;let TI=0,LI=0;for(;E<yI;E+=8)LI=sI[CI++],p[bI++]=LI&128?mI:NI,p[bI++]=LI&64?mI:NI,p[bI++]=LI&32?mI:NI,p[bI++]=LI&16?mI:NI,p[bI++]=LI&8?mI:NI,p[bI++]=LI&4?mI:NI,p[bI++]=LI&2?mI:NI,p[bI++]=LI&1?mI:NI;for(;E<MI;E++)TI===0&&(LI=sI[CI++],TI=128),p[bI++]=LI&TI?mI:NI,TI>>=1}for(;bI<v;)p[bI++]=0;N.putImageData(x,0,XI*V)}}else if(g.kind===G.ImageKind.RGBA_32BPP){for(aI=0,$=m*V*4,XI=0;XI<n;XI++)YI.set(sI.subarray(CI,CI+$)),CI+=$,N.putImageData(x,0,aI),aI+=V;XI<D&&($=m*u*4,YI.set(sI.subarray(CI,CI+$)),N.putImageData(x,0,aI))}else if(g.kind===G.ImageKind.RGB_24BPP)for(f=V,$=m*f,XI=0;XI<D;XI++){for(XI>=n&&(f=u,$=m*f),bI=0,aI=$;aI--;)YI[bI++]=sI[CI++],YI[bI++]=sI[CI++],YI[bI++]=sI[CI++],YI[bI++]=255;N.putImageData(x,0,XI*V)}else throw new Error(`bad image kind: ${g.kind}`)}function h(N,g){if(g.bitmap){N.drawImage(g.bitmap,0,0);return}const C=g.height,m=g.width,u=C%V,n=(C-u)/V,D=u===0?n:n+1,x=N.createImageData(m,V);let CI=0;const bI=g.data,sI=x.data;for(let YI=0;YI<D;YI++){const XI=YI<n?V:u;({srcPos:CI}=(0,U.convertBlackAndWhiteToRGBA)({src:bI,srcPos:CI,dest:sI,width:m,height:XI,nonBlackColor:0})),N.putImageData(x,0,YI*V)}}function Z(N,g){const C=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const m of C)N[m]!==void 0&&(g[m]=N[m]);N.setLineDash!==void 0&&(g.setLineDash(N.getLineDash()),g.lineDashOffset=N.lineDashOffset)}function i(N){if(N.strokeStyle=N.fillStyle="#000000",N.fillRule="nonzero",N.globalAlpha=1,N.lineWidth=1,N.lineCap="butt",N.lineJoin="miter",N.miterLimit=10,N.globalCompositeOperation="source-over",N.font="10px sans-serif",N.setLineDash!==void 0&&(N.setLineDash([]),N.lineDashOffset=0),!G.isNodeJS){const{filter:g}=N;g!=="none"&&g!==""&&(N.filter="none")}}function A(N,g,C,m){const u=N.length;for(let n=3;n<u;n+=4){const D=N[n];if(D===0)N[n-3]=g,N[n-2]=C,N[n-1]=m;else if(D<255){const x=255-D;N[n-3]=N[n-3]*D+g*x>>8,N[n-2]=N[n-2]*D+C*x>>8,N[n-1]=N[n-1]*D+m*x>>8}}}function d(N,g,C){const m=N.length,u=1/255;for(let n=3;n<m;n+=4){const D=C?C[N[n]]:N[n];g[n]=g[n]*D*u|0}}function c(N,g,C){const m=N.length;for(let u=3;u<m;u+=4){const n=N[u-3]*77+N[u-2]*152+N[u-1]*28;g[u]=C?g[u]*C[n>>8]>>8:g[u]*n>>16}}function F(N,g,C,m,u,n,D,x,CI,bI,sI){const YI=!!n,XI=YI?n[0]:0,aI=YI?n[1]:0,f=YI?n[2]:0,$=u==="Luminosity"?c:d,p=Math.min(m,Math.ceil(1048576/C));for(let v=0;v<m;v+=p){const q=Math.min(p,m-v),mI=N.getImageData(x-bI,v+(CI-sI),C,q),NI=g.getImageData(x,v+CI,C,q);YI&&A(mI.data,XI,aI,f),$(mI.data,NI.data,D),g.putImageData(NI,x,v+CI)}}function l(N,g,C,m){const u=m[0],n=m[1],D=m[2]-u,x=m[3]-n;D===0||x===0||(F(g.context,C,D,x,g.subtype,g.backdrop,g.transferMap,u,n,g.offsetX,g.offsetY),N.save(),N.globalAlpha=1,N.globalCompositeOperation="source-over",N.setTransform(1,0,0,1,0,0),N.drawImage(C.canvas,0,0),N.restore())}function X(N,g){const C=G.Util.singularValueDecompose2dScale(N);C[0]=Math.fround(C[0]),C[1]=Math.fround(C[1]);const m=Math.fround((globalThis.devicePixelRatio||1)*R.PixelsPerInch.PDF_TO_CSS_UNITS);return g!==void 0?g:C[0]<=m||C[1]<=m}const K=["butt","round","square"],lI=["miter","round","bevel"],j={},r={},P=class P{constructor(g,C,m,u,n,{optionalContentConfig:D,markedContentStack:x=null},CI,bI){_(this,dI);this.ctx=g,this.current=new Y(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=C,this.objs=m,this.canvasFactory=u,this.filterFactory=n,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=x||[],this.optionalContentConfig=D,this.cachedCanvases=new y(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=CI,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=bI,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(g,C=null){return typeof g=="string"?g.startsWith("g_")?this.commonObjs.get(g):this.objs.get(g):C}beginDrawing({transform:g,viewport:C,transparency:m=!1,background:u=null}){const n=this.ctx.canvas.width,D=this.ctx.canvas.height,x=this.ctx.fillStyle;if(this.ctx.fillStyle=u||"#ffffff",this.ctx.fillRect(0,0,n,D),this.ctx.fillStyle=x,m){const CI=this.cachedCanvases.getCanvas("transparent",n,D);this.compositeCtx=this.ctx,this.transparentCanvas=CI.canvas,this.ctx=CI.context,this.ctx.save(),this.ctx.transform(...(0,R.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),i(this.ctx),g&&(this.ctx.transform(...g),this.outputScaleX=g[0],this.outputScaleY=g[0]),this.ctx.transform(...C.transform),this.viewportScale=C.scale,this.baseTransform=(0,R.getCurrentTransform)(this.ctx)}executeOperatorList(g,C,m,u){const n=g.argsArray,D=g.fnArray;let x=C||0;const CI=n.length;if(CI===x)return x;const bI=CI-x>z&&typeof m=="function",sI=bI?Date.now()+W:0;let YI=0;const XI=this.commonObjs,aI=this.objs;let f;for(;;){if(u!==void 0&&x===u.nextBreakPoint)return u.breakIt(x,m),x;if(f=D[x],f!==G.OPS.dependency)this[f].apply(this,n[x]);else for(const $ of n[x]){const w=$.startsWith("g_")?XI:aI;if(!w.has($))return w.get($,m),x}if(x++,x===CI)return x;if(bI&&++YI>z){if(Date.now()>sI)return m(),x;YI=0}}}endDrawing(){O(this,dI,Eg).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const g of this._cachedBitmapsMap.values()){for(const C of g.values())typeof HTMLCanvasElement<"u"&&C instanceof HTMLCanvasElement&&(C.width=C.height=0);g.clear()}this._cachedBitmapsMap.clear(),O(this,dI,rg).call(this)}_scaleImage(g,C){const m=g.width,u=g.height;let n=Math.max(Math.hypot(C[0],C[1]),1),D=Math.max(Math.hypot(C[2],C[3]),1),x=m,CI=u,bI="prescale1",sI,YI;for(;n>2&&x>1||D>2&&CI>1;){let XI=x,aI=CI;n>2&&x>1&&(XI=x>=16384?Math.floor(x/2)-1||1:Math.ceil(x/2),n/=x/XI),D>2&&CI>1&&(aI=CI>=16384?Math.floor(CI/2)-1||1:Math.ceil(CI)/2,D/=CI/aI),sI=this.cachedCanvases.getCanvas(bI,XI,aI),YI=sI.context,YI.clearRect(0,0,XI,aI),YI.drawImage(g,0,0,x,CI,0,0,XI,aI),g=sI.canvas,x=XI,CI=aI,bI=bI==="prescale1"?"prescale2":"prescale1"}return{img:g,paintWidth:x,paintHeight:CI}}_createMaskCanvas(g){const C=this.ctx,{width:m,height:u}=g,n=this.current.fillColor,D=this.current.patternFill,x=(0,R.getCurrentTransform)(C);let CI,bI,sI,YI;if((g.bitmap||g.data)&&g.count>1){const E=g.bitmap||g.data.buffer;bI=JSON.stringify(D?x:[x.slice(0,4),n]),CI=this._cachedBitmapsMap.get(E),CI||(CI=new Map,this._cachedBitmapsMap.set(E,CI));const MI=CI.get(bI);if(MI&&!D){const yI=Math.round(Math.min(x[0],x[2])+x[4]),TI=Math.round(Math.min(x[1],x[3])+x[5]);return{canvas:MI,offsetX:yI,offsetY:TI}}sI=MI}sI||(YI=this.cachedCanvases.getCanvas("maskCanvas",m,u),h(YI.context,g));let XI=G.Util.transform(x,[1/m,0,0,-1/u,0,0]);XI=G.Util.transform(XI,[1,0,0,1,0,-u]);const aI=G.Util.applyTransform([0,0],XI),f=G.Util.applyTransform([m,u],XI),$=G.Util.normalizeRect([aI[0],aI[1],f[0],f[1]]),w=Math.round($[2]-$[0])||1,p=Math.round($[3]-$[1])||1,v=this.cachedCanvases.getCanvas("fillCanvas",w,p),q=v.context,mI=Math.min(aI[0],f[0]),NI=Math.min(aI[1],f[1]);q.translate(-mI,-NI),q.transform(...XI),sI||(sI=this._scaleImage(YI.canvas,(0,R.getCurrentTransformInverse)(q)),sI=sI.img,CI&&D&&CI.set(bI,sI)),q.imageSmoothingEnabled=X((0,R.getCurrentTransform)(q),g.interpolate),B(q,sI,0,0,sI.width,sI.height,0,0,m,u),q.globalCompositeOperation="source-in";const hI=G.Util.transform((0,R.getCurrentTransformInverse)(q),[1,0,0,1,-mI,-NI]);return q.fillStyle=D?n.getPattern(C,this,hI,cI.PathType.FILL):n,q.fillRect(0,0,m,u),CI&&!D&&(this.cachedCanvases.delete("fillCanvas"),CI.set(bI,v.canvas)),{canvas:v.canvas,offsetX:Math.round(mI),offsetY:Math.round(NI)}}setLineWidth(g){g!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=g,this.ctx.lineWidth=g}setLineCap(g){this.ctx.lineCap=K[g]}setLineJoin(g){this.ctx.lineJoin=lI[g]}setMiterLimit(g){this.ctx.miterLimit=g}setDash(g,C){const m=this.ctx;m.setLineDash!==void 0&&(m.setLineDash(g),m.lineDashOffset=C)}setRenderingIntent(g){}setFlatness(g){}setGState(g){for(const[C,m]of g)switch(C){case"LW":this.setLineWidth(m);break;case"LC":this.setLineCap(m);break;case"LJ":this.setLineJoin(m);break;case"ML":this.setMiterLimit(m);break;case"D":this.setDash(m[0],m[1]);break;case"RI":this.setRenderingIntent(m);break;case"FL":this.setFlatness(m);break;case"Font":this.setFont(m[0],m[1]);break;case"CA":this.current.strokeAlpha=m;break;case"ca":this.current.fillAlpha=m,this.ctx.globalAlpha=m;break;case"BM":this.ctx.globalCompositeOperation=m;break;case"SMask":this.current.activeSMask=m?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(m);break}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const g=this.inSMaskMode;this.current.activeSMask&&!g?this.beginSMaskMode():!this.current.activeSMask&&g&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const g=this.ctx.canvas.width,C=this.ctx.canvas.height,m="smaskGroupAt"+this.groupLevel,u=this.cachedCanvases.getCanvas(m,g,C);this.suspendedCtx=this.ctx,this.ctx=u.context;const n=this.ctx;n.setTransform(...(0,R.getCurrentTransform)(this.suspendedCtx)),Z(this.suspendedCtx,n),o(n,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),Z(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(g){if(!this.current.activeSMask)return;g?(g[0]=Math.floor(g[0]),g[1]=Math.floor(g[1]),g[2]=Math.ceil(g[2]),g[3]=Math.ceil(g[3])):g=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const C=this.current.activeSMask,m=this.suspendedCtx;l(m,C,this.ctx,g),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(Z(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const g=this.current;this.stateStack.push(g),this.current=g.clone()}restore(){this.stateStack.length===0&&this.inSMaskMode&&this.endSMaskMode(),this.stateStack.length!==0&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),Z(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null)}transform(g,C,m,u,n,D){this.ctx.transform(g,C,m,u,n,D),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(g,C,m){const u=this.ctx,n=this.current;let D=n.x,x=n.y,CI,bI;const sI=(0,R.getCurrentTransform)(u),YI=sI[0]===0&&sI[3]===0||sI[1]===0&&sI[2]===0,XI=YI?m.slice(0):null;for(let aI=0,f=0,$=g.length;aI<$;aI++)switch(g[aI]|0){case G.OPS.rectangle:D=C[f++],x=C[f++];const w=C[f++],p=C[f++],v=D+w,q=x+p;u.moveTo(D,x),w===0||p===0?u.lineTo(v,q):(u.lineTo(v,x),u.lineTo(v,q),u.lineTo(D,q)),YI||n.updateRectMinMax(sI,[D,x,v,q]),u.closePath();break;case G.OPS.moveTo:D=C[f++],x=C[f++],u.moveTo(D,x),YI||n.updatePathMinMax(sI,D,x);break;case G.OPS.lineTo:D=C[f++],x=C[f++],u.lineTo(D,x),YI||n.updatePathMinMax(sI,D,x);break;case G.OPS.curveTo:CI=D,bI=x,D=C[f+4],x=C[f+5],u.bezierCurveTo(C[f],C[f+1],C[f+2],C[f+3],D,x),n.updateCurvePathMinMax(sI,CI,bI,C[f],C[f+1],C[f+2],C[f+3],D,x,XI),f+=6;break;case G.OPS.curveTo2:CI=D,bI=x,u.bezierCurveTo(D,x,C[f],C[f+1],C[f+2],C[f+3]),n.updateCurvePathMinMax(sI,CI,bI,D,x,C[f],C[f+1],C[f+2],C[f+3],XI),D=C[f+2],x=C[f+3],f+=4;break;case G.OPS.curveTo3:CI=D,bI=x,D=C[f+2],x=C[f+3],u.bezierCurveTo(C[f],C[f+1],D,x,D,x),n.updateCurvePathMinMax(sI,CI,bI,C[f],C[f+1],D,x,D,x,XI),f+=4;break;case G.OPS.closePath:u.closePath();break}YI&&n.updateScalingPathMinMax(sI,XI),n.setCurrentPoint(D,x)}closePath(){this.ctx.closePath()}stroke(g=!0){const C=this.ctx,m=this.current.strokeColor;C.globalAlpha=this.current.strokeAlpha,this.contentVisible&&(typeof m=="object"&&(m!=null&&m.getPattern)?(C.save(),C.strokeStyle=m.getPattern(C,this,(0,R.getCurrentTransformInverse)(C),cI.PathType.STROKE),this.rescaleAndStroke(!1),C.restore()):this.rescaleAndStroke(!0)),g&&this.consumePath(this.current.getClippedPathBoundingBox()),C.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(g=!0){const C=this.ctx,m=this.current.fillColor,u=this.current.patternFill;let n=!1;u&&(C.save(),C.fillStyle=m.getPattern(C,this,(0,R.getCurrentTransformInverse)(C),cI.PathType.FILL),n=!0);const D=this.current.getClippedPathBoundingBox();this.contentVisible&&D!==null&&(this.pendingEOFill?(C.fill("evenodd"),this.pendingEOFill=!1):C.fill()),n&&C.restore(),g&&this.consumePath(D)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=j}eoClip(){this.pendingClip=r}beginText(){this.current.textMatrix=G.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const g=this.pendingTextPaths,C=this.ctx;if(g===void 0){C.beginPath();return}C.save(),C.beginPath();for(const m of g)C.setTransform(...m.transform),C.translate(m.x,m.y),m.addToPath(C,m.fontSize);C.restore(),C.clip(),C.beginPath(),delete this.pendingTextPaths}setCharSpacing(g){this.current.charSpacing=g}setWordSpacing(g){this.current.wordSpacing=g}setHScale(g){this.current.textHScale=g/100}setLeading(g){this.current.leading=-g}setFont(g,C){var sI;const m=this.commonObjs.get(g),u=this.current;if(!m)throw new Error(`Can't find font for ${g}`);if(u.fontMatrix=m.fontMatrix||G.FONT_IDENTITY_MATRIX,(u.fontMatrix[0]===0||u.fontMatrix[3]===0)&&(0,G.warn)("Invalid font matrix for font "+g),C<0?(C=-C,u.fontDirection=-1):u.fontDirection=1,this.current.font=m,this.current.fontSize=C,m.isType3Font)return;const n=m.loadedName||"sans-serif",D=((sI=m.systemFontInfo)==null?void 0:sI.css)||`"${n}", ${m.fallbackName}`;let x="normal";m.black?x="900":m.bold&&(x="bold");const CI=m.italic?"italic":"normal";let bI=C;C<WI?bI=WI:C>L&&(bI=L),this.current.fontSizeScale=C/bI,this.ctx.font=`${CI} ${x} ${bI}px ${D}`}setTextRenderingMode(g){this.current.textRenderingMode=g}setTextRise(g){this.current.textRise=g}moveText(g,C){this.current.x=this.current.lineX+=g,this.current.y=this.current.lineY+=C}setLeadingMoveText(g,C){this.setLeading(-C),this.moveText(g,C)}setTextMatrix(g,C,m,u,n,D){this.current.textMatrix=[g,C,m,u,n,D],this.current.textMatrixScale=Math.hypot(g,C),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(g,C,m,u){const n=this.ctx,D=this.current,x=D.font,CI=D.textRenderingMode,bI=D.fontSize/D.fontSizeScale,sI=CI&G.TextRenderingMode.FILL_STROKE_MASK,YI=!!(CI&G.TextRenderingMode.ADD_TO_PATH_FLAG),XI=D.patternFill&&!x.missingFile;let aI;(x.disableFontFace||YI||XI)&&(aI=x.getPathGenerator(this.commonObjs,g)),x.disableFontFace||XI?(n.save(),n.translate(C,m),n.beginPath(),aI(n,bI),u&&n.setTransform(...u),(sI===G.TextRenderingMode.FILL||sI===G.TextRenderingMode.FILL_STROKE)&&n.fill(),(sI===G.TextRenderingMode.STROKE||sI===G.TextRenderingMode.FILL_STROKE)&&n.stroke(),n.restore()):((sI===G.TextRenderingMode.FILL||sI===G.TextRenderingMode.FILL_STROKE)&&n.fillText(g,C,m),(sI===G.TextRenderingMode.STROKE||sI===G.TextRenderingMode.FILL_STROKE)&&n.strokeText(g,C,m)),YI&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:(0,R.getCurrentTransform)(n),x:C,y:m,fontSize:bI,addToPath:aI})}get isFontSubpixelAAEnabled(){const{context:g}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);g.scale(1.5,1),g.fillText("I",0,10);const C=g.getImageData(0,0,10,10).data;let m=!1;for(let u=3;u<C.length;u+=4)if(C[u]>0&&C[u]<255){m=!0;break}return(0,G.shadow)(this,"isFontSubpixelAAEnabled",m)}showText(g){const C=this.current,m=C.font;if(m.isType3Font)return this.showType3Text(g);const u=C.fontSize;if(u===0)return;const n=this.ctx,D=C.fontSizeScale,x=C.charSpacing,CI=C.wordSpacing,bI=C.fontDirection,sI=C.textHScale*bI,YI=g.length,XI=m.vertical,aI=XI?1:-1,f=m.defaultVMetrics,$=u*C.fontMatrix[0],w=C.textRenderingMode===G.TextRenderingMode.FILL&&!m.disableFontFace&&!C.patternFill;n.save(),n.transform(...C.textMatrix),n.translate(C.x,C.y+C.textRise),bI>0?n.scale(sI,-1):n.scale(sI,1);let p;if(C.patternFill){n.save();const hI=C.fillColor.getPattern(n,this,(0,R.getCurrentTransformInverse)(n),cI.PathType.FILL);p=(0,R.getCurrentTransform)(n),n.restore(),n.fillStyle=hI}let v=C.lineWidth;const q=C.textMatrixScale;if(q===0||v===0){const hI=C.textRenderingMode&G.TextRenderingMode.FILL_STROKE_MASK;(hI===G.TextRenderingMode.STROKE||hI===G.TextRenderingMode.FILL_STROKE)&&(v=this.getSinglePixelWidth())}else v/=q;if(D!==1&&(n.scale(D,D),v/=D),n.lineWidth=v,m.isInvalidPDFjsFont){const hI=[];let E=0;for(const MI of g)hI.push(MI.unicode),E+=MI.width;n.fillText(hI.join(""),0,0),C.x+=E*$*sI,n.restore(),this.compose();return}let mI=0,NI;for(NI=0;NI<YI;++NI){const hI=g[NI];if(typeof hI=="number"){mI+=aI*hI*u/1e3;continue}let E=!1;const MI=(hI.isSpace?CI:0)+x,yI=hI.fontChar,TI=hI.accent;let LI,UI,eI=hI.width;if(XI){const vI=hI.vmetric||f,rI=-(hI.vmetric?vI[1]:eI*.5)*$,VI=vI[2]*$;eI=vI?-vI[0]:eI,LI=rI/D,UI=(mI+VI)/D}else LI=mI/D,UI=0;if(m.remeasure&&eI>0){const vI=n.measureText(yI).width*1e3/u*D;if(eI<vI&&this.isFontSubpixelAAEnabled){const rI=eI/vI;E=!0,n.save(),n.scale(rI,1),LI/=rI}else eI!==vI&&(LI+=(eI-vI)/2e3*u/D)}if(this.contentVisible&&(hI.isInFont||m.missingFile)){if(w&&!TI)n.fillText(yI,LI,UI);else if(this.paintChar(yI,LI,UI,p),TI){const vI=LI+u*TI.offset.x/D,rI=UI-u*TI.offset.y/D;this.paintChar(TI.fontChar,vI,rI,p)}}const JI=XI?eI*$-MI*bI:eI*$+MI*bI;mI+=JI,E&&n.restore()}XI?C.y-=mI:C.x+=mI*sI,n.restore(),this.compose()}showType3Text(g){const C=this.ctx,m=this.current,u=m.font,n=m.fontSize,D=m.fontDirection,x=u.vertical?1:-1,CI=m.charSpacing,bI=m.wordSpacing,sI=m.textHScale*D,YI=m.fontMatrix||G.FONT_IDENTITY_MATRIX,XI=g.length,aI=m.textRenderingMode===G.TextRenderingMode.INVISIBLE;let f,$,w,p;if(!(aI||n===0)){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,C.save(),C.transform(...m.textMatrix),C.translate(m.x,m.y),C.scale(sI,D),f=0;f<XI;++f){if($=g[f],typeof $=="number"){p=x*$*n/1e3,this.ctx.translate(p,0),m.x+=p*sI;continue}const v=($.isSpace?bI:0)+CI,q=u.charProcOperatorList[$.operatorListId];if(!q){(0,G.warn)(`Type3 character "${$.operatorListId}" is not available.`);continue}this.contentVisible&&(this.processingType3=$,this.save(),C.scale(n,n),C.transform(...YI),this.executeOperatorList(q),this.restore()),w=G.Util.applyTransform([$.width,0],YI)[0]*n+v,C.translate(w,0),m.x+=w*sI}C.restore(),this.processingType3=null}}setCharWidth(g,C){}setCharWidthAndBounds(g,C,m,u,n,D){this.ctx.rect(m,u,n-m,D-u),this.ctx.clip(),this.endPath()}getColorN_Pattern(g){let C;if(g[0]==="TilingPattern"){const m=g[1],u=this.baseTransform||(0,R.getCurrentTransform)(this.ctx),n={createCanvasGraphics:D=>new P(D,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};C=new cI.TilingPattern(g,m,this.ctx,n,u)}else C=this._getPattern(g[1],g[2]);return C}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(g,C,m){const u=G.Util.makeHexColor(g,C,m);this.ctx.strokeStyle=u,this.current.strokeColor=u}setFillRGBColor(g,C,m){const u=G.Util.makeHexColor(g,C,m);this.ctx.fillStyle=u,this.current.fillColor=u,this.current.patternFill=!1}_getPattern(g,C=null){let m;return this.cachedPatterns.has(g)?m=this.cachedPatterns.get(g):(m=(0,cI.getShadingPattern)(this.getObject(g)),this.cachedPatterns.set(g,m)),C&&(m.matrix=C),m}shadingFill(g){if(!this.contentVisible)return;const C=this.ctx;this.save();const m=this._getPattern(g);C.fillStyle=m.getPattern(C,this,(0,R.getCurrentTransformInverse)(C),cI.PathType.SHADING);const u=(0,R.getCurrentTransformInverse)(C);if(u){const{width:n,height:D}=C.canvas,[x,CI,bI,sI]=G.Util.getAxialAlignedBoundingBox([0,0,n,D],u);this.ctx.fillRect(x,CI,bI-x,sI-CI)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,G.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,G.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(g,C){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(g)&&g.length===6&&this.transform(...g),this.baseTransform=(0,R.getCurrentTransform)(this.ctx),C)){const m=C[2]-C[0],u=C[3]-C[1];this.ctx.rect(C[0],C[1],m,u),this.current.updateRectMinMax((0,R.getCurrentTransform)(this.ctx),C),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(g){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const C=this.ctx;g.isolated||(0,G.info)("TODO: Support non-isolated groups."),g.knockout&&(0,G.warn)("Knockout groups not supported.");const m=(0,R.getCurrentTransform)(C);if(g.matrix&&C.transform(...g.matrix),!g.bbox)throw new Error("Bounding box is required.");let u=G.Util.getAxialAlignedBoundingBox(g.bbox,(0,R.getCurrentTransform)(C));const n=[0,0,C.canvas.width,C.canvas.height];u=G.Util.intersect(u,n)||[0,0,0,0];const D=Math.floor(u[0]),x=Math.floor(u[1]);let CI=Math.max(Math.ceil(u[2])-D,1),bI=Math.max(Math.ceil(u[3])-x,1),sI=1,YI=1;CI>e&&(sI=CI/e,CI=e),bI>e&&(YI=bI/e,bI=e),this.current.startNewPathAndClipBox([0,0,CI,bI]);let XI="groupAt"+this.groupLevel;g.smask&&(XI+="_smask_"+this.smaskCounter++%2);const aI=this.cachedCanvases.getCanvas(XI,CI,bI),f=aI.context;f.scale(1/sI,1/YI),f.translate(-D,-x),f.transform(...m),g.smask?this.smaskStack.push({canvas:aI.canvas,context:f,offsetX:D,offsetY:x,scaleX:sI,scaleY:YI,subtype:g.smask.subtype,backdrop:g.smask.backdrop,transferMap:g.smask.transferMap||null,startTransformInverse:null}):(C.setTransform(1,0,0,1,0,0),C.translate(D,x),C.scale(sI,YI),C.save()),Z(C,f),this.ctx=f,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(C),this.groupLevel++}endGroup(g){if(!this.contentVisible)return;this.groupLevel--;const C=this.ctx,m=this.groupStack.pop();if(this.ctx=m,this.ctx.imageSmoothingEnabled=!1,g.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const u=(0,R.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...u);const n=G.Util.getAxialAlignedBoundingBox([0,0,C.canvas.width,C.canvas.height],u);this.ctx.drawImage(C.canvas,0,0),this.ctx.restore(),this.compose(n)}}beginAnnotation(g,C,m,u,n){if(O(this,dI,Eg).call(this),i(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(C)&&C.length===4){const D=C[2]-C[0],x=C[3]-C[1];if(n&&this.annotationCanvasMap){m=m.slice(),m[4]-=C[0],m[5]-=C[1],C=C.slice(),C[0]=C[1]=0,C[2]=D,C[3]=x;const[CI,bI]=G.Util.singularValueDecompose2dScale((0,R.getCurrentTransform)(this.ctx)),{viewportScale:sI}=this,YI=Math.ceil(D*this.outputScaleX*sI),XI=Math.ceil(x*this.outputScaleY*sI);this.annotationCanvas=this.canvasFactory.create(YI,XI);const{canvas:aI,context:f}=this.annotationCanvas;this.annotationCanvasMap.set(g,aI),this.annotationCanvas.savedCtx=this.ctx,this.ctx=f,this.ctx.save(),this.ctx.setTransform(CI,0,0,-bI,0,x*bI),i(this.ctx)}else i(this.ctx),this.ctx.rect(C[0],C[1],D,x),this.ctx.clip(),this.endPath()}this.current=new Y(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...m),this.transform(...u)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),O(this,dI,rg).call(this),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(g){if(!this.contentVisible)return;const C=g.count;g=this.getObject(g.data,g),g.count=C;const m=this.ctx,u=this.processingType3;if(u&&(u.compiled===void 0&&(u.compiled=s(g)),u.compiled)){u.compiled(m);return}const n=this._createMaskCanvas(g),D=n.canvas;m.save(),m.setTransform(1,0,0,1,0,0),m.drawImage(D,n.offsetX,n.offsetY),m.restore(),this.compose()}paintImageMaskXObjectRepeat(g,C,m=0,u=0,n,D){if(!this.contentVisible)return;g=this.getObject(g.data,g);const x=this.ctx;x.save();const CI=(0,R.getCurrentTransform)(x);x.transform(C,m,u,n,0,0);const bI=this._createMaskCanvas(g);x.setTransform(1,0,0,1,bI.offsetX-CI[4],bI.offsetY-CI[5]);for(let sI=0,YI=D.length;sI<YI;sI+=2){const XI=G.Util.transform(CI,[C,m,u,n,D[sI],D[sI+1]]),[aI,f]=G.Util.applyTransform([0,0],XI);x.drawImage(bI.canvas,aI,f)}x.restore(),this.compose()}paintImageMaskXObjectGroup(g){if(!this.contentVisible)return;const C=this.ctx,m=this.current.fillColor,u=this.current.patternFill;for(const n of g){const{data:D,width:x,height:CI,transform:bI}=n,sI=this.cachedCanvases.getCanvas("maskCanvas",x,CI),YI=sI.context;YI.save();const XI=this.getObject(D,n);h(YI,XI),YI.globalCompositeOperation="source-in",YI.fillStyle=u?m.getPattern(YI,this,(0,R.getCurrentTransformInverse)(C),cI.PathType.FILL):m,YI.fillRect(0,0,x,CI),YI.restore(),C.save(),C.transform(...bI),C.scale(1,-1),B(C,sI.canvas,0,0,x,CI,0,-1,1,1),C.restore()}this.compose()}paintImageXObject(g){if(!this.contentVisible)return;const C=this.getObject(g);if(!C){(0,G.warn)("Dependent image isn't ready yet");return}this.paintInlineImageXObject(C)}paintImageXObjectRepeat(g,C,m,u){if(!this.contentVisible)return;const n=this.getObject(g);if(!n){(0,G.warn)("Dependent image isn't ready yet");return}const D=n.width,x=n.height,CI=[];for(let bI=0,sI=u.length;bI<sI;bI+=2)CI.push({transform:[C,0,0,m,u[bI],u[bI+1]],x:0,y:0,w:D,h:x});this.paintInlineImageXObjectGroup(n,CI)}applyTransferMapsToCanvas(g){return this.current.transferMaps!=="none"&&(g.filter=this.current.transferMaps,g.drawImage(g.canvas,0,0),g.filter="none"),g.canvas}applyTransferMapsToBitmap(g){if(this.current.transferMaps==="none")return g.bitmap;const{bitmap:C,width:m,height:u}=g,n=this.cachedCanvases.getCanvas("inlineImage",m,u),D=n.context;return D.filter=this.current.transferMaps,D.drawImage(C,0,0),D.filter="none",n.canvas}paintInlineImageXObject(g){if(!this.contentVisible)return;const C=g.width,m=g.height,u=this.ctx;if(this.save(),!G.isNodeJS){const{filter:x}=u;x!=="none"&&x!==""&&(u.filter="none")}u.scale(1/C,-1/m);let n;if(g.bitmap)n=this.applyTransferMapsToBitmap(g);else if(typeof HTMLElement=="function"&&g instanceof HTMLElement||!g.data)n=g;else{const CI=this.cachedCanvases.getCanvas("inlineImage",C,m).context;t(CI,g),n=this.applyTransferMapsToCanvas(CI)}const D=this._scaleImage(n,(0,R.getCurrentTransformInverse)(u));u.imageSmoothingEnabled=X((0,R.getCurrentTransform)(u),g.interpolate),B(u,D.img,0,0,D.paintWidth,D.paintHeight,0,-m,C,m),this.compose(),this.restore()}paintInlineImageXObjectGroup(g,C){if(!this.contentVisible)return;const m=this.ctx;let u;if(g.bitmap)u=g.bitmap;else{const n=g.width,D=g.height,CI=this.cachedCanvases.getCanvas("inlineImage",n,D).context;t(CI,g),u=this.applyTransferMapsToCanvas(CI)}for(const n of C)m.save(),m.transform(...n.transform),m.scale(1,-1),B(m,u,n.x,n.y,n.w,n.h,0,-1,1,1),m.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(g){}markPointProps(g,C){}beginMarkedContent(g){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(g,C){g==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(C)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(g){const C=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(g);const m=this.ctx;this.pendingClip&&(C||(this.pendingClip===r?m.clip("evenodd"):m.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),m.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const g=(0,R.getCurrentTransform)(this.ctx);if(g[1]===0&&g[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(g[0]),Math.abs(g[3]));else{const C=Math.abs(g[0]*g[3]-g[2]*g[1]),m=Math.hypot(g[0],g[2]),u=Math.hypot(g[1],g[3]);this._cachedGetSinglePixelWidth=Math.max(m,u)/C}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(this._cachedScaleForStroking[0]===-1){const{lineWidth:g}=this.current,{a:C,b:m,c:u,d:n}=this.ctx.getTransform();let D,x;if(m===0&&u===0){const CI=Math.abs(C),bI=Math.abs(n);if(CI===bI)if(g===0)D=x=1/CI;else{const sI=CI*g;D=x=sI<1?1/sI:1}else if(g===0)D=1/CI,x=1/bI;else{const sI=CI*g,YI=bI*g;D=sI<1?1/sI:1,x=YI<1?1/YI:1}}else{const CI=Math.abs(C*n-m*u),bI=Math.hypot(C,m),sI=Math.hypot(u,n);if(g===0)D=sI/CI,x=bI/CI;else{const YI=g*CI;D=sI>YI?sI/YI:1,x=bI>YI?bI/YI:1}}this._cachedScaleForStroking[0]=D,this._cachedScaleForStroking[1]=x}return this._cachedScaleForStroking}rescaleAndStroke(g){const{ctx:C}=this,{lineWidth:m}=this.current,[u,n]=this.getScaleForStroking();if(C.lineWidth=m||1,u===1&&n===1){C.stroke();return}const D=C.getLineDash();if(g&&C.save(),C.scale(u,n),D.length>0){const x=Math.max(u,n);C.setLineDash(D.map(CI=>CI/x)),C.lineDashOffset/=x}C.stroke(),g&&C.restore()}isContentVisible(){for(let g=this.markedContentStack.length-1;g>=0;g--)if(!this.markedContentStack[g].visible)return!1;return!0}};dI=new WeakSet,Eg=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},rg=function(){if(this.pageColors){const g=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if(g!=="none"){const C=this.ctx.filter;this.ctx.filter=g,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=C}}};let T=P;b.CanvasGraphics=T;for(const N in G.OPS)T.prototype[N]!==void 0&&(T.prototype[G.OPS[N]]=T.prototype[N])},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.TilingPattern=b.PathType=void 0,b.getShadingPattern=V;var G=ZI(1),R=ZI(6);const cI={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};b.PathType=cI;function U(s,Y){if(!Y)return;const t=Y[2]-Y[0],h=Y[3]-Y[1],Z=new Path2D;Z.rect(Y[0],Y[1],t,h),s.clip(Z)}class WI{constructor(){this.constructor===WI&&(0,G.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,G.unreachable)("Abstract method `getPattern` called.")}}class L extends WI{constructor(Y){super(),this._type=Y[1],this._bbox=Y[2],this._colorStops=Y[3],this._p0=Y[4],this._p1=Y[5],this._r0=Y[6],this._r1=Y[7],this.matrix=null}_createGradient(Y){let t;this._type==="axial"?t=Y.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(t=Y.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const h of this._colorStops)t.addColorStop(h[0],h[1]);return t}getPattern(Y,t,h,Z){let i;if(Z===cI.STROKE||Z===cI.FILL){const A=t.current.getClippedPathBoundingBox(Z,(0,R.getCurrentTransform)(Y))||[0,0,0,0],d=Math.ceil(A[2]-A[0])||1,c=Math.ceil(A[3]-A[1])||1,F=t.cachedCanvases.getCanvas("pattern",d,c,!0),l=F.context;l.clearRect(0,0,l.canvas.width,l.canvas.height),l.beginPath(),l.rect(0,0,l.canvas.width,l.canvas.height),l.translate(-A[0],-A[1]),h=G.Util.transform(h,[1,0,0,1,A[0],A[1]]),l.transform(...t.baseTransform),this.matrix&&l.transform(...this.matrix),U(l,this._bbox),l.fillStyle=this._createGradient(l),l.fill(),i=Y.createPattern(F.canvas,"no-repeat");const X=new DOMMatrix(h);i.setTransform(X)}else U(Y,this._bbox),i=this._createGradient(Y);return i}}function e(s,Y,t,h,Z,i,A,d){const c=Y.coords,F=Y.colors,l=s.data,X=s.width*4;let K;c[t+1]>c[h+1]&&(K=t,t=h,h=K,K=i,i=A,A=K),c[h+1]>c[Z+1]&&(K=h,h=Z,Z=K,K=A,A=d,d=K),c[t+1]>c[h+1]&&(K=t,t=h,h=K,K=i,i=A,A=K);const lI=(c[t]+Y.offsetX)*Y.scaleX,j=(c[t+1]+Y.offsetY)*Y.scaleY,r=(c[h]+Y.offsetX)*Y.scaleX,T=(c[h+1]+Y.offsetY)*Y.scaleY,dI=(c[Z]+Y.offsetX)*Y.scaleX,M=(c[Z+1]+Y.offsetY)*Y.scaleY;if(j>=M)return;const k=F[i],P=F[i+1],N=F[i+2],g=F[A],C=F[A+1],m=F[A+2],u=F[d],n=F[d+1],D=F[d+2],x=Math.round(j),CI=Math.round(M);let bI,sI,YI,XI,aI,f,$,w;for(let p=x;p<=CI;p++){if(p<T){const hI=p<j?0:(j-p)/(j-T);bI=lI-(lI-r)*hI,sI=k-(k-g)*hI,YI=P-(P-C)*hI,XI=N-(N-m)*hI}else{let hI;p>M?hI=1:T===M?hI=0:hI=(T-p)/(T-M),bI=r-(r-dI)*hI,sI=g-(g-u)*hI,YI=C-(C-n)*hI,XI=m-(m-D)*hI}let v;p<j?v=0:p>M?v=1:v=(j-p)/(j-M),aI=lI-(lI-dI)*v,f=k-(k-u)*v,$=P-(P-n)*v,w=N-(N-D)*v;const q=Math.round(Math.min(bI,aI)),mI=Math.round(Math.max(bI,aI));let NI=X*p+q*4;for(let hI=q;hI<=mI;hI++)v=(bI-hI)/(bI-aI),v<0?v=0:v>1&&(v=1),l[NI++]=sI-(sI-f)*v|0,l[NI++]=YI-(YI-$)*v|0,l[NI++]=XI-(XI-w)*v|0,l[NI++]=255}}function W(s,Y,t){const h=Y.coords,Z=Y.colors;let i,A;switch(Y.type){case"lattice":const d=Y.verticesPerRow,c=Math.floor(h.length/d)-1,F=d-1;for(i=0;i<c;i++){let l=i*d;for(let X=0;X<F;X++,l++)e(s,t,h[l],h[l+1],h[l+d],Z[l],Z[l+1],Z[l+d]),e(s,t,h[l+d+1],h[l+1],h[l+d],Z[l+d+1],Z[l+1],Z[l+d])}break;case"triangles":for(i=0,A=h.length;i<A;i+=3)e(s,t,h[i],h[i+1],h[i+2],Z[i],Z[i+1],Z[i+2]);break;default:throw new Error("illegal figure")}}class z extends WI{constructor(Y){super(),this._coords=Y[2],this._colors=Y[3],this._figures=Y[4],this._bounds=Y[5],this._bbox=Y[7],this._background=Y[8],this.matrix=null}_createMeshCanvas(Y,t,h){const d=Math.floor(this._bounds[0]),c=Math.floor(this._bounds[1]),F=Math.ceil(this._bounds[2])-d,l=Math.ceil(this._bounds[3])-c,X=Math.min(Math.ceil(Math.abs(F*Y[0]*1.1)),3e3),K=Math.min(Math.ceil(Math.abs(l*Y[1]*1.1)),3e3),lI=F/X,j=l/K,r={coords:this._coords,colors:this._colors,offsetX:-d,offsetY:-c,scaleX:1/lI,scaleY:1/j},T=X+2*2,dI=K+2*2,M=h.getCanvas("mesh",T,dI,!1),k=M.context,P=k.createImageData(X,K);if(t){const g=P.data;for(let C=0,m=g.length;C<m;C+=4)g[C]=t[0],g[C+1]=t[1],g[C+2]=t[2],g[C+3]=255}for(const g of this._figures)W(P,g,r);return k.putImageData(P,2,2),{canvas:M.canvas,offsetX:d-2*lI,offsetY:c-2*j,scaleX:lI,scaleY:j}}getPattern(Y,t,h,Z){U(Y,this._bbox);let i;if(Z===cI.SHADING)i=G.Util.singularValueDecompose2dScale((0,R.getCurrentTransform)(Y));else if(i=G.Util.singularValueDecompose2dScale(t.baseTransform),this.matrix){const d=G.Util.singularValueDecompose2dScale(this.matrix);i=[i[0]*d[0],i[1]*d[1]]}const A=this._createMeshCanvas(i,Z===cI.SHADING?null:this._background,t.cachedCanvases);return Z!==cI.SHADING&&(Y.setTransform(...t.baseTransform),this.matrix&&Y.transform(...this.matrix)),Y.translate(A.offsetX,A.offsetY),Y.scale(A.scaleX,A.scaleY),Y.createPattern(A.canvas,"no-repeat")}}class J extends WI{getPattern(){return"hotpink"}}function V(s){switch(s[0]){case"RadialAxial":return new L(s);case"Mesh":return new z(s);case"Dummy":return new J}throw new Error(`Unknown IR type: ${s[0]}`)}const o={COLORED:1,UNCOLORED:2},B=class B{constructor(Y,t,h,Z,i){this.operatorList=Y[2],this.matrix=Y[3]||[1,0,0,1,0,0],this.bbox=Y[4],this.xstep=Y[5],this.ystep=Y[6],this.paintType=Y[7],this.tilingType=Y[8],this.color=t,this.ctx=h,this.canvasGraphicsFactory=Z,this.baseTransform=i}createPatternCanvas(Y){const t=this.operatorList,h=this.bbox,Z=this.xstep,i=this.ystep,A=this.paintType,d=this.tilingType,c=this.color,F=this.canvasGraphicsFactory;(0,G.info)("TilingType: "+d);const l=h[0],X=h[1],K=h[2],lI=h[3],j=G.Util.singularValueDecompose2dScale(this.matrix),r=G.Util.singularValueDecompose2dScale(this.baseTransform),T=[j[0]*r[0],j[1]*r[1]],dI=this.getSizeAndScale(Z,this.ctx.canvas.width,T[0]),M=this.getSizeAndScale(i,this.ctx.canvas.height,T[1]),k=Y.cachedCanvases.getCanvas("pattern",dI.size,M.size,!0),P=k.context,N=F.createCanvasGraphics(P);N.groupLevel=Y.groupLevel,this.setFillAndStrokeStyleToContext(N,A,c);let g=l,C=X,m=K,u=lI;return l<0&&(g=0,m+=Math.abs(l)),X<0&&(C=0,u+=Math.abs(X)),P.translate(-(dI.scale*g),-(M.scale*C)),N.transform(dI.scale,0,0,M.scale,0,0),P.save(),this.clipBbox(N,g,C,m,u),N.baseTransform=(0,R.getCurrentTransform)(N.ctx),N.executeOperatorList(t),N.endDrawing(),{canvas:k.canvas,scaleX:dI.scale,scaleY:M.scale,offsetX:g,offsetY:C}}getSizeAndScale(Y,t,h){Y=Math.abs(Y);const Z=Math.max(B.MAX_PATTERN_SIZE,t);let i=Math.ceil(Y*h);return i>=Z?i=Z:h=i/Y,{scale:h,size:i}}clipBbox(Y,t,h,Z,i){const A=Z-t,d=i-h;Y.ctx.rect(t,h,A,d),Y.current.updateRectMinMax((0,R.getCurrentTransform)(Y.ctx),[t,h,Z,i]),Y.clip(),Y.endPath()}setFillAndStrokeStyleToContext(Y,t,h){const Z=Y.ctx,i=Y.current;switch(t){case o.COLORED:const A=this.ctx;Z.fillStyle=A.fillStyle,Z.strokeStyle=A.strokeStyle,i.fillColor=A.fillStyle,i.strokeColor=A.strokeStyle;break;case o.UNCOLORED:const d=G.Util.makeHexColor(h[0],h[1],h[2]);Z.fillStyle=d,Z.strokeStyle=d,i.fillColor=d,i.strokeColor=d;break;default:throw new G.FormatError(`Unsupported paint type: ${t}`)}}getPattern(Y,t,h,Z){let i=h;Z!==cI.SHADING&&(i=G.Util.transform(i,t.baseTransform),this.matrix&&(i=G.Util.transform(i,this.matrix)));const A=this.createPatternCanvas(t);let d=new DOMMatrix(i);d=d.translate(A.offsetX,A.offsetY),d=d.scale(1/A.scaleX,1/A.scaleY);const c=Y.createPattern(A.canvas,"repeat");return c.setTransform(d),c}};fI(B,"MAX_PATTERN_SIZE",3e3);let y=B;b.TilingPattern=y},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.convertBlackAndWhiteToRGBA=cI,b.convertToRGBA=R,b.grayToRGBA=WI;var G=ZI(1);function R(L){switch(L.kind){case G.ImageKind.GRAYSCALE_1BPP:return cI(L);case G.ImageKind.RGB_24BPP:return U(L)}return null}function cI({src:L,srcPos:e=0,dest:W,width:z,height:J,nonBlackColor:V=4294967295,inverseDecode:o=!1}){const y=G.FeatureTest.isLittleEndian?4278190080:255,[B,s]=o?[V,y]:[y,V],Y=z>>3,t=z&7,h=L.length;W=new Uint32Array(W.buffer);let Z=0;for(let i=0;i<J;i++){for(const d=e+Y;e<d;e++){const c=e<h?L[e]:255;W[Z++]=c&128?s:B,W[Z++]=c&64?s:B,W[Z++]=c&32?s:B,W[Z++]=c&16?s:B,W[Z++]=c&8?s:B,W[Z++]=c&4?s:B,W[Z++]=c&2?s:B,W[Z++]=c&1?s:B}if(t===0)continue;const A=e<h?L[e++]:255;for(let d=0;d<t;d++)W[Z++]=A&1<<7-d?s:B}return{srcPos:e,destPos:Z}}function U({src:L,srcPos:e=0,dest:W,destPos:z=0,width:J,height:V}){let o=0;const y=L.length>>2,B=new Uint32Array(L.buffer,e,y);if(G.FeatureTest.isLittleEndian){for(;o<y-2;o+=3,z+=4){const s=B[o],Y=B[o+1],t=B[o+2];W[z]=s|4278190080,W[z+1]=s>>>24|Y<<8|4278190080,W[z+2]=Y>>>16|t<<16|4278190080,W[z+3]=t>>>8|4278190080}for(let s=o*4,Y=L.length;s<Y;s+=3)W[z++]=L[s]|L[s+1]<<8|L[s+2]<<16|4278190080}else{for(;o<y-2;o+=3,z+=4){const s=B[o],Y=B[o+1],t=B[o+2];W[z]=s|255,W[z+1]=s<<24|Y>>>8|255,W[z+2]=Y<<16|t>>>16|255,W[z+3]=t<<8|255}for(let s=o*4,Y=L.length;s<Y;s+=3)W[z++]=L[s]<<24|L[s+1]<<16|L[s+2]<<8|255}return{srcPos:e,destPos:z}}function WI(L,e){if(G.FeatureTest.isLittleEndian)for(let W=0,z=L.length;W<z;W++)e[W]=L[W]*65793|4278190080;else for(let W=0,z=L.length;W<z;W++)e[W]=L[W]*16843008|255}},(wI,b)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.GlobalWorkerOptions=void 0;const ZI=Object.create(null);b.GlobalWorkerOptions=ZI,ZI.workerPort=null,ZI.workerSrc=""},(wI,b,ZI)=>{var L,yC,HC,Rg;Object.defineProperty(b,"__esModule",{value:!0}),b.MessageHandler=void 0;var G=ZI(1);const R={DATA:1,ERROR:2},cI={CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function U(J){switch(J instanceof Error||typeof J=="object"&&J!==null||(0,G.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),J.name){case"AbortException":return new G.AbortException(J.message);case"MissingPDFException":return new G.MissingPDFException(J.message);case"PasswordException":return new G.PasswordException(J.message,J.code);case"UnexpectedResponseException":return new G.UnexpectedResponseException(J.message,J.status);case"UnknownErrorException":return new G.UnknownErrorException(J.message,J.details);default:return new G.UnknownErrorException(J.message,J.toString())}}class WI{constructor(V,o,y){_(this,L);this.sourceName=V,this.targetName=o,this.comObj=y,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=B=>{const s=B.data;if(s.targetName!==this.sourceName)return;if(s.stream){O(this,L,HC).call(this,s);return}if(s.callback){const t=s.callbackId,h=this.callbackCapabilities[t];if(!h)throw new Error(`Cannot resolve callback ${t}`);if(delete this.callbackCapabilities[t],s.callback===R.DATA)h.resolve(s.data);else if(s.callback===R.ERROR)h.reject(U(s.reason));else throw new Error("Unexpected callback case");return}const Y=this.actionHandler[s.action];if(!Y)throw new Error(`Unknown action from worker: ${s.action}`);if(s.callbackId){const t=this.sourceName,h=s.sourceName;new Promise(function(Z){Z(Y(s.data))}).then(function(Z){y.postMessage({sourceName:t,targetName:h,callback:R.DATA,callbackId:s.callbackId,data:Z})},function(Z){y.postMessage({sourceName:t,targetName:h,callback:R.ERROR,callbackId:s.callbackId,reason:U(Z)})});return}if(s.streamId){O(this,L,yC).call(this,s);return}Y(s.data)},y.addEventListener("message",this._onComObjOnMessage)}on(V,o){const y=this.actionHandler;if(y[V])throw new Error(`There is already an actionName called "${V}"`);y[V]=o}send(V,o,y){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:V,data:o},y)}sendWithPromise(V,o,y){const B=this.callbackId++,s=new G.PromiseCapability;this.callbackCapabilities[B]=s;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:V,callbackId:B,data:o},y)}catch(Y){s.reject(Y)}return s.promise}sendWithStream(V,o,y,B){const s=this.streamId++,Y=this.sourceName,t=this.targetName,h=this.comObj;return new ReadableStream({start:Z=>{const i=new G.PromiseCapability;return this.streamControllers[s]={controller:Z,startCall:i,pullCall:null,cancelCall:null,isClosed:!1},h.postMessage({sourceName:Y,targetName:t,action:V,streamId:s,data:o,desiredSize:Z.desiredSize},B),i.promise},pull:Z=>{const i=new G.PromiseCapability;return this.streamControllers[s].pullCall=i,h.postMessage({sourceName:Y,targetName:t,stream:cI.PULL,streamId:s,desiredSize:Z.desiredSize}),i.promise},cancel:Z=>{(0,G.assert)(Z instanceof Error,"cancel must have a valid reason");const i=new G.PromiseCapability;return this.streamControllers[s].cancelCall=i,this.streamControllers[s].isClosed=!0,h.postMessage({sourceName:Y,targetName:t,stream:cI.CANCEL,streamId:s,reason:U(Z)}),i.promise}},y)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}L=new WeakSet,yC=function(V){const o=V.streamId,y=this.sourceName,B=V.sourceName,s=this.comObj,Y=this,t=this.actionHandler[V.action],h={enqueue(Z,i=1,A){if(this.isCancelled)return;const d=this.desiredSize;this.desiredSize-=i,d>0&&this.desiredSize<=0&&(this.sinkCapability=new G.PromiseCapability,this.ready=this.sinkCapability.promise),s.postMessage({sourceName:y,targetName:B,stream:cI.ENQUEUE,streamId:o,chunk:Z},A)},close(){this.isCancelled||(this.isCancelled=!0,s.postMessage({sourceName:y,targetName:B,stream:cI.CLOSE,streamId:o}),delete Y.streamSinks[o])},error(Z){(0,G.assert)(Z instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,s.postMessage({sourceName:y,targetName:B,stream:cI.ERROR,streamId:o,reason:U(Z)}))},sinkCapability:new G.PromiseCapability,onPull:null,onCancel:null,isCancelled:!1,desiredSize:V.desiredSize,ready:null};h.sinkCapability.resolve(),h.ready=h.sinkCapability.promise,this.streamSinks[o]=h,new Promise(function(Z){Z(t(V.data,h))}).then(function(){s.postMessage({sourceName:y,targetName:B,stream:cI.START_COMPLETE,streamId:o,success:!0})},function(Z){s.postMessage({sourceName:y,targetName:B,stream:cI.START_COMPLETE,streamId:o,reason:U(Z)})})},HC=function(V){const o=V.streamId,y=this.sourceName,B=V.sourceName,s=this.comObj,Y=this.streamControllers[o],t=this.streamSinks[o];switch(V.stream){case cI.START_COMPLETE:V.success?Y.startCall.resolve():Y.startCall.reject(U(V.reason));break;case cI.PULL_COMPLETE:V.success?Y.pullCall.resolve():Y.pullCall.reject(U(V.reason));break;case cI.PULL:if(!t){s.postMessage({sourceName:y,targetName:B,stream:cI.PULL_COMPLETE,streamId:o,success:!0});break}t.desiredSize<=0&&V.desiredSize>0&&t.sinkCapability.resolve(),t.desiredSize=V.desiredSize,new Promise(function(h){var Z;h((Z=t.onPull)==null?void 0:Z.call(t))}).then(function(){s.postMessage({sourceName:y,targetName:B,stream:cI.PULL_COMPLETE,streamId:o,success:!0})},function(h){s.postMessage({sourceName:y,targetName:B,stream:cI.PULL_COMPLETE,streamId:o,reason:U(h)})});break;case cI.ENQUEUE:if((0,G.assert)(Y,"enqueue should have stream controller"),Y.isClosed)break;Y.controller.enqueue(V.chunk);break;case cI.CLOSE:if((0,G.assert)(Y,"close should have stream controller"),Y.isClosed)break;Y.isClosed=!0,Y.controller.close(),O(this,L,Rg).call(this,Y,o);break;case cI.ERROR:(0,G.assert)(Y,"error should have stream controller"),Y.controller.error(U(V.reason)),O(this,L,Rg).call(this,Y,o);break;case cI.CANCEL_COMPLETE:V.success?Y.cancelCall.resolve():Y.cancelCall.reject(U(V.reason)),O(this,L,Rg).call(this,Y,o);break;case cI.CANCEL:if(!t)break;new Promise(function(h){var Z;h((Z=t.onCancel)==null?void 0:Z.call(t,U(V.reason)))}).then(function(){s.postMessage({sourceName:y,targetName:B,stream:cI.CANCEL_COMPLETE,streamId:o,success:!0})},function(h){s.postMessage({sourceName:y,targetName:B,stream:cI.CANCEL_COMPLETE,streamId:o,reason:U(h)})}),t.sinkCapability.reject(U(V.reason)),t.isCancelled=!0,delete this.streamSinks[o];break;default:throw new Error("Unexpected stream case")}},Rg=async function(V,o){var y,B,s;await Promise.allSettled([(y=V.startCall)==null?void 0:y.promise,(B=V.pullCall)==null?void 0:B.promise,(s=V.cancelCall)==null?void 0:s.promise]),delete this.streamControllers[o]},b.MessageHandler=WI},(wI,b,ZI)=>{var cI,U;Object.defineProperty(b,"__esModule",{value:!0}),b.Metadata=void 0;var G=ZI(1);class R{constructor({parsedData:L,rawData:e}){_(this,cI);_(this,U);gI(this,cI,L),gI(this,U,e)}getRaw(){return I(this,U)}get(L){return I(this,cI).get(L)??null}getAll(){return(0,G.objectFromMap)(I(this,cI))}has(L){return I(this,cI).has(L)}}cI=new WeakMap,U=new WeakMap,b.Metadata=R},(wI,b,ZI)=>{var L,e,W,z,J,V,Pg;Object.defineProperty(b,"__esModule",{value:!0}),b.OptionalContentConfig=void 0;var G=ZI(1),R=ZI(8);const cI=Symbol("INTERNAL");class U{constructor(B,s){_(this,L,!0);this.name=B,this.intent=s}get visible(){return I(this,L)}_setVisible(B,s){B!==cI&&(0,G.unreachable)("Internal method `_setVisible` called."),gI(this,L,s)}}L=new WeakMap;class WI{constructor(B){_(this,V);_(this,e,null);_(this,W,new Map);_(this,z,null);_(this,J,null);if(this.name=null,this.creator=null,B!==null){this.name=B.name,this.creator=B.creator,gI(this,J,B.order);for(const s of B.groups)I(this,W).set(s.id,new U(s.name,s.intent));if(B.baseState==="OFF")for(const s of I(this,W).values())s._setVisible(cI,!1);for(const s of B.on)I(this,W).get(s)._setVisible(cI,!0);for(const s of B.off)I(this,W).get(s)._setVisible(cI,!1);gI(this,z,this.getHash())}}isVisible(B){if(I(this,W).size===0)return!0;if(!B)return(0,G.warn)("Optional content group not defined."),!0;if(B.type==="OCG")return I(this,W).has(B.id)?I(this,W).get(B.id).visible:((0,G.warn)(`Optional content group not found: ${B.id}`),!0);if(B.type==="OCMD"){if(B.expression)return O(this,V,Pg).call(this,B.expression);if(!B.policy||B.policy==="AnyOn"){for(const s of B.ids){if(!I(this,W).has(s))return(0,G.warn)(`Optional content group not found: ${s}`),!0;if(I(this,W).get(s).visible)return!0}return!1}else if(B.policy==="AllOn"){for(const s of B.ids){if(!I(this,W).has(s))return(0,G.warn)(`Optional content group not found: ${s}`),!0;if(!I(this,W).get(s).visible)return!1}return!0}else if(B.policy==="AnyOff"){for(const s of B.ids){if(!I(this,W).has(s))return(0,G.warn)(`Optional content group not found: ${s}`),!0;if(!I(this,W).get(s).visible)return!0}return!1}else if(B.policy==="AllOff"){for(const s of B.ids){if(!I(this,W).has(s))return(0,G.warn)(`Optional content group not found: ${s}`),!0;if(I(this,W).get(s).visible)return!1}return!0}return(0,G.warn)(`Unknown optional content policy ${B.policy}.`),!0}return(0,G.warn)(`Unknown group type ${B.type}.`),!0}setVisibility(B,s=!0){if(!I(this,W).has(B)){(0,G.warn)(`Optional content group not found: ${B}`);return}I(this,W).get(B)._setVisible(cI,!!s),gI(this,e,null)}get hasInitialVisibility(){return I(this,z)===null||this.getHash()===I(this,z)}getOrder(){return I(this,W).size?I(this,J)?I(this,J).slice():[...I(this,W).keys()]:null}getGroups(){return I(this,W).size>0?(0,G.objectFromMap)(I(this,W)):null}getGroup(B){return I(this,W).get(B)||null}getHash(){if(I(this,e)!==null)return I(this,e);const B=new R.MurmurHash3_64;for(const[s,Y]of I(this,W))B.update(`${s}:${Y.visible}`);return gI(this,e,B.hexdigest())}}e=new WeakMap,W=new WeakMap,z=new WeakMap,J=new WeakMap,V=new WeakSet,Pg=function(B){const s=B.length;if(s<2)return!0;const Y=B[0];for(let t=1;t<s;t++){const h=B[t];let Z;if(Array.isArray(h))Z=O(this,V,Pg).call(this,h);else if(I(this,W).has(h))Z=I(this,W).get(h).visible;else return(0,G.warn)(`Optional content group not found: ${h}`),!0;switch(Y){case"And":if(!Z)return!1;break;case"Or":if(Z)return!0;break;case"Not":return!Z;default:return!0}}return Y==="And"},b.OptionalContentConfig=WI},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.PDFDataTransportStream=void 0;var G=ZI(1),R=ZI(6);class cI{constructor({length:e,initialData:W,progressiveDone:z=!1,contentDispositionFilename:J=null,disableRange:V=!1,disableStream:o=!1},y){if((0,G.assert)(y,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=z,this._contentDispositionFilename=J,(W==null?void 0:W.length)>0){const B=W instanceof Uint8Array&&W.byteLength===W.buffer.byteLength?W.buffer:new Uint8Array(W).buffer;this._queuedChunks.push(B)}this._pdfDataRangeTransport=y,this._isStreamingSupported=!o,this._isRangeSupported=!V,this._contentLength=e,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((B,s)=>{this._onReceiveData({begin:B,chunk:s})}),this._pdfDataRangeTransport.addProgressListener((B,s)=>{this._onProgress({loaded:B,total:s})}),this._pdfDataRangeTransport.addProgressiveReadListener(B=>{this._onReceiveData({chunk:B})}),this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}_onReceiveData({begin:e,chunk:W}){const z=W instanceof Uint8Array&&W.byteLength===W.buffer.byteLength?W.buffer:new Uint8Array(W).buffer;if(e===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(z):this._queuedChunks.push(z);else{const J=this._rangeReaders.some(function(V){return V._begin!==e?!1:(V._enqueue(z),!0)});(0,G.assert)(J,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var e;return((e=this._fullRequestReader)==null?void 0:e._loaded)??0}_onProgress(e){var W,z,J,V;e.total===void 0?(z=(W=this._rangeReaders[0])==null?void 0:W.onProgress)==null||z.call(W,{loaded:e.loaded}):(V=(J=this._fullRequestReader)==null?void 0:J.onProgress)==null||V.call(J,{loaded:e.loaded,total:e.total})}_onProgressiveDone(){var e;(e=this._fullRequestReader)==null||e.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(e){const W=this._rangeReaders.indexOf(e);W>=0&&this._rangeReaders.splice(W,1)}getFullReader(){(0,G.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const e=this._queuedChunks;return this._queuedChunks=null,new U(this,e,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(e,W){if(W<=this._progressiveDataLength)return null;const z=new WI(this,e,W);return this._pdfDataRangeTransport.requestDataRange(e,W),this._rangeReaders.push(z),z}cancelAllRequests(e){var W;(W=this._fullRequestReader)==null||W.cancel(e);for(const z of this._rangeReaders.slice(0))z.cancel(e);this._pdfDataRangeTransport.abort()}}b.PDFDataTransportStream=cI;class U{constructor(e,W,z=!1,J=null){this._stream=e,this._done=z||!1,this._filename=(0,R.isPdfFile)(J)?J:null,this._queuedChunks=W||[],this._loaded=0;for(const V of this._queuedChunks)this._loaded+=V.byteLength;this._requests=[],this._headersReady=Promise.resolve(),e._fullRequestReader=this,this.onProgress=null}_enqueue(e){this._done||(this._requests.length>0?this._requests.shift().resolve({value:e,done:!1}):this._queuedChunks.push(e),this._loaded+=e.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const e=new G.PromiseCapability;return this._requests.push(e),e.promise}cancel(e){this._done=!0;for(const W of this._requests)W.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class WI{constructor(e,W,z){this._stream=e,this._begin=W,this._end=z,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(e){if(!this._done){if(this._requests.length===0)this._queuedChunk=e;else{this._requests.shift().resolve({value:e,done:!1});for(const z of this._requests)z.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const W=this._queuedChunk;return this._queuedChunk=null,{value:W,done:!1}}if(this._done)return{value:void 0,done:!0};const e=new G.PromiseCapability;return this._requests.push(e),e.promise}cancel(e){this._done=!0;for(const W of this._requests)W.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.PDFFetchStream=void 0;var G=ZI(1),R=ZI(20);function cI(z,J,V){return{method:"GET",headers:z,signal:V.signal,mode:"cors",credentials:J?"include":"same-origin",redirect:"follow"}}function U(z){const J=new Headers;for(const V in z){const o=z[V];o!==void 0&&J.append(V,o)}return J}function WI(z){return z instanceof Uint8Array?z.buffer:z instanceof ArrayBuffer?z:((0,G.warn)(`getArrayBuffer - unexpected data format: ${z}`),new Uint8Array(z).buffer)}class L{constructor(J){this.source=J,this.isHttp=/^https?:/i.test(J.url),this.httpHeaders=this.isHttp&&J.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var J;return((J=this._fullRequestReader)==null?void 0:J._loaded)??0}getFullReader(){return(0,G.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new e(this),this._fullRequestReader}getRangeReader(J,V){if(V<=this._progressiveDataLength)return null;const o=new W(this,J,V);return this._rangeRequestReaders.push(o),o}cancelAllRequests(J){var V;(V=this._fullRequestReader)==null||V.cancel(J);for(const o of this._rangeRequestReaders.slice(0))o.cancel(J)}}b.PDFFetchStream=L;class e{constructor(J){this._stream=J,this._reader=null,this._loaded=0,this._filename=null;const V=J.source;this._withCredentials=V.withCredentials||!1,this._contentLength=V.length,this._headersCapability=new G.PromiseCapability,this._disableRange=V.disableRange||!1,this._rangeChunkSize=V.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!V.disableStream,this._isRangeSupported=!V.disableRange,this._headers=U(this._stream.httpHeaders);const o=V.url;fetch(o,cI(this._headers,this._withCredentials,this._abortController)).then(y=>{if(!(0,R.validateResponseStatus)(y.status))throw(0,R.createResponseStatusError)(y.status,o);this._reader=y.body.getReader(),this._headersCapability.resolve();const B=t=>y.headers.get(t),{allowRangeRequests:s,suggestedLength:Y}=(0,R.validateRangeRequestCapabilities)({getResponseHeader:B,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=s,this._contentLength=Y||this._contentLength,this._filename=(0,R.extractFilenameFromHeader)(B),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new G.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var o;await this._headersCapability.promise;const{value:J,done:V}=await this._reader.read();return V?{value:J,done:V}:(this._loaded+=J.byteLength,(o=this.onProgress)==null||o.call(this,{loaded:this._loaded,total:this._contentLength}),{value:WI(J),done:!1})}cancel(J){var V;(V=this._reader)==null||V.cancel(J),this._abortController.abort()}}class W{constructor(J,V,o){this._stream=J,this._reader=null,this._loaded=0;const y=J.source;this._withCredentials=y.withCredentials||!1,this._readCapability=new G.PromiseCapability,this._isStreamingSupported=!y.disableStream,this._abortController=new AbortController,this._headers=U(this._stream.httpHeaders),this._headers.append("Range",`bytes=${V}-${o-1}`);const B=y.url;fetch(B,cI(this._headers,this._withCredentials,this._abortController)).then(s=>{if(!(0,R.validateResponseStatus)(s.status))throw(0,R.createResponseStatusError)(s.status,B);this._readCapability.resolve(),this._reader=s.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){var o;await this._readCapability.promise;const{value:J,done:V}=await this._reader.read();return V?{value:J,done:V}:(this._loaded+=J.byteLength,(o=this.onProgress)==null||o.call(this,{loaded:this._loaded}),{value:WI(J),done:!1})}cancel(J){var V;(V=this._reader)==null||V.cancel(J),this._abortController.abort()}}},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.createResponseStatusError=L,b.extractFilenameFromHeader=WI,b.validateRangeRequestCapabilities=U,b.validateResponseStatus=e;var G=ZI(1),R=ZI(21),cI=ZI(6);function U({getResponseHeader:W,isHttp:z,rangeChunkSize:J,disableRange:V}){const o={allowRangeRequests:!1,suggestedLength:void 0},y=parseInt(W("Content-Length"),10);return!Number.isInteger(y)||(o.suggestedLength=y,y<=2*J)||V||!z||W("Accept-Ranges")!=="bytes"||(W("Content-Encoding")||"identity")!=="identity"||(o.allowRangeRequests=!0),o}function WI(W){const z=W("Content-Disposition");if(z){let J=(0,R.getFilenameFromContentDispositionHeader)(z);if(J.includes("%"))try{J=decodeURIComponent(J)}catch{}if((0,cI.isPdfFile)(J))return J}return null}function L(W,z){return W===404||W===0&&z.startsWith("file:")?new G.MissingPDFException('Missing PDF "'+z+'".'):new G.UnexpectedResponseException(`Unexpected server response (${W}) while retrieving PDF "${z}".`,W)}function e(W){return W===200||W===206}},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.getFilenameFromContentDispositionHeader=R;var G=ZI(1);function R(cI){let U=!0,WI=L("filename\\*","i").exec(cI);if(WI){WI=WI[1];let y=J(WI);return y=unescape(y),y=V(y),y=o(y),W(y)}if(WI=z(cI),WI){const y=o(WI);return W(y)}if(WI=L("filename","i").exec(cI),WI){WI=WI[1];let y=J(WI);return y=o(y),W(y)}function L(y,B){return new RegExp("(?:^|;)\\s*"+y+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',B)}function e(y,B){if(y){if(!/^[\x00-\xFF]+$/.test(B))return B;try{const s=new TextDecoder(y,{fatal:!0}),Y=(0,G.stringToBytes)(B);B=s.decode(Y),U=!1}catch{}}return B}function W(y){return U&&/[\x80-\xff]/.test(y)&&(y=e("utf-8",y),U&&(y=e("iso-8859-1",y))),y}function z(y){const B=[];let s;const Y=L("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(s=Y.exec(y))!==null;){let[,h,Z,i]=s;if(h=parseInt(h,10),h in B){if(h===0)break;continue}B[h]=[Z,i]}const t=[];for(let h=0;h<B.length&&h in B;++h){let[Z,i]=B[h];i=J(i),Z&&(i=unescape(i),h===0&&(i=V(i))),t.push(i)}return t.join("")}function J(y){if(y.startsWith('"')){const B=y.slice(1).split('\\"');for(let s=0;s<B.length;++s){const Y=B[s].indexOf('"');Y!==-1&&(B[s]=B[s].slice(0,Y),B.length=s+1),B[s]=B[s].replaceAll(/\\(.)/g,"$1")}y=B.join('"')}return y}function V(y){const B=y.indexOf("'");if(B===-1)return y;const s=y.slice(0,B),t=y.slice(B+1).replace(/^[^']*'/,"");return e(s,t)}function o(y){return!y.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(y)?y:y.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(B,s,Y,t){if(Y==="q"||Y==="Q")return t=t.replaceAll("_"," "),t=t.replaceAll(/=([0-9a-fA-F]{2})/g,function(h,Z){return String.fromCharCode(parseInt(Z,16))}),e(s,t);try{t=atob(t)}catch{}return e(s,t)})}return""}},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.PDFNetworkStream=void 0;var G=ZI(1),R=ZI(20);const cI=200,U=206;function WI(J){const V=J.response;return typeof V!="string"?V:(0,G.stringToBytes)(V).buffer}class L{constructor(V,o={}){this.url=V,this.isHttp=/^https?:/i.test(V),this.httpHeaders=this.isHttp&&o.httpHeaders||Object.create(null),this.withCredentials=o.withCredentials||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(V,o,y){const B={begin:V,end:o};for(const s in y)B[s]=y[s];return this.request(B)}requestFull(V){return this.request(V)}request(V){const o=new XMLHttpRequest,y=this.currXhrId++,B=this.pendingRequests[y]={xhr:o};o.open("GET",this.url),o.withCredentials=this.withCredentials;for(const s in this.httpHeaders){const Y=this.httpHeaders[s];Y!==void 0&&o.setRequestHeader(s,Y)}return this.isHttp&&"begin"in V&&"end"in V?(o.setRequestHeader("Range",`bytes=${V.begin}-${V.end-1}`),B.expectedStatus=U):B.expectedStatus=cI,o.responseType="arraybuffer",V.onError&&(o.onerror=function(s){V.onError(o.status)}),o.onreadystatechange=this.onStateChange.bind(this,y),o.onprogress=this.onProgress.bind(this,y),B.onHeadersReceived=V.onHeadersReceived,B.onDone=V.onDone,B.onError=V.onError,B.onProgress=V.onProgress,o.send(null),y}onProgress(V,o){var B;const y=this.pendingRequests[V];y&&((B=y.onProgress)==null||B.call(y,o))}onStateChange(V,o){var h,Z,i;const y=this.pendingRequests[V];if(!y)return;const B=y.xhr;if(B.readyState>=2&&y.onHeadersReceived&&(y.onHeadersReceived(),delete y.onHeadersReceived),B.readyState!==4||!(V in this.pendingRequests))return;if(delete this.pendingRequests[V],B.status===0&&this.isHttp){(h=y.onError)==null||h.call(y,B.status);return}const s=B.status||cI;if(!(s===cI&&y.expectedStatus===U)&&s!==y.expectedStatus){(Z=y.onError)==null||Z.call(y,B.status);return}const t=WI(B);if(s===U){const A=B.getResponseHeader("Content-Range"),d=/bytes (\d+)-(\d+)\/(\d+)/.exec(A);y.onDone({begin:parseInt(d[1],10),chunk:t})}else t?y.onDone({begin:0,chunk:t}):(i=y.onError)==null||i.call(y,B.status)}getRequestXhr(V){return this.pendingRequests[V].xhr}isPendingRequest(V){return V in this.pendingRequests}abortRequest(V){const o=this.pendingRequests[V].xhr;delete this.pendingRequests[V],o.abort()}}class e{constructor(V){this._source=V,this._manager=new L(V.url,{httpHeaders:V.httpHeaders,withCredentials:V.withCredentials}),this._rangeChunkSize=V.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(V){const o=this._rangeRequestReaders.indexOf(V);o>=0&&this._rangeRequestReaders.splice(o,1)}getFullReader(){return(0,G.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new W(this._manager,this._source),this._fullRequestReader}getRangeReader(V,o){const y=new z(this._manager,V,o);return y.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(y),y}cancelAllRequests(V){var o;(o=this._fullRequestReader)==null||o.cancel(V);for(const y of this._rangeRequestReaders.slice(0))y.cancel(V)}}b.PDFNetworkStream=e;class W{constructor(V,o){this._manager=V;const y={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=o.url,this._fullRequestId=V.requestFull(y),this._headersReceivedCapability=new G.PromiseCapability,this._disableRange=o.disableRange||!1,this._contentLength=o.length,this._rangeChunkSize=o.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const V=this._fullRequestId,o=this._manager.getRequestXhr(V),y=Y=>o.getResponseHeader(Y),{allowRangeRequests:B,suggestedLength:s}=(0,R.validateRangeRequestCapabilities)({getResponseHeader:y,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});B&&(this._isRangeSupported=!0),this._contentLength=s||this._contentLength,this._filename=(0,R.extractFilenameFromHeader)(y),this._isRangeSupported&&this._manager.abortRequest(V),this._headersReceivedCapability.resolve()}_onDone(V){if(V&&(this._requests.length>0?this._requests.shift().resolve({value:V.chunk,done:!1}):this._cachedChunks.push(V.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const o of this._requests)o.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(V){this._storedError=(0,R.createResponseStatusError)(V,this._url),this._headersReceivedCapability.reject(this._storedError);for(const o of this._requests)o.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(V){var o;(o=this.onProgress)==null||o.call(this,{loaded:V.loaded,total:V.lengthComputable?V.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const V=new G.PromiseCapability;return this._requests.push(V),V.promise}cancel(V){this._done=!0,this._headersReceivedCapability.reject(V);for(const o of this._requests)o.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class z{constructor(V,o,y){this._manager=V;const B={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=V.url,this._requestId=V.requestRange(o,y,B),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){var V;(V=this.onClosed)==null||V.call(this,this)}_onDone(V){const o=V.chunk;this._requests.length>0?this._requests.shift().resolve({value:o,done:!1}):this._queuedChunk=o,this._done=!0;for(const y of this._requests)y.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(V){this._storedError=(0,R.createResponseStatusError)(V,this._url);for(const o of this._requests)o.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(V){var o;this.isStreamingSupported||(o=this.onProgress)==null||o.call(this,{loaded:V.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const o=this._queuedChunk;return this._queuedChunk=null,{value:o,done:!1}}if(this._done)return{value:void 0,done:!0};const V=new G.PromiseCapability;return this._requests.push(V),V.promise}cancel(V){this._done=!0;for(const o of this._requests)o.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.PDFNodeStream=void 0;var G=ZI(1),R=ZI(20);const cI=/^file:\/\/\/[a-zA-Z]:\//;function U(y){const B=require$$5,s=B.parse(y);return s.protocol==="file:"||s.host?s:/^[a-z]:[/\\]/i.test(y)?B.parse(`file:///${y}`):(s.host||(s.protocol="file:"),s)}class WI{constructor(B){this.source=B,this.url=U(B.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&B.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var B;return((B=this._fullRequestReader)==null?void 0:B._loaded)??0}getFullReader(){return(0,G.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new V(this):new z(this),this._fullRequestReader}getRangeReader(B,s){if(s<=this._progressiveDataLength)return null;const Y=this.isFsUrl?new o(this,B,s):new J(this,B,s);return this._rangeRequestReaders.push(Y),Y}cancelAllRequests(B){var s;(s=this._fullRequestReader)==null||s.cancel(B);for(const Y of this._rangeRequestReaders.slice(0))Y.cancel(B)}}b.PDFNodeStream=WI;class L{constructor(B){this._url=B.url,this._done=!1,this._storedError=null,this.onProgress=null;const s=B.source;this._contentLength=s.length,this._loaded=0,this._filename=null,this._disableRange=s.disableRange||!1,this._rangeChunkSize=s.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!s.disableStream,this._isRangeSupported=!s.disableRange,this._readableStream=null,this._readCapability=new G.PromiseCapability,this._headersCapability=new G.PromiseCapability}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var Y;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const B=this._readableStream.read();return B===null?(this._readCapability=new G.PromiseCapability,this.read()):(this._loaded+=B.length,(Y=this.onProgress)==null||Y.call(this,{loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(B).buffer,done:!1})}cancel(B){if(!this._readableStream){this._error(B);return}this._readableStream.destroy(B)}_error(B){this._storedError=B,this._readCapability.resolve()}_setReadableStream(B){this._readableStream=B,B.on("readable",()=>{this._readCapability.resolve()}),B.on("end",()=>{B.destroy(),this._done=!0,this._readCapability.resolve()}),B.on("error",s=>{this._error(s)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new G.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class e{constructor(B){this._url=B.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=new G.PromiseCapability;const s=B.source;this._isStreamingSupported=!s.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){var Y;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const B=this._readableStream.read();return B===null?(this._readCapability=new G.PromiseCapability,this.read()):(this._loaded+=B.length,(Y=this.onProgress)==null||Y.call(this,{loaded:this._loaded}),{value:new Uint8Array(B).buffer,done:!1})}cancel(B){if(!this._readableStream){this._error(B);return}this._readableStream.destroy(B)}_error(B){this._storedError=B,this._readCapability.resolve()}_setReadableStream(B){this._readableStream=B,B.on("readable",()=>{this._readCapability.resolve()}),B.on("end",()=>{B.destroy(),this._done=!0,this._readCapability.resolve()}),B.on("error",s=>{this._error(s)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function W(y,B){return{protocol:y.protocol,auth:y.auth,host:y.hostname,port:y.port,path:y.path,method:"GET",headers:B}}class z extends L{constructor(B){super(B);const s=Y=>{if(Y.statusCode===404){const i=new G.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=i,this._headersCapability.reject(i);return}this._headersCapability.resolve(),this._setReadableStream(Y);const t=i=>this._readableStream.headers[i.toLowerCase()],{allowRangeRequests:h,suggestedLength:Z}=(0,R.validateRangeRequestCapabilities)({getResponseHeader:t,isHttp:B.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=h,this._contentLength=Z||this._contentLength,this._filename=(0,R.extractFilenameFromHeader)(t)};if(this._request=null,this._url.protocol==="http:"){const Y=require$$5;this._request=Y.request(W(this._url,B.httpHeaders),s)}else{const Y=require$$5;this._request=Y.request(W(this._url,B.httpHeaders),s)}this._request.on("error",Y=>{this._storedError=Y,this._headersCapability.reject(Y)}),this._request.end()}}class J extends e{constructor(B,s,Y){super(B),this._httpHeaders={};for(const h in B.httpHeaders){const Z=B.httpHeaders[h];Z!==void 0&&(this._httpHeaders[h]=Z)}this._httpHeaders.Range=`bytes=${s}-${Y-1}`;const t=h=>{if(h.statusCode===404){const Z=new G.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=Z;return}this._setReadableStream(h)};if(this._request=null,this._url.protocol==="http:"){const h=require$$5;this._request=h.request(W(this._url,this._httpHeaders),t)}else{const h=require$$5;this._request=h.request(W(this._url,this._httpHeaders),t)}this._request.on("error",h=>{this._storedError=h}),this._request.end()}}class V extends L{constructor(B){super(B);let s=decodeURIComponent(this._url.path);cI.test(this._url.href)&&(s=s.replace(/^\//,""));const Y=require$$5;Y.lstat(s,(t,h)=>{if(t){t.code==="ENOENT"&&(t=new G.MissingPDFException(`Missing PDF "${s}".`)),this._storedError=t,this._headersCapability.reject(t);return}this._contentLength=h.size,this._setReadableStream(Y.createReadStream(s)),this._headersCapability.resolve()})}}class o extends e{constructor(B,s,Y){super(B);let t=decodeURIComponent(this._url.path);cI.test(this._url.href)&&(t=t.replace(/^\//,""));const h=require$$5;this._setReadableStream(h.createReadStream(t,{start:s,end:Y-1}))}}},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.SVGGraphics=void 0;var G=ZI(6),R=ZI(1);const cI={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},U="http://www.w3.org/XML/1998/namespace",WI="http://www.w3.org/1999/xlink",L=["butt","round","square"],e=["miter","round","bevel"],W=function(h,Z="",i=!1){if(URL.createObjectURL&&typeof Blob<"u"&&!i)return URL.createObjectURL(new Blob([h],{type:Z}));const A="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let d=`data:${Z};base64,`;for(let c=0,F=h.length;c<F;c+=3){const l=h[c]&255,X=h[c+1]&255,K=h[c+2]&255,lI=l>>2,j=(l&3)<<4|X>>4,r=c+1<F?(X&15)<<2|K>>6:64,T=c+2<F?K&63:64;d+=A[lI]+A[j]+A[r]+A[T]}return d},z=function(){const h=new Uint8Array([137,80,78,71,13,10,26,10]),Z=12,i=new Int32Array(256);for(let K=0;K<256;K++){let lI=K;for(let j=0;j<8;j++)lI=lI&1?3988292384^lI>>1&2147483647:lI>>1&2147483647;i[K]=lI}function A(K,lI,j){let r=-1;for(let T=lI;T<j;T++){const dI=(r^K[T])&255,M=i[dI];r=r>>>8^M}return r^-1}function d(K,lI,j,r){let T=r;const dI=lI.length;j[T]=dI>>24&255,j[T+1]=dI>>16&255,j[T+2]=dI>>8&255,j[T+3]=dI&255,T+=4,j[T]=K.charCodeAt(0)&255,j[T+1]=K.charCodeAt(1)&255,j[T+2]=K.charCodeAt(2)&255,j[T+3]=K.charCodeAt(3)&255,T+=4,j.set(lI,T),T+=lI.length;const M=A(j,r+4,T);j[T]=M>>24&255,j[T+1]=M>>16&255,j[T+2]=M>>8&255,j[T+3]=M&255}function c(K,lI,j){let r=1,T=0;for(let dI=lI;dI<j;++dI)r=(r+(K[dI]&255))%65521,T=(T+r)%65521;return T<<16|r}function F(K){if(!R.isNodeJS)return l(K);try{const lI=parseInt(process.versions.node)>=8?K:Buffer.from(K),j=require$$5.deflateSync(lI,{level:9});return j instanceof Uint8Array?j:new Uint8Array(j)}catch(lI){(0,R.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+lI)}return l(K)}function l(K){let lI=K.length;const j=65535,r=Math.ceil(lI/j),T=new Uint8Array(2+lI+r*5+4);let dI=0;T[dI++]=120,T[dI++]=156;let M=0;for(;lI>j;)T[dI++]=0,T[dI++]=255,T[dI++]=255,T[dI++]=0,T[dI++]=0,T.set(K.subarray(M,M+j),dI),dI+=j,M+=j,lI-=j;T[dI++]=1,T[dI++]=lI&255,T[dI++]=lI>>8&255,T[dI++]=~lI&65535&255,T[dI++]=(~lI&65535)>>8&255,T.set(K.subarray(M),dI),dI+=K.length-M;const k=c(K,0,K.length);return T[dI++]=k>>24&255,T[dI++]=k>>16&255,T[dI++]=k>>8&255,T[dI++]=k&255,T}function X(K,lI,j,r){const T=K.width,dI=K.height;let M,k,P;const N=K.data;switch(lI){case R.ImageKind.GRAYSCALE_1BPP:k=0,M=1,P=T+7>>3;break;case R.ImageKind.RGB_24BPP:k=2,M=8,P=T*3;break;case R.ImageKind.RGBA_32BPP:k=6,M=8,P=T*4;break;default:throw new Error("invalid format")}const g=new Uint8Array((1+P)*dI);let C=0,m=0;for(let bI=0;bI<dI;++bI)g[C++]=0,g.set(N.subarray(m,m+P),C),m+=P,C+=P;if(lI===R.ImageKind.GRAYSCALE_1BPP&&r){C=0;for(let bI=0;bI<dI;bI++){C++;for(let sI=0;sI<P;sI++)g[C++]^=255}}const u=new Uint8Array([T>>24&255,T>>16&255,T>>8&255,T&255,dI>>24&255,dI>>16&255,dI>>8&255,dI&255,M,k,0,0,0]),n=F(g),D=h.length+Z*3+u.length+n.length,x=new Uint8Array(D);let CI=0;return x.set(h,CI),CI+=h.length,d("IHDR",u,x,CI),CI+=Z+u.length,d("IDATA",n,x,CI),CI+=Z+n.length,d("IEND",new Uint8Array(0),x,CI),W(x,"image/png",j)}return function(lI,j,r){const T=lI.kind===void 0?R.ImageKind.GRAYSCALE_1BPP:lI.kind;return X(lI,T,j,r)}}();class J{constructor(){this.fontSizeScale=1,this.fontWeight=cI.fontWeight,this.fontSize=0,this.textMatrix=R.IDENTITY_MATRIX,this.fontMatrix=R.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=R.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=cI.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(Z,i){this.x=Z,this.y=i}}function V(h){let Z=[];const i=[];for(const A of h){if(A.fn==="save"){Z.push({fnId:92,fn:"group",items:[]}),i.push(Z),Z=Z.at(-1).items;continue}A.fn==="restore"?Z=i.pop():Z.push(A)}return Z}function o(h){if(Number.isInteger(h))return h.toString();const Z=h.toFixed(10);let i=Z.length-1;if(Z[i]!=="0")return Z;do i--;while(Z[i]==="0");return Z.substring(0,Z[i]==="."?i:i+1)}function y(h){if(h[4]===0&&h[5]===0){if(h[1]===0&&h[2]===0)return h[0]===1&&h[3]===1?"":`scale(${o(h[0])} ${o(h[3])})`;if(h[0]===h[3]&&h[1]===-h[2]){const Z=Math.acos(h[0])*180/Math.PI;return`rotate(${o(Z)})`}}else if(h[0]===1&&h[1]===0&&h[2]===0&&h[3]===1)return`translate(${o(h[4])} ${o(h[5])})`;return`matrix(${o(h[0])} ${o(h[1])} ${o(h[2])} ${o(h[3])} ${o(h[4])} ${o(h[5])})`}let B=0,s=0,Y=0;class t{constructor(Z,i,A=!1){(0,G.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."),this.svgFactory=new G.DOMSVGFactory,this.current=new J,this.transformMatrix=R.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=Z,this.objs=i,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!A,this._operatorIdMapping=[];for(const d in R.OPS)this._operatorIdMapping[R.OPS[d]]=d}getObject(Z,i=null){return typeof Z=="string"?Z.startsWith("g_")?this.commonObjs.get(Z):this.objs.get(Z):i}save(){this.transformStack.push(this.transformMatrix);const Z=this.current;this.extraStack.push(Z),this.current=Z.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(Z){this.save(),this.executeOpTree(Z),this.restore()}loadDependencies(Z){const i=Z.fnArray,A=Z.argsArray;for(let d=0,c=i.length;d<c;d++)if(i[d]===R.OPS.dependency)for(const F of A[d]){const l=F.startsWith("g_")?this.commonObjs:this.objs,X=new Promise(K=>{l.get(F,K)});this.current.dependencies.push(X)}return Promise.all(this.current.dependencies)}transform(Z,i,A,d,c,F){const l=[Z,i,A,d,c,F];this.transformMatrix=R.Util.transform(this.transformMatrix,l),this.tgrp=null}getSVG(Z,i){this.viewport=i;const A=this._initialize(i);return this.loadDependencies(Z).then(()=>(this.transformMatrix=R.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(Z)),A))}convertOpList(Z){const i=this._operatorIdMapping,A=Z.argsArray,d=Z.fnArray,c=[];for(let F=0,l=d.length;F<l;F++){const X=d[F];c.push({fnId:X,fn:i[X],args:A[F]})}return V(c)}executeOpTree(Z){for(const i of Z){const A=i.fn,d=i.fnId,c=i.args;switch(d|0){case R.OPS.beginText:this.beginText();break;case R.OPS.dependency:break;case R.OPS.setLeading:this.setLeading(c);break;case R.OPS.setLeadingMoveText:this.setLeadingMoveText(c[0],c[1]);break;case R.OPS.setFont:this.setFont(c);break;case R.OPS.showText:this.showText(c[0]);break;case R.OPS.showSpacedText:this.showText(c[0]);break;case R.OPS.endText:this.endText();break;case R.OPS.moveText:this.moveText(c[0],c[1]);break;case R.OPS.setCharSpacing:this.setCharSpacing(c[0]);break;case R.OPS.setWordSpacing:this.setWordSpacing(c[0]);break;case R.OPS.setHScale:this.setHScale(c[0]);break;case R.OPS.setTextMatrix:this.setTextMatrix(c[0],c[1],c[2],c[3],c[4],c[5]);break;case R.OPS.setTextRise:this.setTextRise(c[0]);break;case R.OPS.setTextRenderingMode:this.setTextRenderingMode(c[0]);break;case R.OPS.setLineWidth:this.setLineWidth(c[0]);break;case R.OPS.setLineJoin:this.setLineJoin(c[0]);break;case R.OPS.setLineCap:this.setLineCap(c[0]);break;case R.OPS.setMiterLimit:this.setMiterLimit(c[0]);break;case R.OPS.setFillRGBColor:this.setFillRGBColor(c[0],c[1],c[2]);break;case R.OPS.setStrokeRGBColor:this.setStrokeRGBColor(c[0],c[1],c[2]);break;case R.OPS.setStrokeColorN:this.setStrokeColorN(c);break;case R.OPS.setFillColorN:this.setFillColorN(c);break;case R.OPS.shadingFill:this.shadingFill(c[0]);break;case R.OPS.setDash:this.setDash(c[0],c[1]);break;case R.OPS.setRenderingIntent:this.setRenderingIntent(c[0]);break;case R.OPS.setFlatness:this.setFlatness(c[0]);break;case R.OPS.setGState:this.setGState(c[0]);break;case R.OPS.fill:this.fill();break;case R.OPS.eoFill:this.eoFill();break;case R.OPS.stroke:this.stroke();break;case R.OPS.fillStroke:this.fillStroke();break;case R.OPS.eoFillStroke:this.eoFillStroke();break;case R.OPS.clip:this.clip("nonzero");break;case R.OPS.eoClip:this.clip("evenodd");break;case R.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case R.OPS.paintImageXObject:this.paintImageXObject(c[0]);break;case R.OPS.paintInlineImageXObject:this.paintInlineImageXObject(c[0]);break;case R.OPS.paintImageMaskXObject:this.paintImageMaskXObject(c[0]);break;case R.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(c[0],c[1]);break;case R.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case R.OPS.closePath:this.closePath();break;case R.OPS.closeStroke:this.closeStroke();break;case R.OPS.closeFillStroke:this.closeFillStroke();break;case R.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case R.OPS.nextLine:this.nextLine();break;case R.OPS.transform:this.transform(c[0],c[1],c[2],c[3],c[4],c[5]);break;case R.OPS.constructPath:this.constructPath(c[0],c[1]);break;case R.OPS.endPath:this.endPath();break;case 92:this.group(i.items);break;default:(0,R.warn)(`Unimplemented operator ${A}`);break}}}setWordSpacing(Z){this.current.wordSpacing=Z}setCharSpacing(Z){this.current.charSpacing=Z}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(Z,i,A,d,c,F){const l=this.current;l.textMatrix=l.lineMatrix=[Z,i,A,d,c,F],l.textMatrixScale=Math.hypot(Z,i),l.x=l.lineX=0,l.y=l.lineY=0,l.xcoords=[],l.ycoords=[],l.tspan=this.svgFactory.createElement("svg:tspan"),l.tspan.setAttributeNS(null,"font-family",l.fontFamily),l.tspan.setAttributeNS(null,"font-size",`${o(l.fontSize)}px`),l.tspan.setAttributeNS(null,"y",o(-l.y)),l.txtElement=this.svgFactory.createElement("svg:text"),l.txtElement.append(l.tspan)}beginText(){const Z=this.current;Z.x=Z.lineX=0,Z.y=Z.lineY=0,Z.textMatrix=R.IDENTITY_MATRIX,Z.lineMatrix=R.IDENTITY_MATRIX,Z.textMatrixScale=1,Z.tspan=this.svgFactory.createElement("svg:tspan"),Z.txtElement=this.svgFactory.createElement("svg:text"),Z.txtgrp=this.svgFactory.createElement("svg:g"),Z.xcoords=[],Z.ycoords=[]}moveText(Z,i){const A=this.current;A.x=A.lineX+=Z,A.y=A.lineY+=i,A.xcoords=[],A.ycoords=[],A.tspan=this.svgFactory.createElement("svg:tspan"),A.tspan.setAttributeNS(null,"font-family",A.fontFamily),A.tspan.setAttributeNS(null,"font-size",`${o(A.fontSize)}px`),A.tspan.setAttributeNS(null,"y",o(-A.y))}showText(Z){const i=this.current,A=i.font,d=i.fontSize;if(d===0)return;const c=i.fontSizeScale,F=i.charSpacing,l=i.wordSpacing,X=i.fontDirection,K=i.textHScale*X,lI=A.vertical,j=lI?1:-1,r=A.defaultVMetrics,T=d*i.fontMatrix[0];let dI=0;for(const P of Z){if(P===null){dI+=X*l;continue}else if(typeof P=="number"){dI+=j*P*d/1e3;continue}const N=(P.isSpace?l:0)+F,g=P.fontChar;let C,m,u=P.width;if(lI){let D;const x=P.vmetric||r;D=P.vmetric?x[1]:u*.5,D=-D*T;const CI=x[2]*T;u=x?-x[0]:u,C=D/c,m=(dI+CI)/c}else C=dI/c,m=0;(P.isInFont||A.missingFile)&&(i.xcoords.push(i.x+C),lI&&i.ycoords.push(-i.y+m),i.tspan.textContent+=g);const n=lI?u*T-N*X:u*T+N*X;dI+=n}i.tspan.setAttributeNS(null,"x",i.xcoords.map(o).join(" ")),lI?i.tspan.setAttributeNS(null,"y",i.ycoords.map(o).join(" ")):i.tspan.setAttributeNS(null,"y",o(-i.y)),lI?i.y-=dI:i.x+=dI*K,i.tspan.setAttributeNS(null,"font-family",i.fontFamily),i.tspan.setAttributeNS(null,"font-size",`${o(i.fontSize)}px`),i.fontStyle!==cI.fontStyle&&i.tspan.setAttributeNS(null,"font-style",i.fontStyle),i.fontWeight!==cI.fontWeight&&i.tspan.setAttributeNS(null,"font-weight",i.fontWeight);const M=i.textRenderingMode&R.TextRenderingMode.FILL_STROKE_MASK;if(M===R.TextRenderingMode.FILL||M===R.TextRenderingMode.FILL_STROKE?(i.fillColor!==cI.fillColor&&i.tspan.setAttributeNS(null,"fill",i.fillColor),i.fillAlpha<1&&i.tspan.setAttributeNS(null,"fill-opacity",i.fillAlpha)):i.textRenderingMode===R.TextRenderingMode.ADD_TO_PATH?i.tspan.setAttributeNS(null,"fill","transparent"):i.tspan.setAttributeNS(null,"fill","none"),M===R.TextRenderingMode.STROKE||M===R.TextRenderingMode.FILL_STROKE){const P=1/(i.textMatrixScale||1);this._setStrokeAttributes(i.tspan,P)}let k=i.textMatrix;i.textRise!==0&&(k=k.slice(),k[5]+=i.textRise),i.txtElement.setAttributeNS(null,"transform",`${y(k)} scale(${o(K)}, -1)`),i.txtElement.setAttributeNS(U,"xml:space","preserve"),i.txtElement.append(i.tspan),i.txtgrp.append(i.txtElement),this._ensureTransformGroup().append(i.txtElement)}setLeadingMoveText(Z,i){this.setLeading(-i),this.moveText(Z,i)}addFontStyle(Z){if(!Z.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.append(this.cssStyle));const i=W(Z.data,Z.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${Z.loadedName}"; src: url(${i}); }
`}setFont(Z){const i=this.current,A=this.commonObjs.get(Z[0]);let d=Z[1];i.font=A,this.embedFonts&&!A.missingFile&&!this.embeddedFonts[A.loadedName]&&(this.addFontStyle(A),this.embeddedFonts[A.loadedName]=A),i.fontMatrix=A.fontMatrix||R.FONT_IDENTITY_MATRIX;let c="normal";A.black?c="900":A.bold&&(c="bold");const F=A.italic?"italic":"normal";d<0?(d=-d,i.fontDirection=-1):i.fontDirection=1,i.fontSize=d,i.fontFamily=A.loadedName,i.fontWeight=c,i.fontStyle=F,i.tspan=this.svgFactory.createElement("svg:tspan"),i.tspan.setAttributeNS(null,"y",o(-i.y)),i.xcoords=[],i.ycoords=[]}endText(){var i;const Z=this.current;Z.textRenderingMode&R.TextRenderingMode.ADD_TO_PATH_FLAG&&((i=Z.txtElement)!=null&&i.hasChildNodes())&&(Z.element=Z.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(Z){Z>0&&(this.current.lineWidth=Z)}setLineCap(Z){this.current.lineCap=L[Z]}setLineJoin(Z){this.current.lineJoin=e[Z]}setMiterLimit(Z){this.current.miterLimit=Z}setStrokeAlpha(Z){this.current.strokeAlpha=Z}setStrokeRGBColor(Z,i,A){this.current.strokeColor=R.Util.makeHexColor(Z,i,A)}setFillAlpha(Z){this.current.fillAlpha=Z}setFillRGBColor(Z,i,A){this.current.fillColor=R.Util.makeHexColor(Z,i,A),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(Z){this.current.strokeColor=this._makeColorN_Pattern(Z)}setFillColorN(Z){this.current.fillColor=this._makeColorN_Pattern(Z)}shadingFill(Z){const{width:i,height:A}=this.viewport,d=R.Util.inverseTransform(this.transformMatrix),[c,F,l,X]=R.Util.getAxialAlignedBoundingBox([0,0,i,A],d),K=this.svgFactory.createElement("svg:rect");K.setAttributeNS(null,"x",c),K.setAttributeNS(null,"y",F),K.setAttributeNS(null,"width",l-c),K.setAttributeNS(null,"height",X-F),K.setAttributeNS(null,"fill",this._makeShadingPattern(Z)),this.current.fillAlpha<1&&K.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().append(K)}_makeColorN_Pattern(Z){return Z[0]==="TilingPattern"?this._makeTilingPattern(Z):this._makeShadingPattern(Z)}_makeTilingPattern(Z){const i=Z[1],A=Z[2],d=Z[3]||R.IDENTITY_MATRIX,[c,F,l,X]=Z[4],K=Z[5],lI=Z[6],j=Z[7],r=`shading${Y++}`,[T,dI,M,k]=R.Util.normalizeRect([...R.Util.applyTransform([c,F],d),...R.Util.applyTransform([l,X],d)]),[P,N]=R.Util.singularValueDecompose2dScale(d),g=K*P,C=lI*N,m=this.svgFactory.createElement("svg:pattern");m.setAttributeNS(null,"id",r),m.setAttributeNS(null,"patternUnits","userSpaceOnUse"),m.setAttributeNS(null,"width",g),m.setAttributeNS(null,"height",C),m.setAttributeNS(null,"x",`${T}`),m.setAttributeNS(null,"y",`${dI}`);const u=this.svg,n=this.transformMatrix,D=this.current.fillColor,x=this.current.strokeColor,CI=this.svgFactory.create(M-T,k-dI);if(this.svg=CI,this.transformMatrix=d,j===2){const bI=R.Util.makeHexColor(...i);this.current.fillColor=bI,this.current.strokeColor=bI}return this.executeOpTree(this.convertOpList(A)),this.svg=u,this.transformMatrix=n,this.current.fillColor=D,this.current.strokeColor=x,m.append(CI.childNodes[0]),this.defs.append(m),`url(#${r})`}_makeShadingPattern(Z){switch(typeof Z=="string"&&(Z=this.objs.get(Z)),Z[0]){case"RadialAxial":const i=`shading${Y++}`,A=Z[3];let d;switch(Z[1]){case"axial":const c=Z[4],F=Z[5];d=this.svgFactory.createElement("svg:linearGradient"),d.setAttributeNS(null,"id",i),d.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),d.setAttributeNS(null,"x1",c[0]),d.setAttributeNS(null,"y1",c[1]),d.setAttributeNS(null,"x2",F[0]),d.setAttributeNS(null,"y2",F[1]);break;case"radial":const l=Z[4],X=Z[5],K=Z[6],lI=Z[7];d=this.svgFactory.createElement("svg:radialGradient"),d.setAttributeNS(null,"id",i),d.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),d.setAttributeNS(null,"cx",X[0]),d.setAttributeNS(null,"cy",X[1]),d.setAttributeNS(null,"r",lI),d.setAttributeNS(null,"fx",l[0]),d.setAttributeNS(null,"fy",l[1]),d.setAttributeNS(null,"fr",K);break;default:throw new Error(`Unknown RadialAxial type: ${Z[1]}`)}for(const c of A){const F=this.svgFactory.createElement("svg:stop");F.setAttributeNS(null,"offset",c[0]),F.setAttributeNS(null,"stop-color",c[1]),d.append(F)}return this.defs.append(d),`url(#${i})`;case"Mesh":return(0,R.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${Z[0]}`)}}setDash(Z,i){this.current.dashArray=Z,this.current.dashPhase=i}constructPath(Z,i){const A=this.current;let d=A.x,c=A.y,F=[],l=0;for(const X of Z)switch(X|0){case R.OPS.rectangle:d=i[l++],c=i[l++];const K=i[l++],lI=i[l++],j=d+K,r=c+lI;F.push("M",o(d),o(c),"L",o(j),o(c),"L",o(j),o(r),"L",o(d),o(r),"Z");break;case R.OPS.moveTo:d=i[l++],c=i[l++],F.push("M",o(d),o(c));break;case R.OPS.lineTo:d=i[l++],c=i[l++],F.push("L",o(d),o(c));break;case R.OPS.curveTo:d=i[l+4],c=i[l+5],F.push("C",o(i[l]),o(i[l+1]),o(i[l+2]),o(i[l+3]),o(d),o(c)),l+=6;break;case R.OPS.curveTo2:F.push("C",o(d),o(c),o(i[l]),o(i[l+1]),o(i[l+2]),o(i[l+3])),d=i[l+2],c=i[l+3],l+=4;break;case R.OPS.curveTo3:d=i[l+2],c=i[l+3],F.push("C",o(i[l]),o(i[l+1]),o(d),o(c),o(d),o(c)),l+=4;break;case R.OPS.closePath:F.push("Z");break}F=F.join(" "),A.path&&Z.length>0&&Z[0]!==R.OPS.rectangle&&Z[0]!==R.OPS.moveTo?F=A.path.getAttributeNS(null,"d")+F:(A.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().append(A.path)),A.path.setAttributeNS(null,"d",F),A.path.setAttributeNS(null,"fill","none"),A.element=A.path,A.setCurrentPoint(d,c)}endPath(){const Z=this.current;if(Z.path=null,!this.pendingClip)return;if(!Z.element){this.pendingClip=null;return}const i=`clippath${B++}`,A=this.svgFactory.createElement("svg:clipPath");A.setAttributeNS(null,"id",i),A.setAttributeNS(null,"transform",y(this.transformMatrix));const d=Z.element.cloneNode(!0);if(this.pendingClip==="evenodd"?d.setAttributeNS(null,"clip-rule","evenodd"):d.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,A.append(d),this.defs.append(A),Z.activeClipUrl){Z.clipGroup=null;for(const c of this.extraStack)c.clipGroup=null;A.setAttributeNS(null,"clip-path",Z.activeClipUrl)}Z.activeClipUrl=`url(#${i})`,this.tgrp=null}clip(Z){this.pendingClip=Z}closePath(){const Z=this.current;if(Z.path){const i=`${Z.path.getAttributeNS(null,"d")}Z`;Z.path.setAttributeNS(null,"d",i)}}setLeading(Z){this.current.leading=-Z}setTextRise(Z){this.current.textRise=Z}setTextRenderingMode(Z){this.current.textRenderingMode=Z}setHScale(Z){this.current.textHScale=Z/100}setRenderingIntent(Z){}setFlatness(Z){}setGState(Z){for(const[i,A]of Z)switch(i){case"LW":this.setLineWidth(A);break;case"LC":this.setLineCap(A);break;case"LJ":this.setLineJoin(A);break;case"ML":this.setMiterLimit(A);break;case"D":this.setDash(A[0],A[1]);break;case"RI":this.setRenderingIntent(A);break;case"FL":this.setFlatness(A);break;case"Font":this.setFont(A);break;case"CA":this.setStrokeAlpha(A);break;case"ca":this.setFillAlpha(A);break;default:(0,R.warn)(`Unimplemented graphic state operator ${i}`);break}}fill(){const Z=this.current;Z.element&&(Z.element.setAttributeNS(null,"fill",Z.fillColor),Z.element.setAttributeNS(null,"fill-opacity",Z.fillAlpha),this.endPath())}stroke(){const Z=this.current;Z.element&&(this._setStrokeAttributes(Z.element),Z.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(Z,i=1){const A=this.current;let d=A.dashArray;i!==1&&d.length>0&&(d=d.map(function(c){return i*c})),Z.setAttributeNS(null,"stroke",A.strokeColor),Z.setAttributeNS(null,"stroke-opacity",A.strokeAlpha),Z.setAttributeNS(null,"stroke-miterlimit",o(A.miterLimit)),Z.setAttributeNS(null,"stroke-linecap",A.lineCap),Z.setAttributeNS(null,"stroke-linejoin",A.lineJoin),Z.setAttributeNS(null,"stroke-width",o(i*A.lineWidth)+"px"),Z.setAttributeNS(null,"stroke-dasharray",d.map(o).join(" ")),Z.setAttributeNS(null,"stroke-dashoffset",o(i*A.dashPhase)+"px")}eoFill(){var Z;(Z=this.current.element)==null||Z.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){var Z;(Z=this.current.element)==null||Z.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const Z=this.svgFactory.createElement("svg:rect");Z.setAttributeNS(null,"x","0"),Z.setAttributeNS(null,"y","0"),Z.setAttributeNS(null,"width","1px"),Z.setAttributeNS(null,"height","1px"),Z.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().append(Z)}paintImageXObject(Z){const i=this.getObject(Z);if(!i){(0,R.warn)(`Dependent image with object ID ${Z} is not ready yet`);return}this.paintInlineImageXObject(i)}paintInlineImageXObject(Z,i){const A=Z.width,d=Z.height,c=z(Z,this.forceDataSchema,!!i),F=this.svgFactory.createElement("svg:rect");F.setAttributeNS(null,"x","0"),F.setAttributeNS(null,"y","0"),F.setAttributeNS(null,"width",o(A)),F.setAttributeNS(null,"height",o(d)),this.current.element=F,this.clip("nonzero");const l=this.svgFactory.createElement("svg:image");l.setAttributeNS(WI,"xlink:href",c),l.setAttributeNS(null,"x","0"),l.setAttributeNS(null,"y",o(-d)),l.setAttributeNS(null,"width",o(A)+"px"),l.setAttributeNS(null,"height",o(d)+"px"),l.setAttributeNS(null,"transform",`scale(${o(1/A)} ${o(-1/d)})`),i?i.append(l):this._ensureTransformGroup().append(l)}paintImageMaskXObject(Z){const i=this.getObject(Z.data,Z);if(i.bitmap){(0,R.warn)("paintImageMaskXObject: ImageBitmap support is not implemented, ensure that the `isOffscreenCanvasSupported` API parameter is disabled.");return}const A=this.current,d=i.width,c=i.height,F=A.fillColor;A.maskId=`mask${s++}`;const l=this.svgFactory.createElement("svg:mask");l.setAttributeNS(null,"id",A.maskId);const X=this.svgFactory.createElement("svg:rect");X.setAttributeNS(null,"x","0"),X.setAttributeNS(null,"y","0"),X.setAttributeNS(null,"width",o(d)),X.setAttributeNS(null,"height",o(c)),X.setAttributeNS(null,"fill",F),X.setAttributeNS(null,"mask",`url(#${A.maskId})`),this.defs.append(l),this._ensureTransformGroup().append(X),this.paintInlineImageXObject(i,l)}paintFormXObjectBegin(Z,i){if(Array.isArray(Z)&&Z.length===6&&this.transform(Z[0],Z[1],Z[2],Z[3],Z[4],Z[5]),i){const A=i[2]-i[0],d=i[3]-i[1],c=this.svgFactory.createElement("svg:rect");c.setAttributeNS(null,"x",i[0]),c.setAttributeNS(null,"y",i[1]),c.setAttributeNS(null,"width",o(A)),c.setAttributeNS(null,"height",o(d)),this.current.element=c,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(Z){const i=this.svgFactory.create(Z.width,Z.height),A=this.svgFactory.createElement("svg:defs");i.append(A),this.defs=A;const d=this.svgFactory.createElement("svg:g");return d.setAttributeNS(null,"transform",y(Z.transform)),i.append(d),this.svg=d,i}_ensureClipGroup(){if(!this.current.clipGroup){const Z=this.svgFactory.createElement("svg:g");Z.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.append(Z),this.current.clipGroup=Z}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",y(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().append(this.tgrp):this.svg.append(this.tgrp)),this.tgrp}}b.SVGGraphics=t},(wI,b)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.XfaText=void 0;class ZI{static textContent(R){const cI=[],U={items:cI,styles:Object.create(null)};function WI(L){var z;if(!L)return;let e=null;const W=L.name;if(W==="#text")e=L.value;else if(ZI.shouldBuildText(W))(z=L==null?void 0:L.attributes)!=null&&z.textContent?e=L.attributes.textContent:L.value&&(e=L.value);else return;if(e!==null&&cI.push({str:e}),!!L.children)for(const J of L.children)WI(J)}return WI(R),U}static shouldBuildText(R){return!(R==="textarea"||R==="input"||R==="option"||R==="select")}}b.XfaText=ZI},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.TextLayerRenderTask=void 0,b.renderTextLayer=y,b.updateTextLayer=B;var G=ZI(1),R=ZI(6);const cI=1e5,U=30,WI=.8,L=new Map;function e(s,Y){let t;if(Y&&G.FeatureTest.isOffscreenCanvasSupported)t=new OffscreenCanvas(s,s).getContext("2d",{alpha:!1});else{const h=document.createElement("canvas");h.width=h.height=s,t=h.getContext("2d",{alpha:!1})}return t}function W(s,Y){const t=L.get(s);if(t)return t;const h=e(U,Y);h.font=`${U}px ${s}`;const Z=h.measureText("");let i=Z.fontBoundingBoxAscent,A=Math.abs(Z.fontBoundingBoxDescent);if(i){const c=i/(i+A);return L.set(s,c),h.canvas.width=h.canvas.height=0,c}h.strokeStyle="red",h.clearRect(0,0,U,U),h.strokeText("g",0,0);let d=h.getImageData(0,0,U,U).data;A=0;for(let c=d.length-1-3;c>=0;c-=4)if(d[c]>0){A=Math.ceil(c/4/U);break}h.clearRect(0,0,U,U),h.strokeText("A",0,U),d=h.getImageData(0,0,U,U).data,i=0;for(let c=0,F=d.length;c<F;c+=4)if(d[c]>0){i=U-Math.floor(c/4/U);break}if(h.canvas.width=h.canvas.height=0,i){const c=i/(i+A);return L.set(s,c),c}return L.set(s,WI),WI}function z(s,Y,t){const h=document.createElement("span"),Z={angle:0,canvasWidth:0,hasText:Y.str!=="",hasEOL:Y.hasEOL,fontSize:0};s._textDivs.push(h);const i=G.Util.transform(s._transform,Y.transform);let A=Math.atan2(i[1],i[0]);const d=t[Y.fontName];d.vertical&&(A+=Math.PI/2);const c=Math.hypot(i[2],i[3]),F=c*W(d.fontFamily,s._isOffscreenCanvasSupported);let l,X;A===0?(l=i[4],X=i[5]-F):(l=i[4]+F*Math.sin(A),X=i[5]-F*Math.cos(A));const K="calc(var(--scale-factor)*",lI=h.style;s._container===s._rootContainer?(lI.left=`${(100*l/s._pageWidth).toFixed(2)}%`,lI.top=`${(100*X/s._pageHeight).toFixed(2)}%`):(lI.left=`${K}${l.toFixed(2)}px)`,lI.top=`${K}${X.toFixed(2)}px)`),lI.fontSize=`${K}${c.toFixed(2)}px)`,lI.fontFamily=d.fontFamily,Z.fontSize=c,h.setAttribute("role","presentation"),h.textContent=Y.str,h.dir=Y.dir,s._fontInspectorEnabled&&(h.dataset.fontName=Y.fontName),A!==0&&(Z.angle=A*(180/Math.PI));let j=!1;if(Y.str.length>1)j=!0;else if(Y.str!==" "&&Y.transform[0]!==Y.transform[3]){const r=Math.abs(Y.transform[0]),T=Math.abs(Y.transform[3]);r!==T&&Math.max(r,T)/Math.min(r,T)>1.5&&(j=!0)}j&&(Z.canvasWidth=d.vertical?Y.height:Y.width),s._textDivProperties.set(h,Z),s._isReadableStream&&s._layoutText(h)}function J(s){const{div:Y,scale:t,properties:h,ctx:Z,prevFontSize:i,prevFontFamily:A}=s,{style:d}=Y;let c="";if(h.canvasWidth!==0&&h.hasText){const{fontFamily:F}=d,{canvasWidth:l,fontSize:X}=h;(i!==X||A!==F)&&(Z.font=`${X*t}px ${F}`,s.prevFontSize=X,s.prevFontFamily=F);const{width:K}=Z.measureText(Y.textContent);K>0&&(c=`scaleX(${l*t/K})`)}h.angle!==0&&(c=`rotate(${h.angle}deg) ${c}`),c.length>0&&(d.transform=c)}function V(s){if(s._canceled)return;const Y=s._textDivs,t=s._capability;if(Y.length>cI){t.resolve();return}if(!s._isReadableStream)for(const Z of Y)s._layoutText(Z);t.resolve()}class o{constructor({textContentSource:Y,container:t,viewport:h,textDivs:Z,textDivProperties:i,textContentItemsStr:A,isOffscreenCanvasSupported:d}){var K;this._textContentSource=Y,this._isReadableStream=Y instanceof ReadableStream,this._container=this._rootContainer=t,this._textDivs=Z||[],this._textContentItemsStr=A||[],this._isOffscreenCanvasSupported=d,this._fontInspectorEnabled=!!((K=globalThis.FontInspector)!=null&&K.enabled),this._reader=null,this._textDivProperties=i||new WeakMap,this._canceled=!1,this._capability=new G.PromiseCapability,this._layoutTextParams={prevFontSize:null,prevFontFamily:null,div:null,scale:h.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:e(0,d)};const{pageWidth:c,pageHeight:F,pageX:l,pageY:X}=h.rawDims;this._transform=[1,0,0,-1,-l,X+F],this._pageWidth=c,this._pageHeight=F,(0,R.setLayerDimensions)(t,h),this._capability.promise.finally(()=>{this._layoutTextParams=null}).catch(()=>{})}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new G.AbortException("TextLayer task cancelled.")).catch(()=>{}),this._reader=null),this._capability.reject(new G.AbortException("TextLayer task cancelled."))}_processItems(Y,t){for(const h of Y){if(h.str===void 0){if(h.type==="beginMarkedContentProps"||h.type==="beginMarkedContent"){const Z=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),h.id!==null&&this._container.setAttribute("id",`${h.id}`),Z.append(this._container)}else h.type==="endMarkedContent"&&(this._container=this._container.parentNode);continue}this._textContentItemsStr.push(h.str),z(this,h,t)}}_layoutText(Y){const t=this._layoutTextParams.properties=this._textDivProperties.get(Y);if(this._layoutTextParams.div=Y,J(this._layoutTextParams),t.hasText&&this._container.append(Y),t.hasEOL){const h=document.createElement("br");h.setAttribute("role","presentation"),this._container.append(h)}}_render(){const Y=new G.PromiseCapability;let t=Object.create(null);if(this._isReadableStream){const h=()=>{this._reader.read().then(({value:Z,done:i})=>{if(i){Y.resolve();return}Object.assign(t,Z.styles),this._processItems(Z.items,t),h()},Y.reject)};this._reader=this._textContentSource.getReader(),h()}else if(this._textContentSource){const{items:h,styles:Z}=this._textContentSource;this._processItems(h,Z),Y.resolve()}else throw new Error('No "textContentSource" parameter specified.');Y.promise.then(()=>{t=null,V(this)},this._capability.reject)}}b.TextLayerRenderTask=o;function y(s){!s.textContentSource&&(s.textContent||s.textContentStream)&&((0,R.deprecated)("The TextLayerRender `textContent`/`textContentStream` parameters will be removed in the future, please use `textContentSource` instead."),s.textContentSource=s.textContent||s.textContentStream);const{container:Y,viewport:t}=s,h=getComputedStyle(Y),Z=h.getPropertyValue("visibility"),i=parseFloat(h.getPropertyValue("--scale-factor"));Z==="visible"&&(!i||Math.abs(i-t.scale)>1e-5)&&console.error("The `--scale-factor` CSS-variable must be set, to the same value as `viewport.scale`, either on the `container`-element itself or higher up in the DOM.");const A=new o(s);return A._render(),A}function B({container:s,viewport:Y,textDivs:t,textDivProperties:h,isOffscreenCanvasSupported:Z,mustRotate:i=!0,mustRescale:A=!0}){if(i&&(0,R.setLayerDimensions)(s,{rotation:Y.rotation}),A){const d=e(0,Z),F={prevFontSize:null,prevFontFamily:null,div:null,scale:Y.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:d};for(const l of t)F.properties=h.get(l),F.div=l,J(F)}}},(wI,b,ZI)=>{var W,z,J,V,o,y,B,s,Y,t,h,fg,yg,qg,_g;Object.defineProperty(b,"__esModule",{value:!0}),b.AnnotationEditorLayer=void 0;var G=ZI(1),R=ZI(4),cI=ZI(28),U=ZI(33),WI=ZI(6),L=ZI(34);const c=class c{constructor({uiManager:l,pageIndex:X,div:K,accessibilityManager:lI,annotationLayer:j,viewport:r,l10n:T}){_(this,h);_(this,W);_(this,z,!1);_(this,J,null);_(this,V,this.pointerup.bind(this));_(this,o,this.pointerdown.bind(this));_(this,y,new Map);_(this,B,!1);_(this,s,!1);_(this,Y,!1);_(this,t);const dI=[cI.FreeTextEditor,U.InkEditor,L.StampEditor];if(!c._initialized){c._initialized=!0;for(const M of dI)M.initialize(T)}l.registerEditorTypes(dI),gI(this,t,l),this.pageIndex=X,this.div=K,gI(this,W,lI),gI(this,J,j),this.viewport=r,I(this,t).addLayer(this)}get isEmpty(){return I(this,y).size===0}updateToolbar(l){I(this,t).updateToolbar(l)}updateMode(l=I(this,t).getMode()){O(this,h,_g).call(this),l===G.AnnotationEditorType.INK?(this.addInkEditorIfNeeded(!1),this.disableClick()):this.enableClick(),l!==G.AnnotationEditorType.NONE&&(this.div.classList.toggle("freeTextEditing",l===G.AnnotationEditorType.FREETEXT),this.div.classList.toggle("inkEditing",l===G.AnnotationEditorType.INK),this.div.classList.toggle("stampEditing",l===G.AnnotationEditorType.STAMP),this.div.hidden=!1)}addInkEditorIfNeeded(l){if(!l&&I(this,t).getMode()!==G.AnnotationEditorType.INK)return;if(!l){for(const K of I(this,y).values())if(K.isEmpty()){K.setInBackground();return}}O(this,h,yg).call(this,{offsetX:0,offsetY:0},!1).setInBackground()}setEditingState(l){I(this,t).setEditingState(l)}addCommands(l){I(this,t).addCommands(l)}enable(){this.div.style.pointerEvents="auto";const l=new Set;for(const K of I(this,y).values())K.enableEditing(),K.annotationElementId&&l.add(K.annotationElementId);if(!I(this,J))return;const X=I(this,J).getEditableAnnotations();for(const K of X){if(K.hide(),I(this,t).isDeletedAnnotationElement(K.data.id)||l.has(K.data.id))continue;const lI=this.deserialize(K);lI&&(this.addOrRebuild(lI),lI.enableEditing())}}disable(){var X;gI(this,Y,!0),this.div.style.pointerEvents="none";const l=new Set;for(const K of I(this,y).values()){if(K.disableEditing(),!K.annotationElementId||K.serialize()!==null){l.add(K.annotationElementId);continue}(X=this.getEditableAnnotation(K.annotationElementId))==null||X.show(),K.remove()}if(I(this,J)){const K=I(this,J).getEditableAnnotations();for(const lI of K){const{id:j}=lI.data;l.has(j)||I(this,t).isDeletedAnnotationElement(j)||lI.show()}}O(this,h,_g).call(this),this.isEmpty&&(this.div.hidden=!0),gI(this,Y,!1)}getEditableAnnotation(l){var X;return((X=I(this,J))==null?void 0:X.getEditableAnnotation(l))||null}setActiveEditor(l){I(this,t).getActive()!==l&&I(this,t).setActiveEditor(l)}enableClick(){this.div.addEventListener("pointerdown",I(this,o)),this.div.addEventListener("pointerup",I(this,V))}disableClick(){this.div.removeEventListener("pointerdown",I(this,o)),this.div.removeEventListener("pointerup",I(this,V))}attach(l){I(this,y).set(l.id,l);const{annotationElementId:X}=l;X&&I(this,t).isDeletedAnnotationElement(X)&&I(this,t).removeDeletedAnnotationElement(l)}detach(l){var X;I(this,y).delete(l.id),(X=I(this,W))==null||X.removePointerInTextLayer(l.contentDiv),!I(this,Y)&&l.annotationElementId&&I(this,t).addDeletedAnnotationElement(l)}remove(l){this.detach(l),I(this,t).removeEditor(l),l.div.contains(document.activeElement)&&setTimeout(()=>{I(this,t).focusMainContainer()},0),l.div.remove(),l.isAttachedToDOM=!1,I(this,s)||this.addInkEditorIfNeeded(!1)}changeParent(l){var X;l.parent!==this&&(l.annotationElementId&&(I(this,t).addDeletedAnnotationElement(l.annotationElementId),R.AnnotationEditor.deleteAnnotationElement(l),l.annotationElementId=null),this.attach(l),(X=l.parent)==null||X.detach(l),l.setParent(this),l.div&&l.isAttachedToDOM&&(l.div.remove(),this.div.append(l.div)))}add(l){if(this.changeParent(l),I(this,t).addEditor(l),this.attach(l),!l.isAttachedToDOM){const X=l.render();this.div.append(X),l.isAttachedToDOM=!0}l.fixAndSetPosition(),l.onceAdded(),I(this,t).addToAnnotationStorage(l)}moveEditorInDOM(l){var K;if(!l.isAttachedToDOM)return;const{activeElement:X}=document;l.div.contains(X)&&(l._focusEventsAllowed=!1,setTimeout(()=>{l.div.contains(document.activeElement)?l._focusEventsAllowed=!0:(l.div.addEventListener("focusin",()=>{l._focusEventsAllowed=!0},{once:!0}),X.focus())},0)),l._structTreeParentId=(K=I(this,W))==null?void 0:K.moveElementInDOM(this.div,l.div,l.contentDiv,!0)}addOrRebuild(l){l.needsToBeRebuilt()?l.rebuild():this.add(l)}addUndoableEditor(l){const X=()=>l._uiManager.rebuild(l),K=()=>{l.remove()};this.addCommands({cmd:X,undo:K,mustExec:!1})}getNextId(){return I(this,t).getId()}pasteEditor(l,X){I(this,t).updateToolbar(l),I(this,t).updateMode(l);const{offsetX:K,offsetY:lI}=O(this,h,qg).call(this),j=this.getNextId(),r=O(this,h,fg).call(this,{parent:this,id:j,x:K,y:lI,uiManager:I(this,t),isCentered:!0,...X});r&&this.add(r)}deserialize(l){switch(l.annotationType??l.annotationEditorType){case G.AnnotationEditorType.FREETEXT:return cI.FreeTextEditor.deserialize(l,this,I(this,t));case G.AnnotationEditorType.INK:return U.InkEditor.deserialize(l,this,I(this,t));case G.AnnotationEditorType.STAMP:return L.StampEditor.deserialize(l,this,I(this,t))}return null}addNewEditor(){O(this,h,yg).call(this,O(this,h,qg).call(this),!0)}setSelected(l){I(this,t).setSelected(l)}toggleSelected(l){I(this,t).toggleSelected(l)}isSelected(l){return I(this,t).isSelected(l)}unselect(l){I(this,t).unselect(l)}pointerup(l){const{isMac:X}=G.FeatureTest.platform;if(!(l.button!==0||l.ctrlKey&&X)&&l.target===this.div&&I(this,B)){if(gI(this,B,!1),!I(this,z)){gI(this,z,!0);return}if(I(this,t).getMode()===G.AnnotationEditorType.STAMP){I(this,t).unselectAll();return}O(this,h,yg).call(this,l,!1)}}pointerdown(l){if(I(this,B)){gI(this,B,!1);return}const{isMac:X}=G.FeatureTest.platform;if(l.button!==0||l.ctrlKey&&X||l.target!==this.div)return;gI(this,B,!0);const K=I(this,t).getActive();gI(this,z,!K||K.isEmpty())}findNewParent(l,X,K){const lI=I(this,t).findParent(X,K);return lI===null||lI===this?!1:(lI.changeParent(l),!0)}destroy(){var l,X;((l=I(this,t).getActive())==null?void 0:l.parent)===this&&(I(this,t).commitOrRemove(),I(this,t).setActiveEditor(null));for(const K of I(this,y).values())(X=I(this,W))==null||X.removePointerInTextLayer(K.contentDiv),K.setParent(null),K.isAttachedToDOM=!1,K.div.remove();this.div=null,I(this,y).clear(),I(this,t).removeLayer(this)}render({viewport:l}){this.viewport=l,(0,WI.setLayerDimensions)(this.div,l);for(const X of I(this,t).getEditors(this.pageIndex))this.add(X);this.updateMode()}update({viewport:l}){I(this,t).commitOrRemove(),this.viewport=l,(0,WI.setLayerDimensions)(this.div,{rotation:l.rotation}),this.updateMode()}get pageDimensions(){const{pageWidth:l,pageHeight:X}=this.viewport.rawDims;return[l,X]}};W=new WeakMap,z=new WeakMap,J=new WeakMap,V=new WeakMap,o=new WeakMap,y=new WeakMap,B=new WeakMap,s=new WeakMap,Y=new WeakMap,t=new WeakMap,h=new WeakSet,fg=function(l){switch(I(this,t).getMode()){case G.AnnotationEditorType.FREETEXT:return new cI.FreeTextEditor(l);case G.AnnotationEditorType.INK:return new U.InkEditor(l);case G.AnnotationEditorType.STAMP:return new L.StampEditor(l)}return null},yg=function(l,X){const K=this.getNextId(),lI=O(this,h,fg).call(this,{parent:this,id:K,x:l.offsetX,y:l.offsetY,uiManager:I(this,t),isCentered:X});return lI&&this.add(lI),lI},qg=function(){const{x:l,y:X,width:K,height:lI}=this.div.getBoundingClientRect(),j=Math.max(0,l),r=Math.max(0,X),T=Math.min(window.innerWidth,l+K),dI=Math.min(window.innerHeight,X+lI),M=(j+T)/2-l,k=(r+dI)/2-X,[P,N]=this.viewport.rotation%180===0?[M,k]:[k,M];return{offsetX:P,offsetY:N}},_g=function(){gI(this,s,!0);for(const l of I(this,y).values())l.isEmpty()&&l.remove();gI(this,s,!1)},fI(c,"_initialized",!1);let e=c;b.AnnotationEditorLayer=e},(wI,b,ZI)=>{var L,e,W,z,J,V,o,y,B,s,MC,uC,nC,wg,$g,DC,IC;Object.defineProperty(b,"__esModule",{value:!0}),b.FreeTextEditor=void 0;var G=ZI(1),R=ZI(5),cI=ZI(4),U=ZI(29);const c=class c extends cI.AnnotationEditor{constructor(X){super({...X,name:"freeTextEditor"});_(this,s);_(this,L,this.editorDivBlur.bind(this));_(this,e,this.editorDivFocus.bind(this));_(this,W,this.editorDivInput.bind(this));_(this,z,this.editorDivKeydown.bind(this));_(this,J);_(this,V,"");_(this,o,`${this.id}-editor`);_(this,y);_(this,B,null);gI(this,J,X.color||c._defaultColor||cI.AnnotationEditor._defaultLineColor),gI(this,y,X.fontSize||c._defaultFontSize)}static get _keyboardManager(){const X=c.prototype,K=r=>r.isEmpty(),lI=R.AnnotationEditorUIManager.TRANSLATE_SMALL,j=R.AnnotationEditorUIManager.TRANSLATE_BIG;return(0,G.shadow)(this,"_keyboardManager",new R.KeyboardManager([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],X.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],X.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],X._translateEmpty,{args:[-lI,0],checker:K}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],X._translateEmpty,{args:[-j,0],checker:K}],[["ArrowRight","mac+ArrowRight"],X._translateEmpty,{args:[lI,0],checker:K}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],X._translateEmpty,{args:[j,0],checker:K}],[["ArrowUp","mac+ArrowUp"],X._translateEmpty,{args:[0,-lI],checker:K}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],X._translateEmpty,{args:[0,-j],checker:K}],[["ArrowDown","mac+ArrowDown"],X._translateEmpty,{args:[0,lI],checker:K}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],X._translateEmpty,{args:[0,j],checker:K}]]))}static initialize(X){cI.AnnotationEditor.initialize(X,{strings:["free_text2_default_content","editor_free_text2_aria_label"]});const K=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(K.getPropertyValue("--freetext-padding"))}static updateDefaultParams(X,K){switch(X){case G.AnnotationEditorParamsType.FREETEXT_SIZE:c._defaultFontSize=K;break;case G.AnnotationEditorParamsType.FREETEXT_COLOR:c._defaultColor=K;break}}updateParams(X,K){switch(X){case G.AnnotationEditorParamsType.FREETEXT_SIZE:O(this,s,MC).call(this,K);break;case G.AnnotationEditorParamsType.FREETEXT_COLOR:O(this,s,uC).call(this,K);break}}static get defaultPropertiesToUpdate(){return[[G.AnnotationEditorParamsType.FREETEXT_SIZE,c._defaultFontSize],[G.AnnotationEditorParamsType.FREETEXT_COLOR,c._defaultColor||cI.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[G.AnnotationEditorParamsType.FREETEXT_SIZE,I(this,y)],[G.AnnotationEditorParamsType.FREETEXT_COLOR,I(this,J)]]}_translateEmpty(X,K){this._uiManager.translateSelectedEditors(X,K,!0)}getInitialTranslation(){const X=this.parentScale;return[-c._internalPadding*X,-(c._internalPadding+I(this,y))*X]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(G.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant"),this.editorDiv.addEventListener("keydown",I(this,z)),this.editorDiv.addEventListener("focus",I(this,e)),this.editorDiv.addEventListener("blur",I(this,L)),this.editorDiv.addEventListener("input",I(this,W)))}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",I(this,o)),this._isDraggable=!0,this.editorDiv.removeEventListener("keydown",I(this,z)),this.editorDiv.removeEventListener("focus",I(this,e)),this.editorDiv.removeEventListener("blur",I(this,L)),this.editorDiv.removeEventListener("input",I(this,W)),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freeTextEditing"))}focusin(X){this._focusEventsAllowed&&(super.focusin(X),X.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(){var X;if(this.width){O(this,s,IC).call(this);return}this.enableEditMode(),this.editorDiv.focus(),(X=this._initialOptions)!=null&&X.isCentered&&this.center(),this._initialOptions=null}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freeTextEditing")),super.remove()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const X=I(this,V),K=gI(this,V,O(this,s,nC).call(this).trimEnd());if(X===K)return;const lI=j=>{if(gI(this,V,j),!j){this.remove();return}O(this,s,$g).call(this),this._uiManager.rebuild(this),O(this,s,wg).call(this)};this.addCommands({cmd:()=>{lI(K)},undo:()=>{lI(X)},mustExec:!1}),O(this,s,wg).call(this)}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}dblclick(X){this.enterInEditMode()}keydown(X){X.target===this.div&&X.key==="Enter"&&(this.enterInEditMode(),X.preventDefault())}editorDivKeydown(X){c._keyboardManager.exec(this,X)}editorDivFocus(X){this.isEditing=!0}editorDivBlur(X){this.isEditing=!1}editorDivInput(X){this.parent.div.classList.toggle("freeTextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let X,K;this.width&&(X=this.x,K=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",I(this,o)),this.enableEditing(),cI.AnnotationEditor._l10nPromise.get("editor_free_text2_aria_label").then(j=>{var r;return(r=this.editorDiv)==null?void 0:r.setAttribute("aria-label",j)}),cI.AnnotationEditor._l10nPromise.get("free_text2_default_content").then(j=>{var r;return(r=this.editorDiv)==null?void 0:r.setAttribute("default-content",j)}),this.editorDiv.contentEditable=!0;const{style:lI}=this.editorDiv;if(lI.fontSize=`calc(${I(this,y)}px * var(--scale-factor))`,lI.color=I(this,J),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,R.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[j,r]=this.parentDimensions;if(this.annotationElementId){const{position:T}=I(this,B);let[dI,M]=this.getInitialTranslation();[dI,M]=this.pageTranslationToScreen(dI,M);const[k,P]=this.pageDimensions,[N,g]=this.pageTranslation;let C,m;switch(this.rotation){case 0:C=X+(T[0]-N)/k,m=K+this.height-(T[1]-g)/P;break;case 90:C=X+(T[0]-N)/k,m=K-(T[1]-g)/P,[dI,M]=[M,-dI];break;case 180:C=X-this.width+(T[0]-N)/k,m=K-(T[1]-g)/P,[dI,M]=[-dI,-M];break;case 270:C=X+(T[0]-N-this.height*P)/k,m=K+(T[1]-g-this.width*k)/P,[dI,M]=[-M,dI];break}this.setAt(C*j,m*r,dI,M)}else this.setAt(X*j,K*r,this.width*j,this.height*r);O(this,s,$g).call(this),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}get contentDiv(){return this.editorDiv}static deserialize(X,K,lI){let j=null;if(X instanceof U.FreeTextAnnotationElement){const{data:{defaultAppearanceData:{fontSize:T,fontColor:dI},rect:M,rotation:k,id:P},textContent:N,textPosition:g,parent:{page:{pageNumber:C}}}=X;if(!N||N.length===0)return null;j=X={annotationType:G.AnnotationEditorType.FREETEXT,color:Array.from(dI),fontSize:T,value:N.join(`
`),position:g,pageIndex:C-1,rect:M,rotation:k,id:P,deleted:!1}}const r=super.deserialize(X,K,lI);return gI(r,y,X.fontSize),gI(r,J,G.Util.makeHexColor(...X.color)),gI(r,V,X.value),r.annotationElementId=X.id||null,gI(r,B,j),r}serialize(X=!1){if(this.isEmpty())return null;if(this.deleted)return{pageIndex:this.pageIndex,id:this.annotationElementId,deleted:!0};const K=c._internalPadding*this.parentScale,lI=this.getRect(K,K),j=cI.AnnotationEditor._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:I(this,J)),r={annotationType:G.AnnotationEditorType.FREETEXT,color:j,fontSize:I(this,y),value:I(this,V),pageIndex:this.pageIndex,rect:lI,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return X?r:this.annotationElementId&&!O(this,s,DC).call(this,r)?null:(r.id=this.annotationElementId,r)}};L=new WeakMap,e=new WeakMap,W=new WeakMap,z=new WeakMap,J=new WeakMap,V=new WeakMap,o=new WeakMap,y=new WeakMap,B=new WeakMap,s=new WeakSet,MC=function(X){const K=j=>{this.editorDiv.style.fontSize=`calc(${j}px * var(--scale-factor))`,this.translate(0,-(j-I(this,y))*this.parentScale),gI(this,y,j),O(this,s,wg).call(this)},lI=I(this,y);this.addCommands({cmd:()=>{K(X)},undo:()=>{K(lI)},mustExec:!0,type:G.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},uC=function(X){const K=I(this,J);this.addCommands({cmd:()=>{gI(this,J,this.editorDiv.style.color=X)},undo:()=>{gI(this,J,this.editorDiv.style.color=K)},mustExec:!0,type:G.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},nC=function(){const X=this.editorDiv.getElementsByTagName("div");if(X.length===0)return this.editorDiv.innerText;const K=[];for(const lI of X)K.push(lI.innerText.replace(/\r\n?|\n/,""));return K.join(`
`)},wg=function(){const[X,K]=this.parentDimensions;let lI;if(this.isAttachedToDOM)lI=this.div.getBoundingClientRect();else{const{currentLayer:j,div:r}=this,T=r.style.display;r.style.display="hidden",j.div.append(this.div),lI=r.getBoundingClientRect(),r.remove(),r.style.display=T}this.rotation%180===this.parentRotation%180?(this.width=lI.width/X,this.height=lI.height/K):(this.width=lI.height/X,this.height=lI.width/K),this.fixAndSetPosition()},$g=function(){if(this.editorDiv.replaceChildren(),!!I(this,V))for(const X of I(this,V).split(`
`)){const K=document.createElement("div");K.append(X?document.createTextNode(X):document.createElement("br")),this.editorDiv.append(K)}},DC=function(X){const{value:K,fontSize:lI,color:j,rect:r,pageIndex:T}=I(this,B);return X.value!==K||X.fontSize!==lI||X.rect.some((dI,M)=>Math.abs(dI-r[M])>=1)||X.color.some((dI,M)=>dI!==j[M])||X.pageIndex!==T},IC=function(X=!1){if(!this.annotationElementId)return;if(O(this,s,wg).call(this),!X&&(this.width===0||this.height===0)){setTimeout(()=>O(this,s,IC).call(this,!0),0);return}const K=c._internalPadding*this.parentScale;I(this,B).rect=this.getRect(K,K)},fI(c,"_freeTextDefaultContent",""),fI(c,"_internalPadding",0),fI(c,"_defaultColor",null),fI(c,"_defaultFontSize",10),fI(c,"_type","freetext");let WI=c;b.FreeTextEditor=WI},(wI,b,ZI)=>{var m,n,lg,eC,CI,bI,sI,YI,XI,aI,f,$,w,p,v,q,mI,NI,hI,E,MI,yI,KC,Hg,gC,CC,JI,vI,rI,VI,II,AI,DI,AC,xI,S,BI,HI,pC,lC;Object.defineProperty(b,"__esModule",{value:!0}),b.StampAnnotationElement=b.InkAnnotationElement=b.FreeTextAnnotationElement=b.AnnotationLayer=void 0;var G=ZI(1),R=ZI(6),cI=ZI(3),U=ZI(30),WI=ZI(31),L=ZI(32);const e=1e3,W=9,z=new WeakSet;function J(nI){return{width:nI[2]-nI[0],height:nI[3]-nI[1]}}class V{static create(H){switch(H.data.annotationType){case G.AnnotationType.LINK:return new y(H);case G.AnnotationType.TEXT:return new B(H);case G.AnnotationType.WIDGET:switch(H.data.fieldType){case"Tx":return new Y(H);case"Btn":return H.data.radioButton?new Z(H):H.data.checkBox?new h(H):new i(H);case"Ch":return new A(H);case"Sig":return new t(H)}return new s(H);case G.AnnotationType.POPUP:return new d(H);case G.AnnotationType.FREETEXT:return new F(H);case G.AnnotationType.LINE:return new l(H);case G.AnnotationType.SQUARE:return new X(H);case G.AnnotationType.CIRCLE:return new K(H);case G.AnnotationType.POLYLINE:return new lI(H);case G.AnnotationType.CARET:return new r(H);case G.AnnotationType.INK:return new T(H);case G.AnnotationType.POLYGON:return new j(H);case G.AnnotationType.HIGHLIGHT:return new dI(H);case G.AnnotationType.UNDERLINE:return new M(H);case G.AnnotationType.SQUIGGLY:return new k(H);case G.AnnotationType.STRIKEOUT:return new P(H);case G.AnnotationType.STAMP:return new N(H);case G.AnnotationType.FILEATTACHMENT:return new g(H);default:return new o(H)}}}const u=class u{constructor(H,{isRenderable:a=!1,ignoreBorder:Q=!1,createQuadrilaterals:GI=!1}={}){_(this,m,!1);this.isRenderable=a,this.data=H.data,this.layer=H.layer,this.linkService=H.linkService,this.downloadManager=H.downloadManager,this.imageResourcesPath=H.imageResourcesPath,this.renderForms=H.renderForms,this.svgFactory=H.svgFactory,this.annotationStorage=H.annotationStorage,this.enableScripting=H.enableScripting,this.hasJSActions=H.hasJSActions,this._fieldObjects=H.fieldObjects,this.parent=H.parent,a&&(this.container=this._createContainer(Q)),GI&&this._createQuadrilaterals()}static _hasPopupData({titleObj:H,contentsObj:a,richText:Q}){return!!(H!=null&&H.str||a!=null&&a.str||Q!=null&&Q.str)}get hasPopupData(){return u._hasPopupData(this.data)}_createContainer(H){const{data:a,parent:{page:Q,viewport:GI}}=this,iI=document.createElement("section");iI.setAttribute("data-annotation-id",a.id),this instanceof s||(iI.tabIndex=e),iI.style.zIndex=this.parent.zIndex++,this.data.popupRef&&iI.setAttribute("aria-haspopup","dialog"),a.noRotate&&iI.classList.add("norotate");const{pageWidth:oI,pageHeight:RI,pageX:tI,pageY:KI}=GI.rawDims;if(!a.rect||this instanceof d){const{rotation:kI}=a;return!a.hasOwnCanvas&&kI!==0&&this.setRotation(kI,iI),iI}const{width:uI,height:QI}=J(a.rect),pI=G.Util.normalizeRect([a.rect[0],Q.view[3]-a.rect[1]+Q.view[1],a.rect[2],Q.view[3]-a.rect[3]+Q.view[1]]);if(!H&&a.borderStyle.width>0){iI.style.borderWidth=`${a.borderStyle.width}px`;const kI=a.borderStyle.horizontalCornerRadius,jI=a.borderStyle.verticalCornerRadius;if(kI>0||jI>0){const PI=`calc(${kI}px * var(--scale-factor)) / calc(${jI}px * var(--scale-factor))`;iI.style.borderRadius=PI}else if(this instanceof Z){const PI=`calc(${uI}px * var(--scale-factor)) / calc(${QI}px * var(--scale-factor))`;iI.style.borderRadius=PI}switch(a.borderStyle.style){case G.AnnotationBorderStyleType.SOLID:iI.style.borderStyle="solid";break;case G.AnnotationBorderStyleType.DASHED:iI.style.borderStyle="dashed";break;case G.AnnotationBorderStyleType.BEVELED:(0,G.warn)("Unimplemented border style: beveled");break;case G.AnnotationBorderStyleType.INSET:(0,G.warn)("Unimplemented border style: inset");break;case G.AnnotationBorderStyleType.UNDERLINE:iI.style.borderBottomStyle="solid";break}const EI=a.borderColor||null;EI?(gI(this,m,!0),iI.style.borderColor=G.Util.makeHexColor(EI[0]|0,EI[1]|0,EI[2]|0)):iI.style.borderWidth=0}iI.style.left=`${100*(pI[0]-tI)/oI}%`,iI.style.top=`${100*(pI[1]-KI)/RI}%`;const{rotation:FI}=a;return a.hasOwnCanvas||FI===0?(iI.style.width=`${100*uI/oI}%`,iI.style.height=`${100*QI/RI}%`):this.setRotation(FI,iI),iI}setRotation(H,a=this.container){if(!this.data.rect)return;const{pageWidth:Q,pageHeight:GI}=this.parent.viewport.rawDims,{width:iI,height:oI}=J(this.data.rect);let RI,tI;H%180===0?(RI=100*iI/Q,tI=100*oI/GI):(RI=100*oI/Q,tI=100*iI/GI),a.style.width=`${RI}%`,a.style.height=`${tI}%`,a.setAttribute("data-main-rotation",(360-H)%360)}get _commonActions(){const H=(a,Q,GI)=>{const iI=GI.detail[a],oI=iI[0],RI=iI.slice(1);GI.target.style[Q]=U.ColorConverters[`${oI}_HTML`](RI),this.annotationStorage.setValue(this.data.id,{[Q]:U.ColorConverters[`${oI}_rgb`](RI)})};return(0,G.shadow)(this,"_commonActions",{display:a=>{const{display:Q}=a.detail,GI=Q%2===1;this.container.style.visibility=GI?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:GI,noPrint:Q===1||Q===2})},print:a=>{this.annotationStorage.setValue(this.data.id,{noPrint:!a.detail.print})},hidden:a=>{const{hidden:Q}=a.detail;this.container.style.visibility=Q?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:Q,noView:Q})},focus:a=>{setTimeout(()=>a.target.focus({preventScroll:!1}),0)},userName:a=>{a.target.title=a.detail.userName},readonly:a=>{a.target.disabled=a.detail.readonly},required:a=>{this._setRequired(a.target,a.detail.required)},bgColor:a=>{H("bgColor","backgroundColor",a)},fillColor:a=>{H("fillColor","backgroundColor",a)},fgColor:a=>{H("fgColor","color",a)},textColor:a=>{H("textColor","color",a)},borderColor:a=>{H("borderColor","borderColor",a)},strokeColor:a=>{H("strokeColor","borderColor",a)},rotation:a=>{const Q=a.detail.rotation;this.setRotation(Q),this.annotationStorage.setValue(this.data.id,{rotation:Q})}})}_dispatchEventFromSandbox(H,a){const Q=this._commonActions;for(const GI of Object.keys(a.detail)){const iI=H[GI]||Q[GI];iI==null||iI(a)}}_setDefaultPropertiesFromJS(H){if(!this.enableScripting)return;const a=this.annotationStorage.getRawValue(this.data.id);if(!a)return;const Q=this._commonActions;for(const[GI,iI]of Object.entries(a)){const oI=Q[GI];if(oI){const RI={detail:{[GI]:iI},target:H};oI(RI),delete a[GI]}}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:H}=this.data;if(!H)return;const[a,Q,GI,iI]=this.data.rect;if(H.length===1){const[,{x:jI,y:EI},{x:PI,y:_I}]=H[0];if(GI===jI&&iI===EI&&a===PI&&Q===_I)return}const{style:oI}=this.container;let RI;if(I(this,m)){const{borderColor:jI,borderWidth:EI}=oI;oI.borderWidth=0,RI=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${jI}" stroke-width="${EI}">`],this.container.classList.add("hasBorder")}const tI=GI-a,KI=iI-Q,{svgFactory:uI}=this,QI=uI.createElement("svg");QI.classList.add("quadrilateralsContainer"),QI.setAttribute("width",0),QI.setAttribute("height",0);const pI=uI.createElement("defs");QI.append(pI);const FI=uI.createElement("clipPath"),kI=`clippath_${this.data.id}`;FI.setAttribute("id",kI),FI.setAttribute("clipPathUnits","objectBoundingBox"),pI.append(FI);for(const[,{x:jI,y:EI},{x:PI,y:_I}]of H){const qI=uI.createElement("rect"),Ig=(PI-a)/tI,Cg=(iI-EI)/KI,Ag=(jI-PI)/tI,WC=(EI-_I)/KI;qI.setAttribute("x",Ig),qI.setAttribute("y",Cg),qI.setAttribute("width",Ag),qI.setAttribute("height",WC),FI.append(qI),RI==null||RI.push(`<rect vector-effect="non-scaling-stroke" x="${Ig}" y="${Cg}" width="${Ag}" height="${WC}"/>`)}I(this,m)&&(RI.push("</g></svg>')"),oI.backgroundImage=RI.join("")),this.container.append(QI),this.container.style.clipPath=`url(#${kI})`}_createPopup(){const{container:H,data:a}=this;H.setAttribute("aria-haspopup","dialog");const Q=new d({data:{color:a.color,titleObj:a.titleObj,modificationDate:a.modificationDate,contentsObj:a.contentsObj,richText:a.richText,parentRect:a.rect,borderStyle:0,id:`popup_${a.id}`,rotation:a.rotation},parent:this.parent,elements:[this]});this.parent.div.append(Q.render())}render(){(0,G.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(H,a=null){const Q=[];if(this._fieldObjects){const GI=this._fieldObjects[H];if(GI)for(const{page:iI,id:oI,exportValues:RI}of GI){if(iI===-1||oI===a)continue;const tI=typeof RI=="string"?RI:null,KI=document.querySelector(`[data-element-id="${oI}"]`);if(KI&&!z.has(KI)){(0,G.warn)(`_getElementsByName - element not allowed: ${oI}`);continue}Q.push({id:oI,exportValue:tI,domElement:KI})}return Q}for(const GI of document.getElementsByName(H)){const{exportValue:iI}=GI,oI=GI.getAttribute("data-element-id");oI!==a&&z.has(GI)&&Q.push({id:oI,exportValue:iI,domElement:GI})}return Q}show(){var H;this.container&&(this.container.hidden=!1),(H=this.popup)==null||H.maybeShow()}hide(){var H;this.container&&(this.container.hidden=!0),(H=this.popup)==null||H.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const H=this.getElementsToTriggerPopup();if(Array.isArray(H))for(const a of H)a.classList.add("highlightArea");else H.classList.add("highlightArea")}_editOnDoubleClick(){const{annotationEditorType:H,data:{id:a}}=this;this.container.addEventListener("dblclick",()=>{var Q;(Q=this.linkService.eventBus)==null||Q.dispatch("switchannotationeditormode",{source:this,mode:H,editId:a})})}};m=new WeakMap;let o=u;class y extends o{constructor(a,Q=null){super(a,{isRenderable:!0,ignoreBorder:!!(Q!=null&&Q.ignoreBorder),createQuadrilaterals:!0});_(this,n);this.isTooltipOnly=a.data.isTooltipOnly}render(){const{data:a,linkService:Q}=this,GI=document.createElement("a");GI.setAttribute("data-element-id",a.id);let iI=!1;return a.url?(Q.addLinkAttributes(GI,a.url,a.newWindow),iI=!0):a.action?(this._bindNamedAction(GI,a.action),iI=!0):a.attachment?(this._bindAttachment(GI,a.attachment),iI=!0):a.setOCGState?(O(this,n,eC).call(this,GI,a.setOCGState),iI=!0):a.dest?(this._bindLink(GI,a.dest),iI=!0):(a.actions&&(a.actions.Action||a.actions["Mouse Up"]||a.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(GI,a),iI=!0),a.resetForm?(this._bindResetFormAction(GI,a.resetForm),iI=!0):this.isTooltipOnly&&!iI&&(this._bindLink(GI,""),iI=!0)),this.container.classList.add("linkAnnotation"),iI&&this.container.append(GI),this.container}_bindLink(a,Q){a.href=this.linkService.getDestinationHash(Q),a.onclick=()=>(Q&&this.linkService.goToDestination(Q),!1),(Q||Q==="")&&O(this,n,lg).call(this)}_bindNamedAction(a,Q){a.href=this.linkService.getAnchorUrl(""),a.onclick=()=>(this.linkService.executeNamedAction(Q),!1),O(this,n,lg).call(this)}_bindAttachment(a,Q){a.href=this.linkService.getAnchorUrl(""),a.onclick=()=>{var GI;return(GI=this.downloadManager)==null||GI.openOrDownloadData(this.container,Q.content,Q.filename),!1},O(this,n,lg).call(this)}_bindJSAction(a,Q){a.href=this.linkService.getAnchorUrl("");const GI=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const iI of Object.keys(Q.actions)){const oI=GI.get(iI);oI&&(a[oI]=()=>{var RI;return(RI=this.linkService.eventBus)==null||RI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:Q.id,name:iI}}),!1})}a.onclick||(a.onclick=()=>!1),O(this,n,lg).call(this)}_bindResetFormAction(a,Q){const GI=a.onclick;if(GI||(a.href=this.linkService.getAnchorUrl("")),O(this,n,lg).call(this),!this._fieldObjects){(0,G.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),GI||(a.onclick=()=>!1);return}a.onclick=()=>{var QI;GI==null||GI();const{fields:iI,refs:oI,include:RI}=Q,tI=[];if(iI.length!==0||oI.length!==0){const pI=new Set(oI);for(const FI of iI){const kI=this._fieldObjects[FI]||[];for(const{id:jI}of kI)pI.add(jI)}for(const FI of Object.values(this._fieldObjects))for(const kI of FI)pI.has(kI.id)===RI&&tI.push(kI)}else for(const pI of Object.values(this._fieldObjects))tI.push(...pI);const KI=this.annotationStorage,uI=[];for(const pI of tI){const{id:FI}=pI;switch(uI.push(FI),pI.type){case"text":{const jI=pI.defaultValue||"";KI.setValue(FI,{value:jI});break}case"checkbox":case"radiobutton":{const jI=pI.defaultValue===pI.exportValues;KI.setValue(FI,{value:jI});break}case"combobox":case"listbox":{const jI=pI.defaultValue||"";KI.setValue(FI,{value:jI});break}default:continue}const kI=document.querySelector(`[data-element-id="${FI}"]`);if(kI){if(!z.has(kI)){(0,G.warn)(`_bindResetFormAction - element not allowed: ${FI}`);continue}}else continue;kI.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((QI=this.linkService.eventBus)==null||QI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:uI,name:"ResetForm"}})),!1}}}n=new WeakSet,lg=function(){this.container.setAttribute("data-internal-link","")},eC=function(a,Q){a.href=this.linkService.getAnchorUrl(""),a.onclick=()=>(this.linkService.executeSetOCGState(Q),!1),O(this,n,lg).call(this)};class B extends o{constructor(H){super(H,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const H=document.createElement("img");return H.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",H.alt="[{{type}} Annotation]",H.dataset.l10nId="text_annotation_type",H.dataset.l10nArgs=JSON.stringify({type:this.data.name}),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(H),this.container}}class s extends o{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}showElementAndHideCanvas(H){var a;this.data.hasOwnCanvas&&(((a=H.previousSibling)==null?void 0:a.nodeName)==="CANVAS"&&(H.previousSibling.hidden=!0),H.hidden=!1)}_getKeyModifier(H){const{isWin:a,isMac:Q}=G.FeatureTest.platform;return a&&H.ctrlKey||Q&&H.metaKey}_setEventListener(H,a,Q,GI,iI){Q.includes("mouse")?H.addEventListener(Q,oI=>{var RI;(RI=this.linkService.eventBus)==null||RI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:GI,value:iI(oI),shift:oI.shiftKey,modifier:this._getKeyModifier(oI)}})}):H.addEventListener(Q,oI=>{var RI;if(Q==="blur"){if(!a.focused||!oI.relatedTarget)return;a.focused=!1}else if(Q==="focus"){if(a.focused)return;a.focused=!0}iI&&((RI=this.linkService.eventBus)==null||RI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:GI,value:iI(oI)}}))})}_setEventListeners(H,a,Q,GI){var iI,oI,RI;for(const[tI,KI]of Q)(KI==="Action"||(iI=this.data.actions)!=null&&iI[KI])&&((KI==="Focus"||KI==="Blur")&&(a||(a={focused:!1})),this._setEventListener(H,a,tI,KI,GI),KI==="Focus"&&!((oI=this.data.actions)!=null&&oI.Blur)?this._setEventListener(H,a,"blur","Blur",null):KI==="Blur"&&!((RI=this.data.actions)!=null&&RI.Focus)&&this._setEventListener(H,a,"focus","Focus",null))}_setBackgroundColor(H){const a=this.data.backgroundColor||null;H.style.backgroundColor=a===null?"transparent":G.Util.makeHexColor(a[0],a[1],a[2])}_setTextStyle(H){const a=["left","center","right"],{fontColor:Q}=this.data.defaultAppearanceData,GI=this.data.defaultAppearanceData.fontSize||W,iI=H.style;let oI;const RI=2,tI=KI=>Math.round(10*KI)/10;if(this.data.multiLine){const KI=Math.abs(this.data.rect[3]-this.data.rect[1]-RI),uI=Math.round(KI/(G.LINE_FACTOR*GI))||1,QI=KI/uI;oI=Math.min(GI,tI(QI/G.LINE_FACTOR))}else{const KI=Math.abs(this.data.rect[3]-this.data.rect[1]-RI);oI=Math.min(GI,tI(KI/G.LINE_FACTOR))}iI.fontSize=`calc(${oI}px * var(--scale-factor))`,iI.color=G.Util.makeHexColor(Q[0],Q[1],Q[2]),this.data.textAlignment!==null&&(iI.textAlign=a[this.data.textAlignment])}_setRequired(H,a){a?H.setAttribute("required",!0):H.removeAttribute("required"),H.setAttribute("aria-required",a)}}class Y extends s{constructor(H){const a=H.renderForms||!H.data.hasAppearance&&!!H.data.fieldValue;super(H,{isRenderable:a})}setPropertyOnSiblings(H,a,Q,GI){const iI=this.annotationStorage;for(const oI of this._getElementsByName(H.name,H.id))oI.domElement&&(oI.domElement[a]=Q),iI.setValue(oI.id,{[GI]:Q})}render(){var GI,iI;const H=this.annotationStorage,a=this.data.id;this.container.classList.add("textWidgetAnnotation");let Q=null;if(this.renderForms){const oI=H.getValue(a,{value:this.data.fieldValue});let RI=oI.value||"";const tI=H.getValue(a,{charLimit:this.data.maxLen}).charLimit;tI&&RI.length>tI&&(RI=RI.slice(0,tI));let KI=oI.formattedValue||((GI=this.data.textContent)==null?void 0:GI.join(`
`))||null;KI&&this.data.comb&&(KI=KI.replaceAll(/\s+/g,""));const uI={userValue:RI,formattedValue:KI,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(Q=document.createElement("textarea"),Q.textContent=KI??RI,this.data.doNotScroll&&(Q.style.overflowY="hidden")):(Q=document.createElement("input"),Q.type="text",Q.setAttribute("value",KI??RI),this.data.doNotScroll&&(Q.style.overflowX="hidden")),this.data.hasOwnCanvas&&(Q.hidden=!0),z.add(Q),Q.setAttribute("data-element-id",a),Q.disabled=this.data.readOnly,Q.name=this.data.fieldName,Q.tabIndex=e,this._setRequired(Q,this.data.required),tI&&(Q.maxLength=tI),Q.addEventListener("input",pI=>{H.setValue(a,{value:pI.target.value}),this.setPropertyOnSiblings(Q,"value",pI.target.value,"value"),uI.formattedValue=null}),Q.addEventListener("resetform",pI=>{const FI=this.data.defaultFieldValue??"";Q.value=uI.userValue=FI,uI.formattedValue=null});let QI=pI=>{const{formattedValue:FI}=uI;FI!=null&&(pI.target.value=FI),pI.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){Q.addEventListener("focus",FI=>{if(uI.focused)return;const{target:kI}=FI;uI.userValue&&(kI.value=uI.userValue),uI.lastCommittedValue=kI.value,uI.commitKey=1,uI.focused=!0}),Q.addEventListener("updatefromsandbox",FI=>{this.showElementAndHideCanvas(FI.target);const kI={value(jI){uI.userValue=jI.detail.value??"",H.setValue(a,{value:uI.userValue.toString()}),jI.target.value=uI.userValue},formattedValue(jI){const{formattedValue:EI}=jI.detail;uI.formattedValue=EI,EI!=null&&jI.target!==document.activeElement&&(jI.target.value=EI),H.setValue(a,{formattedValue:EI})},selRange(jI){jI.target.setSelectionRange(...jI.detail.selRange)},charLimit:jI=>{var qI;const{charLimit:EI}=jI.detail,{target:PI}=jI;if(EI===0){PI.removeAttribute("maxLength");return}PI.setAttribute("maxLength",EI);let _I=uI.userValue;!_I||_I.length<=EI||(_I=_I.slice(0,EI),PI.value=uI.userValue=_I,H.setValue(a,{value:_I}),(qI=this.linkService.eventBus)==null||qI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:a,name:"Keystroke",value:_I,willCommit:!0,commitKey:1,selStart:PI.selectionStart,selEnd:PI.selectionEnd}}))}};this._dispatchEventFromSandbox(kI,FI)}),Q.addEventListener("keydown",FI=>{var EI;uI.commitKey=1;let kI=-1;if(FI.key==="Escape"?kI=0:FI.key==="Enter"&&!this.data.multiLine?kI=2:FI.key==="Tab"&&(uI.commitKey=3),kI===-1)return;const{value:jI}=FI.target;uI.lastCommittedValue!==jI&&(uI.lastCommittedValue=jI,uI.userValue=jI,(EI=this.linkService.eventBus)==null||EI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:a,name:"Keystroke",value:jI,willCommit:!0,commitKey:kI,selStart:FI.target.selectionStart,selEnd:FI.target.selectionEnd}}))});const pI=QI;QI=null,Q.addEventListener("blur",FI=>{var jI;if(!uI.focused||!FI.relatedTarget)return;uI.focused=!1;const{value:kI}=FI.target;uI.userValue=kI,uI.lastCommittedValue!==kI&&((jI=this.linkService.eventBus)==null||jI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:a,name:"Keystroke",value:kI,willCommit:!0,commitKey:uI.commitKey,selStart:FI.target.selectionStart,selEnd:FI.target.selectionEnd}})),pI(FI)}),(iI=this.data.actions)!=null&&iI.Keystroke&&Q.addEventListener("beforeinput",FI=>{var Cg;uI.lastCommittedValue=null;const{data:kI,target:jI}=FI,{value:EI,selectionStart:PI,selectionEnd:_I}=jI;let qI=PI,Ig=_I;switch(FI.inputType){case"deleteWordBackward":{const Ag=EI.substring(0,PI).match(/\w*[^\w]*$/);Ag&&(qI-=Ag[0].length);break}case"deleteWordForward":{const Ag=EI.substring(PI).match(/^[^\w]*\w*/);Ag&&(Ig+=Ag[0].length);break}case"deleteContentBackward":PI===_I&&(qI-=1);break;case"deleteContentForward":PI===_I&&(Ig+=1);break}FI.preventDefault(),(Cg=this.linkService.eventBus)==null||Cg.dispatch("dispatcheventinsandbox",{source:this,detail:{id:a,name:"Keystroke",value:EI,change:kI||"",willCommit:!1,selStart:qI,selEnd:Ig}})}),this._setEventListeners(Q,uI,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],FI=>FI.target.value)}if(QI&&Q.addEventListener("blur",QI),this.data.comb){const FI=(this.data.rect[2]-this.data.rect[0])/tI;Q.classList.add("comb"),Q.style.letterSpacing=`calc(${FI}px * var(--scale-factor) - 1ch)`}}else Q=document.createElement("div"),Q.textContent=this.data.fieldValue,Q.style.verticalAlign="middle",Q.style.display="table-cell";return this._setTextStyle(Q),this._setBackgroundColor(Q),this._setDefaultPropertiesFromJS(Q),this.container.append(Q),this.container}}class t extends s{constructor(H){super(H,{isRenderable:!!H.data.hasOwnCanvas})}}class h extends s{constructor(H){super(H,{isRenderable:H.renderForms})}render(){const H=this.annotationStorage,a=this.data,Q=a.id;let GI=H.getValue(Q,{value:a.exportValue===a.fieldValue}).value;typeof GI=="string"&&(GI=GI!=="Off",H.setValue(Q,{value:GI})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const iI=document.createElement("input");return z.add(iI),iI.setAttribute("data-element-id",Q),iI.disabled=a.readOnly,this._setRequired(iI,this.data.required),iI.type="checkbox",iI.name=a.fieldName,GI&&iI.setAttribute("checked",!0),iI.setAttribute("exportValue",a.exportValue),iI.tabIndex=e,iI.addEventListener("change",oI=>{const{name:RI,checked:tI}=oI.target;for(const KI of this._getElementsByName(RI,Q)){const uI=tI&&KI.exportValue===a.exportValue;KI.domElement&&(KI.domElement.checked=uI),H.setValue(KI.id,{value:uI})}H.setValue(Q,{value:tI})}),iI.addEventListener("resetform",oI=>{const RI=a.defaultFieldValue||"Off";oI.target.checked=RI===a.exportValue}),this.enableScripting&&this.hasJSActions&&(iI.addEventListener("updatefromsandbox",oI=>{const RI={value(tI){tI.target.checked=tI.detail.value!=="Off",H.setValue(Q,{value:tI.target.checked})}};this._dispatchEventFromSandbox(RI,oI)}),this._setEventListeners(iI,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],oI=>oI.target.checked)),this._setBackgroundColor(iI),this._setDefaultPropertiesFromJS(iI),this.container.append(iI),this.container}}class Z extends s{constructor(H){super(H,{isRenderable:H.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const H=this.annotationStorage,a=this.data,Q=a.id;let GI=H.getValue(Q,{value:a.fieldValue===a.buttonValue}).value;typeof GI=="string"&&(GI=GI!==a.buttonValue,H.setValue(Q,{value:GI}));const iI=document.createElement("input");if(z.add(iI),iI.setAttribute("data-element-id",Q),iI.disabled=a.readOnly,this._setRequired(iI,this.data.required),iI.type="radio",iI.name=a.fieldName,GI&&iI.setAttribute("checked",!0),iI.tabIndex=e,iI.addEventListener("change",oI=>{const{name:RI,checked:tI}=oI.target;for(const KI of this._getElementsByName(RI,Q))H.setValue(KI.id,{value:!1});H.setValue(Q,{value:tI})}),iI.addEventListener("resetform",oI=>{const RI=a.defaultFieldValue;oI.target.checked=RI!=null&&RI===a.buttonValue}),this.enableScripting&&this.hasJSActions){const oI=a.buttonValue;iI.addEventListener("updatefromsandbox",RI=>{const tI={value:KI=>{const uI=oI===KI.detail.value;for(const QI of this._getElementsByName(KI.target.name)){const pI=uI&&QI.id===Q;QI.domElement&&(QI.domElement.checked=pI),H.setValue(QI.id,{value:pI})}}};this._dispatchEventFromSandbox(tI,RI)}),this._setEventListeners(iI,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],RI=>RI.target.checked)}return this._setBackgroundColor(iI),this._setDefaultPropertiesFromJS(iI),this.container.append(iI),this.container}}class i extends y{constructor(H){super(H,{ignoreBorder:H.data.hasAppearance})}render(){const H=super.render();H.classList.add("buttonWidgetAnnotation","pushButton"),this.data.alternativeText&&(H.title=this.data.alternativeText);const a=H.lastChild;return this.enableScripting&&this.hasJSActions&&a&&(this._setDefaultPropertiesFromJS(a),a.addEventListener("updatefromsandbox",Q=>{this._dispatchEventFromSandbox({},Q)})),H}}class A extends s{constructor(H){super(H,{isRenderable:H.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const H=this.annotationStorage,a=this.data.id,Q=H.getValue(a,{value:this.data.fieldValue}),GI=document.createElement("select");z.add(GI),GI.setAttribute("data-element-id",a),GI.disabled=this.data.readOnly,this._setRequired(GI,this.data.required),GI.name=this.data.fieldName,GI.tabIndex=e;let iI=this.data.combo&&this.data.options.length>0;this.data.combo||(GI.size=this.data.options.length,this.data.multiSelect&&(GI.multiple=!0)),GI.addEventListener("resetform",uI=>{const QI=this.data.defaultFieldValue;for(const pI of GI.options)pI.selected=pI.value===QI});for(const uI of this.data.options){const QI=document.createElement("option");QI.textContent=uI.displayValue,QI.value=uI.exportValue,Q.value.includes(uI.exportValue)&&(QI.setAttribute("selected",!0),iI=!1),GI.append(QI)}let oI=null;if(iI){const uI=document.createElement("option");uI.value=" ",uI.setAttribute("hidden",!0),uI.setAttribute("selected",!0),GI.prepend(uI),oI=()=>{uI.remove(),GI.removeEventListener("input",oI),oI=null},GI.addEventListener("input",oI)}const RI=uI=>{const QI=uI?"value":"textContent",{options:pI,multiple:FI}=GI;return FI?Array.prototype.filter.call(pI,kI=>kI.selected).map(kI=>kI[QI]):pI.selectedIndex===-1?null:pI[pI.selectedIndex][QI]};let tI=RI(!1);const KI=uI=>{const QI=uI.target.options;return Array.prototype.map.call(QI,pI=>({displayValue:pI.textContent,exportValue:pI.value}))};return this.enableScripting&&this.hasJSActions?(GI.addEventListener("updatefromsandbox",uI=>{const QI={value(pI){oI==null||oI();const FI=pI.detail.value,kI=new Set(Array.isArray(FI)?FI:[FI]);for(const jI of GI.options)jI.selected=kI.has(jI.value);H.setValue(a,{value:RI(!0)}),tI=RI(!1)},multipleSelection(pI){GI.multiple=!0},remove(pI){const FI=GI.options,kI=pI.detail.remove;FI[kI].selected=!1,GI.remove(kI),FI.length>0&&Array.prototype.findIndex.call(FI,EI=>EI.selected)===-1&&(FI[0].selected=!0),H.setValue(a,{value:RI(!0),items:KI(pI)}),tI=RI(!1)},clear(pI){for(;GI.length!==0;)GI.remove(0);H.setValue(a,{value:null,items:[]}),tI=RI(!1)},insert(pI){const{index:FI,displayValue:kI,exportValue:jI}=pI.detail.insert,EI=GI.children[FI],PI=document.createElement("option");PI.textContent=kI,PI.value=jI,EI?EI.before(PI):GI.append(PI),H.setValue(a,{value:RI(!0),items:KI(pI)}),tI=RI(!1)},items(pI){const{items:FI}=pI.detail;for(;GI.length!==0;)GI.remove(0);for(const kI of FI){const{displayValue:jI,exportValue:EI}=kI,PI=document.createElement("option");PI.textContent=jI,PI.value=EI,GI.append(PI)}GI.options.length>0&&(GI.options[0].selected=!0),H.setValue(a,{value:RI(!0),items:KI(pI)}),tI=RI(!1)},indices(pI){const FI=new Set(pI.detail.indices);for(const kI of pI.target.options)kI.selected=FI.has(kI.index);H.setValue(a,{value:RI(!0)}),tI=RI(!1)},editable(pI){pI.target.disabled=!pI.detail.editable}};this._dispatchEventFromSandbox(QI,uI)}),GI.addEventListener("input",uI=>{var pI;const QI=RI(!0);H.setValue(a,{value:QI}),uI.preventDefault(),(pI=this.linkService.eventBus)==null||pI.dispatch("dispatcheventinsandbox",{source:this,detail:{id:a,name:"Keystroke",value:tI,changeEx:QI,willCommit:!1,commitKey:1,keyDown:!1}})}),this._setEventListeners(GI,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],uI=>uI.target.value)):GI.addEventListener("input",function(uI){H.setValue(a,{value:RI(!0)})}),this.data.combo&&this._setTextStyle(GI),this._setBackgroundColor(GI),this._setDefaultPropertiesFromJS(GI),this.container.append(GI),this.container}}class d extends o{constructor(H){const{data:a,elements:Q}=H;super(H,{isRenderable:o._hasPopupData(a)}),this.elements=Q}render(){this.container.classList.add("popupAnnotation");const H=new c({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),a=[];for(const Q of this.elements)Q.popup=H,a.push(Q.data.id),Q.addHighlightArea();return this.container.setAttribute("aria-controls",a.map(Q=>`${G.AnnotationPrefix}${Q}`).join(",")),this.container}}class c{constructor({container:H,color:a,elements:Q,titleObj:GI,modificationDate:iI,contentsObj:oI,richText:RI,parent:tI,rect:KI,parentRect:uI,open:QI}){_(this,yI);_(this,CI,null);_(this,bI,O(this,yI,KC).bind(this));_(this,sI,O(this,yI,CC).bind(this));_(this,YI,O(this,yI,gC).bind(this));_(this,XI,O(this,yI,Hg).bind(this));_(this,aI,null);_(this,f,null);_(this,$,null);_(this,w,null);_(this,p,null);_(this,v,null);_(this,q,!1);_(this,mI,null);_(this,NI,null);_(this,hI,null);_(this,E,null);_(this,MI,!1);var FI;gI(this,f,H),gI(this,E,GI),gI(this,$,oI),gI(this,hI,RI),gI(this,p,tI),gI(this,aI,a),gI(this,NI,KI),gI(this,v,uI),gI(this,w,Q);const pI=R.PDFDateString.toDateObject(iI);pI&&gI(this,CI,tI.l10n.get("annotation_date_string",{date:pI.toLocaleDateString(),time:pI.toLocaleTimeString()})),this.trigger=Q.flatMap(kI=>kI.getElementsToTriggerPopup());for(const kI of this.trigger)kI.addEventListener("click",I(this,XI)),kI.addEventListener("mouseenter",I(this,YI)),kI.addEventListener("mouseleave",I(this,sI)),kI.classList.add("popupTriggerArea");for(const kI of Q)(FI=kI.container)==null||FI.addEventListener("keydown",I(this,bI));I(this,f).hidden=!0,QI&&O(this,yI,Hg).call(this)}render(){if(I(this,mI))return;const{page:{view:H},viewport:{rawDims:{pageWidth:a,pageHeight:Q,pageX:GI,pageY:iI}}}=I(this,p),oI=gI(this,mI,document.createElement("div"));if(oI.className="popup",I(this,aI)){const qI=oI.style.outlineColor=G.Util.makeHexColor(...I(this,aI));CSS.supports("background-color","color-mix(in srgb, red 30%, white)")?oI.style.backgroundColor=`color-mix(in srgb, ${qI} 30%, white)`:oI.style.backgroundColor=G.Util.makeHexColor(...I(this,aI).map(Cg=>Math.floor(.7*(255-Cg)+Cg)))}const RI=document.createElement("span");RI.className="header";const tI=document.createElement("h1");if(RI.append(tI),{dir:tI.dir,str:tI.textContent}=I(this,E),oI.append(RI),I(this,CI)){const qI=document.createElement("span");qI.classList.add("popupDate"),I(this,CI).then(Ig=>{qI.textContent=Ig}),RI.append(qI)}const KI=I(this,$),uI=I(this,hI);if(uI!=null&&uI.str&&(!(KI!=null&&KI.str)||KI.str===uI.str))L.XfaLayer.render({xfaHtml:uI.html,intent:"richText",div:oI}),oI.lastChild.classList.add("richText","popupContent");else{const qI=this._formatContents(KI);oI.append(qI)}let QI=!!I(this,v),pI=QI?I(this,v):I(this,NI);for(const qI of I(this,w))if(!pI||G.Util.intersect(qI.data.rect,pI)!==null){pI=qI.data.rect,QI=!0;break}const FI=G.Util.normalizeRect([pI[0],H[3]-pI[1]+H[1],pI[2],H[3]-pI[3]+H[1]]),jI=QI?pI[2]-pI[0]+5:0,EI=FI[0]+jI,PI=FI[1],{style:_I}=I(this,f);_I.left=`${100*(EI-GI)/a}%`,_I.top=`${100*(PI-iI)/Q}%`,I(this,f).append(oI)}_formatContents({str:H,dir:a}){const Q=document.createElement("p");Q.classList.add("popupContent"),Q.dir=a;const GI=H.split(/(?:\r\n?|\n)/);for(let iI=0,oI=GI.length;iI<oI;++iI){const RI=GI[iI];Q.append(document.createTextNode(RI)),iI<oI-1&&Q.append(document.createElement("br"))}return Q}forceHide(){gI(this,MI,this.isVisible),I(this,MI)&&(I(this,f).hidden=!0)}maybeShow(){I(this,MI)&&(gI(this,MI,!1),I(this,f).hidden=!1)}get isVisible(){return I(this,f).hidden===!1}}CI=new WeakMap,bI=new WeakMap,sI=new WeakMap,YI=new WeakMap,XI=new WeakMap,aI=new WeakMap,f=new WeakMap,$=new WeakMap,w=new WeakMap,p=new WeakMap,v=new WeakMap,q=new WeakMap,mI=new WeakMap,NI=new WeakMap,hI=new WeakMap,E=new WeakMap,MI=new WeakMap,yI=new WeakSet,KC=function(H){H.altKey||H.shiftKey||H.ctrlKey||H.metaKey||(H.key==="Enter"||H.key==="Escape"&&I(this,q))&&O(this,yI,Hg).call(this)},Hg=function(){gI(this,q,!I(this,q)),I(this,q)?(O(this,yI,gC).call(this),I(this,f).addEventListener("click",I(this,XI)),I(this,f).addEventListener("keydown",I(this,bI))):(O(this,yI,CC).call(this),I(this,f).removeEventListener("click",I(this,XI)),I(this,f).removeEventListener("keydown",I(this,bI)))},gC=function(){I(this,mI)||this.render(),this.isVisible?I(this,q)&&I(this,f).classList.add("focused"):(I(this,f).hidden=!1,I(this,f).style.zIndex=parseInt(I(this,f).style.zIndex)+1e3)},CC=function(){I(this,f).classList.remove("focused"),!(I(this,q)||!this.isVisible)&&(I(this,f).hidden=!0,I(this,f).style.zIndex=parseInt(I(this,f).style.zIndex)-1e3)};class F extends o{constructor(H){super(H,{isRenderable:!0,ignoreBorder:!0}),this.textContent=H.data.textContent,this.textPosition=H.data.textPosition,this.annotationEditorType=G.AnnotationEditorType.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const H=document.createElement("div");H.classList.add("annotationTextContent"),H.setAttribute("role","comment");for(const a of this.textContent){const Q=document.createElement("span");Q.textContent=a,H.append(Q)}this.container.append(H)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}b.FreeTextAnnotationElement=F;class l extends o{constructor(a){super(a,{isRenderable:!0,ignoreBorder:!0});_(this,JI,null)}render(){this.container.classList.add("lineAnnotation");const a=this.data,{width:Q,height:GI}=J(a.rect),iI=this.svgFactory.create(Q,GI,!0),oI=gI(this,JI,this.svgFactory.createElement("svg:line"));return oI.setAttribute("x1",a.rect[2]-a.lineCoordinates[0]),oI.setAttribute("y1",a.rect[3]-a.lineCoordinates[1]),oI.setAttribute("x2",a.rect[2]-a.lineCoordinates[2]),oI.setAttribute("y2",a.rect[3]-a.lineCoordinates[3]),oI.setAttribute("stroke-width",a.borderStyle.width||1),oI.setAttribute("stroke","transparent"),oI.setAttribute("fill","transparent"),iI.append(oI),this.container.append(iI),!a.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return I(this,JI)}addHighlightArea(){this.container.classList.add("highlightArea")}}JI=new WeakMap;class X extends o{constructor(a){super(a,{isRenderable:!0,ignoreBorder:!0});_(this,vI,null)}render(){this.container.classList.add("squareAnnotation");const a=this.data,{width:Q,height:GI}=J(a.rect),iI=this.svgFactory.create(Q,GI,!0),oI=a.borderStyle.width,RI=gI(this,vI,this.svgFactory.createElement("svg:rect"));return RI.setAttribute("x",oI/2),RI.setAttribute("y",oI/2),RI.setAttribute("width",Q-oI),RI.setAttribute("height",GI-oI),RI.setAttribute("stroke-width",oI||1),RI.setAttribute("stroke","transparent"),RI.setAttribute("fill","transparent"),iI.append(RI),this.container.append(iI),!a.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return I(this,vI)}addHighlightArea(){this.container.classList.add("highlightArea")}}vI=new WeakMap;class K extends o{constructor(a){super(a,{isRenderable:!0,ignoreBorder:!0});_(this,rI,null)}render(){this.container.classList.add("circleAnnotation");const a=this.data,{width:Q,height:GI}=J(a.rect),iI=this.svgFactory.create(Q,GI,!0),oI=a.borderStyle.width,RI=gI(this,rI,this.svgFactory.createElement("svg:ellipse"));return RI.setAttribute("cx",Q/2),RI.setAttribute("cy",GI/2),RI.setAttribute("rx",Q/2-oI/2),RI.setAttribute("ry",GI/2-oI/2),RI.setAttribute("stroke-width",oI||1),RI.setAttribute("stroke","transparent"),RI.setAttribute("fill","transparent"),iI.append(RI),this.container.append(iI),!a.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return I(this,rI)}addHighlightArea(){this.container.classList.add("highlightArea")}}rI=new WeakMap;class lI extends o{constructor(a){super(a,{isRenderable:!0,ignoreBorder:!0});_(this,VI,null);this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const a=this.data,{width:Q,height:GI}=J(a.rect),iI=this.svgFactory.create(Q,GI,!0);let oI=[];for(const tI of a.vertices){const KI=tI.x-a.rect[0],uI=a.rect[3]-tI.y;oI.push(KI+","+uI)}oI=oI.join(" ");const RI=gI(this,VI,this.svgFactory.createElement(this.svgElementName));return RI.setAttribute("points",oI),RI.setAttribute("stroke-width",a.borderStyle.width||1),RI.setAttribute("stroke","transparent"),RI.setAttribute("fill","transparent"),iI.append(RI),this.container.append(iI),!a.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return I(this,VI)}addHighlightArea(){this.container.classList.add("highlightArea")}}VI=new WeakMap;class j extends lI{constructor(H){super(H),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class r extends o{constructor(H){super(H,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class T extends o{constructor(a){super(a,{isRenderable:!0,ignoreBorder:!0});_(this,II,[]);this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType=G.AnnotationEditorType.INK}render(){this.container.classList.add(this.containerClassName);const a=this.data,{width:Q,height:GI}=J(a.rect),iI=this.svgFactory.create(Q,GI,!0);for(const oI of a.inkLists){let RI=[];for(const KI of oI){const uI=KI.x-a.rect[0],QI=a.rect[3]-KI.y;RI.push(`${uI},${QI}`)}RI=RI.join(" ");const tI=this.svgFactory.createElement(this.svgElementName);I(this,II).push(tI),tI.setAttribute("points",RI),tI.setAttribute("stroke-width",a.borderStyle.width||1),tI.setAttribute("stroke","transparent"),tI.setAttribute("fill","transparent"),!a.popupRef&&this.hasPopupData&&this._createPopup(),iI.append(tI)}return this.container.append(iI),this.container}getElementsToTriggerPopup(){return I(this,II)}addHighlightArea(){this.container.classList.add("highlightArea")}}II=new WeakMap,b.InkAnnotationElement=T;class dI extends o{constructor(H){super(H,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this.container}}class M extends o{constructor(H){super(H,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),this.container}}class k extends o{constructor(H){super(H,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),this.container}}class P extends o{constructor(H){super(H,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),this.container}}class N extends o{constructor(H){super(H,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("stampAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}b.StampAnnotationElement=N;class g extends o{constructor(a){var iI;super(a,{isRenderable:!0});_(this,DI);_(this,AI,null);const{filename:Q,content:GI}=this.data.file;this.filename=(0,R.getFilenameFromUrl)(Q,!0),this.content=GI,(iI=this.linkService.eventBus)==null||iI.dispatch("fileattachmentannotation",{source:this,filename:Q,content:GI})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:a,data:Q}=this;let GI;Q.hasAppearance||Q.fillAlpha===0?GI=document.createElement("div"):(GI=document.createElement("img"),GI.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(Q.name)?"paperclip":"pushpin"}.svg`,Q.fillAlpha&&Q.fillAlpha<1&&(GI.style=`filter: opacity(${Math.round(Q.fillAlpha*100)}%);`)),GI.addEventListener("dblclick",O(this,DI,AC).bind(this)),gI(this,AI,GI);const{isMac:iI}=G.FeatureTest.platform;return a.addEventListener("keydown",oI=>{oI.key==="Enter"&&(iI?oI.metaKey:oI.ctrlKey)&&O(this,DI,AC).call(this)}),!Q.popupRef&&this.hasPopupData?this._createPopup():GI.classList.add("popupTriggerArea"),a.append(GI),a}getElementsToTriggerPopup(){return I(this,AI)}addHighlightArea(){this.container.classList.add("highlightArea")}}AI=new WeakMap,DI=new WeakSet,AC=function(){var a;(a=this.downloadManager)==null||a.openOrDownloadData(this.container,this.content,this.filename)};class C{constructor({div:H,accessibilityManager:a,annotationCanvasMap:Q,l10n:GI,page:iI,viewport:oI}){_(this,HI);_(this,xI,null);_(this,S,null);_(this,BI,new Map);this.div=H,gI(this,xI,a),gI(this,S,Q),this.l10n=GI,this.page=iI,this.viewport=oI,this.zIndex=0,this.l10n||(this.l10n=WI.NullL10n)}async render(H){const{annotations:a}=H,Q=this.div;(0,R.setLayerDimensions)(Q,this.viewport);const GI=new Map,iI={data:null,layer:Q,linkService:H.linkService,downloadManager:H.downloadManager,imageResourcesPath:H.imageResourcesPath||"",renderForms:H.renderForms!==!1,svgFactory:new R.DOMSVGFactory,annotationStorage:H.annotationStorage||new cI.AnnotationStorage,enableScripting:H.enableScripting===!0,hasJSActions:H.hasJSActions,fieldObjects:H.fieldObjects,parent:this,elements:null};for(const oI of a){if(oI.noHTML)continue;const RI=oI.annotationType===G.AnnotationType.POPUP;if(RI){const uI=GI.get(oI.id);if(!uI)continue;iI.elements=uI}else{const{width:uI,height:QI}=J(oI.rect);if(uI<=0||QI<=0)continue}iI.data=oI;const tI=V.create(iI);if(!tI.isRenderable)continue;if(!RI&&oI.popupRef){const uI=GI.get(oI.popupRef);uI?uI.push(tI):GI.set(oI.popupRef,[tI])}tI.annotationEditorType>0&&I(this,BI).set(tI.data.id,tI);const KI=tI.render();oI.hidden&&(KI.style.visibility="hidden"),O(this,HI,pC).call(this,KI,oI.id)}O(this,HI,lC).call(this),await this.l10n.translate(Q)}update({viewport:H}){const a=this.div;this.viewport=H,(0,R.setLayerDimensions)(a,{rotation:H.rotation}),O(this,HI,lC).call(this),a.hidden=!1}getEditableAnnotations(){return Array.from(I(this,BI).values())}getEditableAnnotation(H){return I(this,BI).get(H)}}xI=new WeakMap,S=new WeakMap,BI=new WeakMap,HI=new WeakSet,pC=function(H,a){var GI;const Q=H.firstChild||H;Q.id=`${G.AnnotationPrefix}${a}`,this.div.append(H),(GI=I(this,xI))==null||GI.moveElementInDOM(this.div,H,Q,!1)},lC=function(){if(!I(this,S))return;const H=this.div;for(const[a,Q]of I(this,S)){const GI=H.querySelector(`[data-annotation-id="${a}"]`);if(!GI)continue;const{firstChild:iI}=GI;iI?iI.nodeName==="CANVAS"?iI.replaceWith(Q):iI.before(Q):GI.append(Q)}I(this,S).clear()},b.AnnotationLayer=C},(wI,b)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.ColorConverters=void 0;function ZI(cI){return Math.floor(Math.max(0,Math.min(1,cI))*255).toString(16).padStart(2,"0")}function G(cI){return Math.max(0,Math.min(255,255*cI))}class R{static CMYK_G([U,WI,L,e]){return["G",1-Math.min(1,.3*U+.59*L+.11*WI+e)]}static G_CMYK([U]){return["CMYK",0,0,0,1-U]}static G_RGB([U]){return["RGB",U,U,U]}static G_rgb([U]){return U=G(U),[U,U,U]}static G_HTML([U]){const WI=ZI(U);return`#${WI}${WI}${WI}`}static RGB_G([U,WI,L]){return["G",.3*U+.59*WI+.11*L]}static RGB_rgb(U){return U.map(G)}static RGB_HTML(U){return`#${U.map(ZI).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([U,WI,L,e]){return["RGB",1-Math.min(1,U+e),1-Math.min(1,L+e),1-Math.min(1,WI+e)]}static CMYK_rgb([U,WI,L,e]){return[G(1-Math.min(1,U+e)),G(1-Math.min(1,L+e)),G(1-Math.min(1,WI+e))]}static CMYK_HTML(U){const WI=this.CMYK_RGB(U).slice(1);return this.RGB_HTML(WI)}static RGB_CMYK([U,WI,L]){const e=1-U,W=1-WI,z=1-L,J=Math.min(e,W,z);return["CMYK",e,W,z,J]}}b.ColorConverters=R},(wI,b)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.NullL10n=void 0,b.getL10nFallback=G;const ZI={of_pages:"of {{pagesCount}}",page_of_pages:"({{pageNumber}} of {{pagesCount}})",document_properties_kb:"{{size_kb}} KB ({{size_b}} bytes)",document_properties_mb:"{{size_mb}} MB ({{size_b}} bytes)",document_properties_date_string:"{{date}}, {{time}}",document_properties_page_size_unit_inches:"in",document_properties_page_size_unit_millimeters:"mm",document_properties_page_size_orientation_portrait:"portrait",document_properties_page_size_orientation_landscape:"landscape",document_properties_page_size_name_a3:"A3",document_properties_page_size_name_a4:"A4",document_properties_page_size_name_letter:"Letter",document_properties_page_size_name_legal:"Legal",document_properties_page_size_dimension_string:"{{width}} × {{height}} {{unit}} ({{orientation}})",document_properties_page_size_dimension_name_string:"{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})",document_properties_linearized_yes:"Yes",document_properties_linearized_no:"No",additional_layers:"Additional Layers",page_landmark:"Page {{page}}",thumb_page_title:"Page {{page}}",thumb_page_canvas:"Thumbnail of Page {{page}}",find_reached_top:"Reached top of document, continued from bottom",find_reached_bottom:"Reached end of document, continued from top","find_match_count[one]":"{{current}} of {{total}} match","find_match_count[other]":"{{current}} of {{total}} matches","find_match_count_limit[one]":"More than {{limit}} match","find_match_count_limit[other]":"More than {{limit}} matches",find_not_found:"Phrase not found",page_scale_width:"Page Width",page_scale_fit:"Page Fit",page_scale_auto:"Automatic Zoom",page_scale_actual:"Actual Size",page_scale_percent:"{{scale}}%",loading_error:"An error occurred while loading the PDF.",invalid_file_error:"Invalid or corrupted PDF file.",missing_file_error:"Missing PDF file.",unexpected_response_error:"Unexpected server response.",rendering_error:"An error occurred while rendering the page.",annotation_date_string:"{{date}}, {{time}}",printing_not_supported:"Warning: Printing is not fully supported by this browser.",printing_not_ready:"Warning: The PDF is not fully loaded for printing.",web_fonts_disabled:"Web fonts are disabled: unable to use embedded PDF fonts.",free_text2_default_content:"Start typing…",editor_free_text2_aria_label:"Text Editor",editor_ink2_aria_label:"Draw Editor",editor_ink_canvas_aria_label:"User-created image",editor_alt_text_button_label:"Alt text",editor_alt_text_edit_button_label:"Edit alt text",editor_alt_text_decorative_tooltip:"Marked as decorative"};ZI.print_progress_percent="{{progress}}%";function G(U,WI){switch(U){case"find_match_count":U=`find_match_count[${WI.total===1?"one":"other"}]`;break;case"find_match_count_limit":U=`find_match_count_limit[${WI.limit===1?"one":"other"}]`;break}return ZI[U]||""}function R(U,WI){return WI?U.replaceAll(/\{\{\s*(\w+)\s*\}\}/g,(L,e)=>e in WI?WI[e]:"{{"+e+"}}"):U}const cI={async getLanguage(){return"en-us"},async getDirection(){return"ltr"},async get(U,WI=null,L=G(U,WI)){return R(L,WI)},async translate(U){}};b.NullL10n=cI},(wI,b,ZI)=>{Object.defineProperty(b,"__esModule",{value:!0}),b.XfaLayer=void 0;var G=ZI(25);class R{static setupStorage(U,WI,L,e,W){const z=e.getValue(WI,{value:null});switch(L.name){case"textarea":if(z.value!==null&&(U.textContent=z.value),W==="print")break;U.addEventListener("input",J=>{e.setValue(WI,{value:J.target.value})});break;case"input":if(L.attributes.type==="radio"||L.attributes.type==="checkbox"){if(z.value===L.attributes.xfaOn?U.setAttribute("checked",!0):z.value===L.attributes.xfaOff&&U.removeAttribute("checked"),W==="print")break;U.addEventListener("change",J=>{e.setValue(WI,{value:J.target.checked?J.target.getAttribute("xfaOn"):J.target.getAttribute("xfaOff")})})}else{if(z.value!==null&&U.setAttribute("value",z.value),W==="print")break;U.addEventListener("input",J=>{e.setValue(WI,{value:J.target.value})})}break;case"select":if(z.value!==null){U.setAttribute("value",z.value);for(const J of L.children)J.attributes.value===z.value?J.attributes.selected=!0:J.attributes.hasOwnProperty("selected")&&delete J.attributes.selected}U.addEventListener("input",J=>{const V=J.target.options,o=V.selectedIndex===-1?"":V[V.selectedIndex].value;e.setValue(WI,{value:o})});break}}static setAttributes({html:U,element:WI,storage:L=null,intent:e,linkService:W}){const{attributes:z}=WI,J=U instanceof HTMLAnchorElement;z.type==="radio"&&(z.name=`${z.name}-${e}`);for(const[V,o]of Object.entries(z))if(o!=null)switch(V){case"class":o.length&&U.setAttribute(V,o.join(" "));break;case"dataId":break;case"id":U.setAttribute("data-element-id",o);break;case"style":Object.assign(U.style,o);break;case"textContent":U.textContent=o;break;default:(!J||V!=="href"&&V!=="newWindow")&&U.setAttribute(V,o)}J&&W.addLinkAttributes(U,z.href,z.newWindow),L&&z.dataId&&this.setupStorage(U,z.dataId,WI,L)}static render(U){var y;const WI=U.annotationStorage,L=U.linkService,e=U.xfaHtml,W=U.intent||"display",z=document.createElement(e.name);e.attributes&&this.setAttributes({html:z,element:e,intent:W,linkService:L});const J=[[e,-1,z]],V=U.div;if(V.append(z),U.viewport){const B=`matrix(${U.viewport.transform.join(",")})`;V.style.transform=B}W!=="richText"&&V.setAttribute("class","xfaLayer xfaFont");const o=[];for(;J.length>0;){const[B,s,Y]=J.at(-1);if(s+1===B.children.length){J.pop();continue}const t=B.children[++J.at(-1)[1]];if(t===null)continue;const{name:h}=t;if(h==="#text"){const i=document.createTextNode(t.value);o.push(i),Y.append(i);continue}const Z=(y=t==null?void 0:t.attributes)!=null&&y.xmlns?document.createElementNS(t.attributes.xmlns,h):document.createElement(h);if(Y.append(Z),t.attributes&&this.setAttributes({html:Z,element:t,storage:WI,intent:W,linkService:L}),t.children&&t.children.length>0)J.push([t,-1,Z]);else if(t.value){const i=document.createTextNode(t.value);G.XfaText.shouldBuildText(h)&&o.push(i),Z.append(i)}}for(const B of V.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))B.setAttribute("readOnly",!0);return{textDivs:o}}static update(U){const WI=`matrix(${U.viewport.transform.join(",")})`;U.div.style.transform=WI,U.div.hidden=!1}}b.XfaLayer=R},(wI,b,ZI)=>{var e,W,z,J,V,o,y,B,s,Y,t,h,Z,i,A,SC,tC,FC,zC,ZC,JC,dC,LC,kC,TC,QC,jC,gg,GC,Mg,ug,cg,cC,ng,n,xC,iC,OC,UC,bC,Dg,ig;Object.defineProperty(b,"__esModule",{value:!0}),b.InkEditor=void 0;var G=ZI(1),R=ZI(4),cI=ZI(29),U=ZI(6),WI=ZI(5);const aI=class aI extends R.AnnotationEditor{constructor(w){super({...w,name:"inkEditor"});_(this,A);_(this,e,0);_(this,W,0);_(this,z,this.canvasPointermove.bind(this));_(this,J,this.canvasPointerleave.bind(this));_(this,V,this.canvasPointerup.bind(this));_(this,o,this.canvasPointerdown.bind(this));_(this,y,new Path2D);_(this,B,!1);_(this,s,!1);_(this,Y,!1);_(this,t,null);_(this,h,0);_(this,Z,0);_(this,i,null);this.color=w.color||null,this.thickness=w.thickness||null,this.opacity=w.opacity||null,this.paths=[],this.bezierPath2D=[],this.allRawPaths=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0,this._willKeepAspectRatio=!0}static initialize(w){R.AnnotationEditor.initialize(w,{strings:["editor_ink_canvas_aria_label","editor_ink2_aria_label"]})}static updateDefaultParams(w,p){switch(w){case G.AnnotationEditorParamsType.INK_THICKNESS:aI._defaultThickness=p;break;case G.AnnotationEditorParamsType.INK_COLOR:aI._defaultColor=p;break;case G.AnnotationEditorParamsType.INK_OPACITY:aI._defaultOpacity=p/100;break}}updateParams(w,p){switch(w){case G.AnnotationEditorParamsType.INK_THICKNESS:O(this,A,SC).call(this,p);break;case G.AnnotationEditorParamsType.INK_COLOR:O(this,A,tC).call(this,p);break;case G.AnnotationEditorParamsType.INK_OPACITY:O(this,A,FC).call(this,p);break}}static get defaultPropertiesToUpdate(){return[[G.AnnotationEditorParamsType.INK_THICKNESS,aI._defaultThickness],[G.AnnotationEditorParamsType.INK_COLOR,aI._defaultColor||R.AnnotationEditor._defaultLineColor],[G.AnnotationEditorParamsType.INK_OPACITY,Math.round(aI._defaultOpacity*100)]]}get propertiesToUpdate(){return[[G.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||aI._defaultThickness],[G.AnnotationEditorParamsType.INK_COLOR,this.color||aI._defaultColor||R.AnnotationEditor._defaultLineColor],[G.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*(this.opacity??aI._defaultOpacity))]]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.canvas||(O(this,A,Mg).call(this),O(this,A,ug).call(this)),this.isAttachedToDOM||(this.parent.add(this),O(this,A,cg).call(this)),O(this,A,ig).call(this)))}remove(){this.canvas!==null&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,I(this,t).disconnect(),gI(this,t,null),super.remove())}setParent(w){!this.parent&&w?this._uiManager.removeShouldRescale(this):this.parent&&w===null&&this._uiManager.addShouldRescale(this),super.setParent(w)}onScaleChanging(){const[w,p]=this.parentDimensions,v=this.width*w,q=this.height*p;this.setDimensions(v,q)}enableEditMode(){I(this,B)||this.canvas===null||(super.enableEditMode(),this._isDraggable=!1,this.canvas.addEventListener("pointerdown",I(this,o)))}disableEditMode(){!this.isInEditMode()||this.canvas===null||(super.disableEditMode(),this._isDraggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",I(this,o)))}onceAdded(){this._isDraggable=!this.isEmpty()}isEmpty(){return this.paths.length===0||this.paths.length===1&&this.paths[0].length===0}commit(){I(this,B)||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),gI(this,B,!0),this.div.classList.add("disabled"),O(this,A,ig).call(this,!0),this.makeResizable(),this.parent.addInkEditorIfNeeded(!0),this.moveInDOM(),this.div.focus({preventScroll:!0}))}focusin(w){this._focusEventsAllowed&&(super.focusin(w),this.enableEditMode())}canvasPointerdown(w){w.button!==0||!this.isInEditMode()||I(this,B)||(this.setInForeground(),w.preventDefault(),w.type!=="mouse"&&this.div.focus(),O(this,A,JC).call(this,w.offsetX,w.offsetY))}canvasPointermove(w){w.preventDefault(),O(this,A,dC).call(this,w.offsetX,w.offsetY)}canvasPointerup(w){w.preventDefault(),O(this,A,GC).call(this,w)}canvasPointerleave(w){O(this,A,GC).call(this,w)}get isResizable(){return!this.isEmpty()&&I(this,B)}render(){if(this.div)return this.div;let w,p;this.width&&(w=this.x,p=this.y),super.render(),R.AnnotationEditor._l10nPromise.get("editor_ink2_aria_label").then(hI=>{var E;return(E=this.div)==null?void 0:E.setAttribute("aria-label",hI)});const[v,q,mI,NI]=O(this,A,zC).call(this);if(this.setAt(v,q,0,0),this.setDims(mI,NI),O(this,A,Mg).call(this),this.width){const[hI,E]=this.parentDimensions;this.setAspectRatio(this.width*hI,this.height*E),this.setAt(w*hI,p*E,this.width*hI,this.height*E),gI(this,Y,!0),O(this,A,cg).call(this),this.setDims(this.width*hI,this.height*E),O(this,A,gg).call(this),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return O(this,A,ug).call(this),this.div}setDimensions(w,p){const v=Math.round(w),q=Math.round(p);if(I(this,h)===v&&I(this,Z)===q)return;gI(this,h,v),gI(this,Z,q),this.canvas.style.visibility="hidden";const[mI,NI]=this.parentDimensions;this.width=w/mI,this.height=p/NI,this.fixAndSetPosition(),I(this,B)&&O(this,A,cC).call(this,w,p),O(this,A,cg).call(this),O(this,A,gg).call(this),this.canvas.style.visibility="visible",this.fixDims()}static deserialize(w,p,v){var JI,vI,rI;if(w instanceof cI.InkAnnotationElement)return null;const q=super.deserialize(w,p,v);q.thickness=w.thickness,q.color=G.Util.makeHexColor(...w.color),q.opacity=w.opacity;const[mI,NI]=q.pageDimensions,hI=q.width*mI,E=q.height*NI,MI=q.parentScale,yI=w.thickness/2;gI(q,B,!0),gI(q,h,Math.round(hI)),gI(q,Z,Math.round(E));const{paths:TI,rect:LI,rotation:UI}=w;for(let{bezier:VI}of TI){VI=O(JI=aI,n,OC).call(JI,VI,LI,UI);const II=[];q.paths.push(II);let AI=MI*(VI[0]-yI),DI=MI*(VI[1]-yI);for(let xI=2,S=VI.length;xI<S;xI+=6){const BI=MI*(VI[xI]-yI),HI=MI*(VI[xI+1]-yI),SI=MI*(VI[xI+2]-yI),zI=MI*(VI[xI+3]-yI),nI=MI*(VI[xI+4]-yI),H=MI*(VI[xI+5]-yI);II.push([[AI,DI],[BI,HI],[SI,zI],[nI,H]]),AI=nI,DI=H}const OI=O(this,n,xC).call(this,II);q.bezierPath2D.push(OI)}const eI=O(vI=q,A,bC).call(vI);return gI(q,W,Math.max(R.AnnotationEditor.MIN_SIZE,eI[2]-eI[0])),gI(q,e,Math.max(R.AnnotationEditor.MIN_SIZE,eI[3]-eI[1])),O(rI=q,A,cC).call(rI,hI,E),q}serialize(){if(this.isEmpty())return null;const w=this.getRect(0,0),p=R.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:G.AnnotationEditorType.INK,color:p,thickness:this.thickness,opacity:this.opacity,paths:O(this,A,UC).call(this,this.scaleFactor/this.parentScale,this.translationX,this.translationY,w),pageIndex:this.pageIndex,rect:w,rotation:this.rotation,structTreeParentId:this._structTreeParentId}}};e=new WeakMap,W=new WeakMap,z=new WeakMap,J=new WeakMap,V=new WeakMap,o=new WeakMap,y=new WeakMap,B=new WeakMap,s=new WeakMap,Y=new WeakMap,t=new WeakMap,h=new WeakMap,Z=new WeakMap,i=new WeakMap,A=new WeakSet,SC=function(w){const p=this.thickness;this.addCommands({cmd:()=>{this.thickness=w,O(this,A,ig).call(this)},undo:()=>{this.thickness=p,O(this,A,ig).call(this)},mustExec:!0,type:G.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})},tC=function(w){const p=this.color;this.addCommands({cmd:()=>{this.color=w,O(this,A,gg).call(this)},undo:()=>{this.color=p,O(this,A,gg).call(this)},mustExec:!0,type:G.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})},FC=function(w){w/=100;const p=this.opacity;this.addCommands({cmd:()=>{this.opacity=w,O(this,A,gg).call(this)},undo:()=>{this.opacity=p,O(this,A,gg).call(this)},mustExec:!0,type:G.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})},zC=function(){const{parentRotation:w,parentDimensions:[p,v]}=this;switch(w){case 90:return[0,v,v,p];case 180:return[p,v,p,v];case 270:return[p,0,v,p];default:return[0,0,p,v]}},ZC=function(){const{ctx:w,color:p,opacity:v,thickness:q,parentScale:mI,scaleFactor:NI}=this;w.lineWidth=q*mI/NI,w.lineCap="round",w.lineJoin="round",w.miterLimit=10,w.strokeStyle=`${p}${(0,WI.opacityToHex)(v)}`},JC=function(w,p){this.canvas.addEventListener("contextmenu",U.noContextMenu),this.canvas.addEventListener("pointerleave",I(this,J)),this.canvas.addEventListener("pointermove",I(this,z)),this.canvas.addEventListener("pointerup",I(this,V)),this.canvas.removeEventListener("pointerdown",I(this,o)),this.isEditing=!0,I(this,Y)||(gI(this,Y,!0),O(this,A,cg).call(this),this.thickness||(this.thickness=aI._defaultThickness),this.color||(this.color=aI._defaultColor||R.AnnotationEditor._defaultLineColor),this.opacity??(this.opacity=aI._defaultOpacity)),this.currentPath.push([w,p]),gI(this,s,!1),O(this,A,ZC).call(this),gI(this,i,()=>{O(this,A,TC).call(this),I(this,i)&&window.requestAnimationFrame(I(this,i))}),window.requestAnimationFrame(I(this,i))},dC=function(w,p){const[v,q]=this.currentPath.at(-1);if(this.currentPath.length>1&&w===v&&p===q)return;const mI=this.currentPath;let NI=I(this,y);if(mI.push([w,p]),gI(this,s,!0),mI.length<=2){NI.moveTo(...mI[0]),NI.lineTo(w,p);return}mI.length===3&&(gI(this,y,NI=new Path2D),NI.moveTo(...mI[0])),O(this,A,QC).call(this,NI,...mI.at(-3),...mI.at(-2),w,p)},LC=function(){if(this.currentPath.length===0)return;const w=this.currentPath.at(-1);I(this,y).lineTo(...w)},kC=function(w,p){gI(this,i,null),w=Math.min(Math.max(w,0),this.canvas.width),p=Math.min(Math.max(p,0),this.canvas.height),O(this,A,dC).call(this,w,p),O(this,A,LC).call(this);let v;if(this.currentPath.length!==1)v=O(this,A,jC).call(this);else{const E=[w,p];v=[[E,E.slice(),E.slice(),E]]}const q=I(this,y),mI=this.currentPath;this.currentPath=[],gI(this,y,new Path2D);const NI=()=>{this.allRawPaths.push(mI),this.paths.push(v),this.bezierPath2D.push(q),this.rebuild()},hI=()=>{this.allRawPaths.pop(),this.paths.pop(),this.bezierPath2D.pop(),this.paths.length===0?this.remove():(this.canvas||(O(this,A,Mg).call(this),O(this,A,ug).call(this)),O(this,A,ig).call(this))};this.addCommands({cmd:NI,undo:hI,mustExec:!0})},TC=function(){if(!I(this,s))return;gI(this,s,!1);const w=Math.ceil(this.thickness*this.parentScale),p=this.currentPath.slice(-3),v=p.map(NI=>NI[0]),q=p.map(NI=>NI[1]);Math.min(...v)-w,Math.max(...v)+w,Math.min(...q)-w,Math.max(...q)+w;const{ctx:mI}=this;mI.save(),mI.clearRect(0,0,this.canvas.width,this.canvas.height);for(const NI of this.bezierPath2D)mI.stroke(NI);mI.stroke(I(this,y)),mI.restore()},QC=function(w,p,v,q,mI,NI,hI){const E=(p+q)/2,MI=(v+mI)/2,yI=(q+NI)/2,TI=(mI+hI)/2;w.bezierCurveTo(E+2*(q-E)/3,MI+2*(mI-MI)/3,yI+2*(q-yI)/3,TI+2*(mI-TI)/3,yI,TI)},jC=function(){const w=this.currentPath;if(w.length<=2)return[[w[0],w[0],w.at(-1),w.at(-1)]];const p=[];let v,[q,mI]=w[0];for(v=1;v<w.length-2;v++){const[LI,UI]=w[v],[eI,JI]=w[v+1],vI=(LI+eI)/2,rI=(UI+JI)/2,VI=[q+2*(LI-q)/3,mI+2*(UI-mI)/3],II=[vI+2*(LI-vI)/3,rI+2*(UI-rI)/3];p.push([[q,mI],VI,II,[vI,rI]]),[q,mI]=[vI,rI]}const[NI,hI]=w[v],[E,MI]=w[v+1],yI=[q+2*(NI-q)/3,mI+2*(hI-mI)/3],TI=[E+2*(NI-E)/3,MI+2*(hI-MI)/3];return p.push([[q,mI],yI,TI,[E,MI]]),p},gg=function(){if(this.isEmpty()){O(this,A,ng).call(this);return}O(this,A,ZC).call(this);const{canvas:w,ctx:p}=this;p.setTransform(1,0,0,1,0,0),p.clearRect(0,0,w.width,w.height),O(this,A,ng).call(this);for(const v of this.bezierPath2D)p.stroke(v)},GC=function(w){this.canvas.removeEventListener("pointerleave",I(this,J)),this.canvas.removeEventListener("pointermove",I(this,z)),this.canvas.removeEventListener("pointerup",I(this,V)),this.canvas.addEventListener("pointerdown",I(this,o)),setTimeout(()=>{this.canvas.removeEventListener("contextmenu",U.noContextMenu)},10),O(this,A,kC).call(this,w.offsetX,w.offsetY),this.addToAnnotationStorage(),this.setInBackground()},Mg=function(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",R.AnnotationEditor._l10nPromise.get("editor_ink_canvas_aria_label").then(w=>{var p;return(p=this.canvas)==null?void 0:p.setAttribute("aria-label",w)}),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")},ug=function(){gI(this,t,new ResizeObserver(w=>{const p=w[0].contentRect;p.width&&p.height&&this.setDimensions(p.width,p.height)})),I(this,t).observe(this.div)},cg=function(){if(!I(this,Y))return;const[w,p]=this.parentDimensions;this.canvas.width=Math.ceil(this.width*w),this.canvas.height=Math.ceil(this.height*p),O(this,A,ng).call(this)},cC=function(w,p){const v=O(this,A,Dg).call(this),q=(w-v)/I(this,W),mI=(p-v)/I(this,e);this.scaleFactor=Math.min(q,mI)},ng=function(){const w=O(this,A,Dg).call(this)/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+w,this.translationY*this.scaleFactor+w)},n=new WeakSet,xC=function(w){const p=new Path2D;for(let v=0,q=w.length;v<q;v++){const[mI,NI,hI,E]=w[v];v===0&&p.moveTo(...mI),p.bezierCurveTo(NI[0],NI[1],hI[0],hI[1],E[0],E[1])}return p},iC=function(w,p,v){const[q,mI,NI,hI]=p;switch(v){case 0:for(let E=0,MI=w.length;E<MI;E+=2)w[E]+=q,w[E+1]=hI-w[E+1];break;case 90:for(let E=0,MI=w.length;E<MI;E+=2){const yI=w[E];w[E]=w[E+1]+q,w[E+1]=yI+mI}break;case 180:for(let E=0,MI=w.length;E<MI;E+=2)w[E]=NI-w[E],w[E+1]+=mI;break;case 270:for(let E=0,MI=w.length;E<MI;E+=2){const yI=w[E];w[E]=NI-w[E+1],w[E+1]=hI-yI}break;default:throw new Error("Invalid rotation")}return w},OC=function(w,p,v){const[q,mI,NI,hI]=p;switch(v){case 0:for(let E=0,MI=w.length;E<MI;E+=2)w[E]-=q,w[E+1]=hI-w[E+1];break;case 90:for(let E=0,MI=w.length;E<MI;E+=2){const yI=w[E];w[E]=w[E+1]-mI,w[E+1]=yI-q}break;case 180:for(let E=0,MI=w.length;E<MI;E+=2)w[E]=NI-w[E],w[E+1]-=mI;break;case 270:for(let E=0,MI=w.length;E<MI;E+=2){const yI=w[E];w[E]=hI-w[E+1],w[E+1]=NI-yI}break;default:throw new Error("Invalid rotation")}return w},UC=function(w,p,v,q){var MI,yI;const mI=[],NI=this.thickness/2,hI=w*p+NI,E=w*v+NI;for(const TI of this.paths){const LI=[],UI=[];for(let eI=0,JI=TI.length;eI<JI;eI++){const[vI,rI,VI,II]=TI[eI],AI=w*vI[0]+hI,DI=w*vI[1]+E,OI=w*rI[0]+hI,xI=w*rI[1]+E,S=w*VI[0]+hI,BI=w*VI[1]+E,HI=w*II[0]+hI,SI=w*II[1]+E;eI===0&&(LI.push(AI,DI),UI.push(AI,DI)),LI.push(OI,xI,S,BI,HI,SI),UI.push(OI,xI),eI===JI-1&&UI.push(HI,SI)}mI.push({bezier:O(MI=aI,n,iC).call(MI,LI,q,this.rotation),points:O(yI=aI,n,iC).call(yI,UI,q,this.rotation)})}return mI},bC=function(){let w=1/0,p=-1/0,v=1/0,q=-1/0;for(const mI of this.paths)for(const[NI,hI,E,MI]of mI){const yI=G.Util.bezierBoundingBox(...NI,...hI,...E,...MI);w=Math.min(w,yI[0]),v=Math.min(v,yI[1]),p=Math.max(p,yI[2]),q=Math.max(q,yI[3])}return[w,v,p,q]},Dg=function(){return I(this,B)?Math.ceil(this.thickness*this.parentScale):0},ig=function(w=!1){if(this.isEmpty())return;if(!I(this,B)){O(this,A,gg).call(this);return}const p=O(this,A,bC).call(this),v=O(this,A,Dg).call(this);gI(this,W,Math.max(R.AnnotationEditor.MIN_SIZE,p[2]-p[0])),gI(this,e,Math.max(R.AnnotationEditor.MIN_SIZE,p[3]-p[1]));const q=Math.ceil(v+I(this,W)*this.scaleFactor),mI=Math.ceil(v+I(this,e)*this.scaleFactor),[NI,hI]=this.parentDimensions;this.width=q/NI,this.height=mI/hI,this.setAspectRatio(q,mI);const E=this.translationX,MI=this.translationY;this.translationX=-p[0],this.translationY=-p[1],O(this,A,cg).call(this),O(this,A,gg).call(this),gI(this,h,q),gI(this,Z,mI),this.setDims(q,mI);const yI=w?v/this.scaleFactor/2:0;this.translate(E-this.translationX-yI,MI-this.translationY-yI)},_(aI,n),fI(aI,"_defaultColor",null),fI(aI,"_defaultOpacity",1),fI(aI,"_defaultThickness",1),fI(aI,"_type","ink");let L=aI;b.InkEditor=L},(wI,b,ZI)=>{var L,e,W,z,J,V,o,y,B,s,Y,Yg,og,eg,sC,vC,EC,mC,Kg,rC;Object.defineProperty(b,"__esModule",{value:!0}),b.StampEditor=void 0;var G=ZI(1),R=ZI(4),cI=ZI(6),U=ZI(29);const X=class X extends R.AnnotationEditor{constructor(j){super({...j,name:"stampEditor"});_(this,Y);_(this,L,null);_(this,e,null);_(this,W,null);_(this,z,null);_(this,J,null);_(this,V,null);_(this,o,null);_(this,y,null);_(this,B,!1);_(this,s,!1);gI(this,z,j.bitmapUrl),gI(this,J,j.bitmapFile)}static initialize(j){R.AnnotationEditor.initialize(j)}static get supportedTypes(){const j=["apng","avif","bmp","gif","jpeg","png","svg+xml","webp","x-icon"];return(0,G.shadow)(this,"supportedTypes",j.map(r=>`image/${r}`))}static get supportedTypesStr(){return(0,G.shadow)(this,"supportedTypesStr",this.supportedTypes.join(","))}static isHandlingMimeForPasting(j){return this.supportedTypes.includes(j)}static paste(j,r){r.pasteEditor(G.AnnotationEditorType.STAMP,{bitmapFile:j.getAsFile()})}remove(){var j,r;I(this,e)&&(gI(this,L,null),this._uiManager.imageManager.deleteId(I(this,e)),(j=I(this,V))==null||j.remove(),gI(this,V,null),(r=I(this,o))==null||r.disconnect(),gI(this,o,null)),super.remove()}rebuild(){if(!this.parent){I(this,e)&&O(this,Y,eg).call(this);return}super.rebuild(),this.div!==null&&(I(this,e)&&O(this,Y,eg).call(this),this.isAttachedToDOM||this.parent.add(this))}onceAdded(){this._isDraggable=!0,this.div.focus()}isEmpty(){return!(I(this,W)||I(this,L)||I(this,z)||I(this,J))}get isResizable(){return!0}render(){if(this.div)return this.div;let j,r;if(this.width&&(j=this.x,r=this.y),super.render(),this.div.hidden=!0,I(this,L)?O(this,Y,sC).call(this):O(this,Y,eg).call(this),this.width){const[T,dI]=this.parentDimensions;this.setAt(j*T,r*dI,this.width*T,this.height*dI)}return this.div}static deserialize(j,r,T){if(j instanceof U.StampAnnotationElement)return null;const dI=super.deserialize(j,r,T),{rect:M,bitmapUrl:k,bitmapId:P,isSvg:N,accessibilityData:g}=j;P&&T.imageManager.isValidId(P)?gI(dI,e,P):gI(dI,z,k),gI(dI,B,N);const[C,m]=dI.pageDimensions;return dI.width=(M[2]-M[0])/C,dI.height=(M[3]-M[1])/m,g&&(dI.altTextData=g),dI}serialize(j=!1,r=null){if(this.isEmpty())return null;const T={annotationType:G.AnnotationEditorType.STAMP,bitmapId:I(this,e),pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:I(this,B),structTreeParentId:this._structTreeParentId};if(j)return T.bitmapUrl=O(this,Y,Kg).call(this,!0),T.accessibilityData=this.altTextData,T;const{decorative:dI,altText:M}=this.altTextData;if(!dI&&M&&(T.accessibilityData={type:"Figure",alt:M}),r===null)return T;r.stamps||(r.stamps=new Map);const k=I(this,B)?(T.rect[2]-T.rect[0])*(T.rect[3]-T.rect[1]):null;if(!r.stamps.has(I(this,e)))r.stamps.set(I(this,e),{area:k,serialized:T}),T.bitmap=O(this,Y,Kg).call(this,!1);else if(I(this,B)){const P=r.stamps.get(I(this,e));k>P.area&&(P.area=k,P.serialized.bitmap.close(),P.serialized.bitmap=O(this,Y,Kg).call(this,!1))}return T}};L=new WeakMap,e=new WeakMap,W=new WeakMap,z=new WeakMap,J=new WeakMap,V=new WeakMap,o=new WeakMap,y=new WeakMap,B=new WeakMap,s=new WeakMap,Y=new WeakSet,Yg=function(j,r=!1){if(!j){this.remove();return}gI(this,L,j.bitmap),r||(gI(this,e,j.id),gI(this,B,j.isSvg)),O(this,Y,sC).call(this)},og=function(){gI(this,W,null),this._uiManager.enableWaiting(!1),I(this,V)&&this.div.focus()},eg=function(){if(I(this,e)){this._uiManager.enableWaiting(!0),this._uiManager.imageManager.getFromId(I(this,e)).then(r=>O(this,Y,Yg).call(this,r,!0)).finally(()=>O(this,Y,og).call(this));return}if(I(this,z)){const r=I(this,z);gI(this,z,null),this._uiManager.enableWaiting(!0),gI(this,W,this._uiManager.imageManager.getFromUrl(r).then(T=>O(this,Y,Yg).call(this,T)).finally(()=>O(this,Y,og).call(this)));return}if(I(this,J)){const r=I(this,J);gI(this,J,null),this._uiManager.enableWaiting(!0),gI(this,W,this._uiManager.imageManager.getFromFile(r).then(T=>O(this,Y,Yg).call(this,T)).finally(()=>O(this,Y,og).call(this)));return}const j=document.createElement("input");j.type="file",j.accept=X.supportedTypesStr,gI(this,W,new Promise(r=>{j.addEventListener("change",async()=>{if(!j.files||j.files.length===0)this.remove();else{this._uiManager.enableWaiting(!0);const T=await this._uiManager.imageManager.getFromFile(j.files[0]);O(this,Y,Yg).call(this,T)}r()}),j.addEventListener("cancel",()=>{this.remove(),r()})}).finally(()=>O(this,Y,og).call(this))),j.click()},sC=function(){const{div:j}=this;let{width:r,height:T}=I(this,L);const[dI,M]=this.pageDimensions,k=.75;if(this.width)r=this.width*dI,T=this.height*M;else if(r>k*dI||T>k*M){const C=Math.min(k*dI/r,k*M/T);r*=C,T*=C}const[P,N]=this.parentDimensions;this.setDims(r*P/dI,T*N/M),this._uiManager.enableWaiting(!1);const g=gI(this,V,document.createElement("canvas"));j.append(g),j.hidden=!1,O(this,Y,mC).call(this,r,T),O(this,Y,rC).call(this),I(this,s)||(this.parent.addUndoableEditor(this),gI(this,s,!0)),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"inserted_image"}}}),this.addAltTextButton()},vC=function(j,r){var k;const[T,dI]=this.parentDimensions;this.width=j/T,this.height=r/dI,this.setDims(j,r),(k=this._initialOptions)!=null&&k.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,I(this,y)!==null&&clearTimeout(I(this,y)),gI(this,y,setTimeout(()=>{gI(this,y,null),O(this,Y,mC).call(this,j,r)},200))},EC=function(j,r){const{width:T,height:dI}=I(this,L);let M=T,k=dI,P=I(this,L);for(;M>2*j||k>2*r;){const N=M,g=k;M>2*j&&(M=M>=16384?Math.floor(M/2)-1:Math.ceil(M/2)),k>2*r&&(k=k>=16384?Math.floor(k/2)-1:Math.ceil(k/2));const C=new OffscreenCanvas(M,k);C.getContext("2d").drawImage(P,0,0,N,g,0,0,M,k),P=C.transferToImageBitmap()}return P},mC=function(j,r){j=Math.ceil(j),r=Math.ceil(r);const T=I(this,V);if(!T||T.width===j&&T.height===r)return;T.width=j,T.height=r;const dI=I(this,B)?I(this,L):O(this,Y,EC).call(this,j,r),M=T.getContext("2d");M.filter=this._uiManager.hcmFilter,M.drawImage(dI,0,0,dI.width,dI.height,0,0,j,r)},Kg=function(j){if(j){if(I(this,B)){const dI=this._uiManager.imageManager.getSvgUrl(I(this,e));if(dI)return dI}const r=document.createElement("canvas");return{width:r.width,height:r.height}=I(this,L),r.getContext("2d").drawImage(I(this,L),0,0),r.toDataURL()}if(I(this,B)){const[r,T]=this.pageDimensions,dI=Math.round(this.width*r*cI.PixelsPerInch.PDF_TO_CSS_UNITS),M=Math.round(this.height*T*cI.PixelsPerInch.PDF_TO_CSS_UNITS),k=new OffscreenCanvas(dI,M);return k.getContext("2d").drawImage(I(this,L),0,0,I(this,L).width,I(this,L).height,0,0,dI,M),k.transferToImageBitmap()}return structuredClone(I(this,L))},rC=function(){gI(this,o,new ResizeObserver(j=>{const r=j[0].contentRect;r.width&&r.height&&O(this,Y,vC).call(this,r.width,r.height)})),I(this,o).observe(this.div)},fI(X,"_type","stamp");let WI=X;b.StampEditor=WI}],__webpack_module_cache__={};function __w_pdfjs_require__(wI){var b=__webpack_module_cache__[wI];if(b!==void 0)return b.exports;var ZI=__webpack_module_cache__[wI]={exports:{}};return __webpack_modules__[wI](ZI,ZI.exports,__w_pdfjs_require__),ZI.exports}var __webpack_exports__={};return(()=>{var wI=__webpack_exports__;Object.defineProperty(wI,"__esModule",{value:!0}),Object.defineProperty(wI,"AbortException",{enumerable:!0,get:function(){return b.AbortException}}),Object.defineProperty(wI,"AnnotationEditorLayer",{enumerable:!0,get:function(){return cI.AnnotationEditorLayer}}),Object.defineProperty(wI,"AnnotationEditorParamsType",{enumerable:!0,get:function(){return b.AnnotationEditorParamsType}}),Object.defineProperty(wI,"AnnotationEditorType",{enumerable:!0,get:function(){return b.AnnotationEditorType}}),Object.defineProperty(wI,"AnnotationEditorUIManager",{enumerable:!0,get:function(){return U.AnnotationEditorUIManager}}),Object.defineProperty(wI,"AnnotationLayer",{enumerable:!0,get:function(){return WI.AnnotationLayer}}),Object.defineProperty(wI,"AnnotationMode",{enumerable:!0,get:function(){return b.AnnotationMode}}),Object.defineProperty(wI,"CMapCompressionType",{enumerable:!0,get:function(){return b.CMapCompressionType}}),Object.defineProperty(wI,"DOMSVGFactory",{enumerable:!0,get:function(){return G.DOMSVGFactory}}),Object.defineProperty(wI,"FeatureTest",{enumerable:!0,get:function(){return b.FeatureTest}}),Object.defineProperty(wI,"GlobalWorkerOptions",{enumerable:!0,get:function(){return L.GlobalWorkerOptions}}),Object.defineProperty(wI,"ImageKind",{enumerable:!0,get:function(){return b.ImageKind}}),Object.defineProperty(wI,"InvalidPDFException",{enumerable:!0,get:function(){return b.InvalidPDFException}}),Object.defineProperty(wI,"MissingPDFException",{enumerable:!0,get:function(){return b.MissingPDFException}}),Object.defineProperty(wI,"OPS",{enumerable:!0,get:function(){return b.OPS}}),Object.defineProperty(wI,"PDFDataRangeTransport",{enumerable:!0,get:function(){return ZI.PDFDataRangeTransport}}),Object.defineProperty(wI,"PDFDateString",{enumerable:!0,get:function(){return G.PDFDateString}}),Object.defineProperty(wI,"PDFWorker",{enumerable:!0,get:function(){return ZI.PDFWorker}}),Object.defineProperty(wI,"PasswordResponses",{enumerable:!0,get:function(){return b.PasswordResponses}}),Object.defineProperty(wI,"PermissionFlag",{enumerable:!0,get:function(){return b.PermissionFlag}}),Object.defineProperty(wI,"PixelsPerInch",{enumerable:!0,get:function(){return G.PixelsPerInch}}),Object.defineProperty(wI,"PromiseCapability",{enumerable:!0,get:function(){return b.PromiseCapability}}),Object.defineProperty(wI,"RenderingCancelledException",{enumerable:!0,get:function(){return G.RenderingCancelledException}}),Object.defineProperty(wI,"SVGGraphics",{enumerable:!0,get:function(){return ZI.SVGGraphics}}),Object.defineProperty(wI,"UnexpectedResponseException",{enumerable:!0,get:function(){return b.UnexpectedResponseException}}),Object.defineProperty(wI,"Util",{enumerable:!0,get:function(){return b.Util}}),Object.defineProperty(wI,"VerbosityLevel",{enumerable:!0,get:function(){return b.VerbosityLevel}}),Object.defineProperty(wI,"XfaLayer",{enumerable:!0,get:function(){return e.XfaLayer}}),Object.defineProperty(wI,"build",{enumerable:!0,get:function(){return ZI.build}}),Object.defineProperty(wI,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return b.createValidAbsoluteUrl}}),Object.defineProperty(wI,"getDocument",{enumerable:!0,get:function(){return ZI.getDocument}}),Object.defineProperty(wI,"getFilenameFromUrl",{enumerable:!0,get:function(){return G.getFilenameFromUrl}}),Object.defineProperty(wI,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return G.getPdfFilenameFromUrl}}),Object.defineProperty(wI,"getXfaPageViewport",{enumerable:!0,get:function(){return G.getXfaPageViewport}}),Object.defineProperty(wI,"isDataScheme",{enumerable:!0,get:function(){return G.isDataScheme}}),Object.defineProperty(wI,"isPdfFile",{enumerable:!0,get:function(){return G.isPdfFile}}),Object.defineProperty(wI,"loadScript",{enumerable:!0,get:function(){return G.loadScript}}),Object.defineProperty(wI,"noContextMenu",{enumerable:!0,get:function(){return G.noContextMenu}}),Object.defineProperty(wI,"normalizeUnicode",{enumerable:!0,get:function(){return b.normalizeUnicode}}),Object.defineProperty(wI,"renderTextLayer",{enumerable:!0,get:function(){return R.renderTextLayer}}),Object.defineProperty(wI,"setLayerDimensions",{enumerable:!0,get:function(){return G.setLayerDimensions}}),Object.defineProperty(wI,"shadow",{enumerable:!0,get:function(){return b.shadow}}),Object.defineProperty(wI,"updateTextLayer",{enumerable:!0,get:function(){return R.updateTextLayer}}),Object.defineProperty(wI,"version",{enumerable:!0,get:function(){return ZI.version}});var b=__w_pdfjs_require__(1),ZI=__w_pdfjs_require__(2),G=__w_pdfjs_require__(6),R=__w_pdfjs_require__(26),cI=__w_pdfjs_require__(27),U=__w_pdfjs_require__(5),WI=__w_pdfjs_require__(29),L=__w_pdfjs_require__(14),e=__w_pdfjs_require__(32)})(),__webpack_exports__})())})(pdf);var pdfExports=pdf.exports;const pdfjsWorker="data:text/javascript;base64,",_export_sfc=(wI,b)=>{const ZI=wI.__vccOpts||wI;for(const[G,R]of b)ZI[G]=R;return ZI},_hoisted_1$1={style:{"text-align":"center"}},_hoisted_2$1={style:{"margin-top":"1rem",display:"flex","align-items":"center","justify-content":"center",gap:"1rem"}},_hoisted_3$1=["disabled"],_hoisted_4$1=["disabled"],_sfc_main$2={__name:"SigningPad",props:{url:{type:String,required:!0}},setup(wI){pdfExports.GlobalWorkerOptions.workerSrc=pdfjsWorker;const b=wI,ZI=vue.ref(null),G=vue.ref(null),R=vue.ref(1),cI=vue.ref(0),U=async()=>{if(!G.value)return;const W=await G.value.getPage(R.value),z=W.getViewport({scale:1.5}),J=ZI.value,V=J.getContext("2d");J.width=z.width,J.height=z.height,await W.render({canvasContext:V,viewport:z}).promise},WI=async()=>{try{const W=pdfjsDist.getDocument(b.url);G.value=await W.promise,cI.value=G.value.numPages,await U()}catch(W){console.error("Error loading PDF:",W)}},L=()=>{R.value>1&&R.value--},e=()=>{R.value<cI.value&&R.value++};return vue.watch(()=>b.url,WI),vue.watch(R,U),vue.onMounted(WI),(W,z)=>(vue.openBlock(),vue.createElementBlock("div",_hoisted_1$1,[vue.createElementVNode("canvas",{ref_key:"canvasRef",ref:ZI},null,512),vue.createElementVNode("div",_hoisted_2$1,[vue.createElementVNode("button",{onClick:L,disabled:R.value<=1},"Previous",8,_hoisted_3$1),vue.createElementVNode("span",null,"Page "+vue.toDisplayString(R.value)+" of "+vue.toDisplayString(cI.value),1),vue.createElementVNode("button",{onClick:e,disabled:R.value>=cI.value},"Next",8,_hoisted_4$1)])]))}},SigningPad=_export_sfc(_sfc_main$2,[["__scopeId","data-v-45af899a"]]),_sfc_main$1={__name:"AuthForm",emits:["submit"],setup(wI,{emit:b}){const ZI=vue.ref(null),G=vue.ref(""),R=b,cI=()=>{if(!ZI.value){alert("Please select a ZIP file.");return}const U=new FormData;U.append("zip",ZI.value),U.append("password",G.value),R("submit",U)};return(U,WI)=>{const L=vue.resolveComponent("VFileInput"),e=vue.resolveComponent("VTextField"),W=vue.resolveComponent("VBtn"),z=vue.resolveComponent("VForm"),J=vue.resolveComponent("VCard");return vue.openBlock(),vue.createBlock(J,{class:"pa-6"},{default:vue.withCtx(()=>[WI[3]||(WI[3]=vue.createElementVNode("h3",{class:"mb-4"},"Upload ZIP File",-1)),vue.createVNode(z,{onSubmit:vue.withModifiers(cI,["prevent"])},{default:vue.withCtx(()=>[vue.createVNode(L,{label:"ZIP File",accept:".zip",onChange:WI[0]||(WI[0]=V=>ZI.value=V.target.files[0]),required:""}),vue.createVNode(e,{label:"Password",type:"password",modelValue:G.value,"onUpdate:modelValue":WI[1]||(WI[1]=V=>G.value=V),required:"",class:"mt-4"},null,8,["modelValue"]),vue.createVNode(W,{color:"primary",type:"submit",class:"mt-6"},{default:vue.withCtx(()=>WI[2]||(WI[2]=[vue.createTextVNode(" Upload ")])),_:1,__:[2]})]),_:1})]),_:1,__:[3]})}}},_hoisted_1={style:{"text-align":"center"}},_hoisted_2={style:{"margin-top":"1rem",display:"flex","align-items":"center","justify-content":"center",gap:"1rem"}},_hoisted_3=["disabled"],_hoisted_4=["disabled"],_sfc_main={__name:"PdfViewer",props:{url:{type:String,required:!0}},setup(wI){pdfExports.GlobalWorkerOptions.workerSrc=`https://unpkg.com/pdfjs-dist@${pdfExports.version}/build/pdf.worker.js`;const b=wI,ZI=vue.ref(null),G=vue.ref(null),R=vue.ref(1),cI=vue.ref(0),U=async()=>{if(!G.value)return;const W=await G.value.getPage(R.value),z=W.getViewport({scale:1.5}),J=ZI.value,V=J.getContext("2d");J.width=z.width,J.height=z.height,await W.render({canvasContext:V,viewport:z}).promise},WI=async()=>{try{const W=pdfExports.getDocument(b.url);G.value=await W.promise,cI.value=G.value.numPages,R.value=1,await U()}catch(W){console.error("Error loading PDF:",W)}},L=()=>{R.value>1&&R.value--},e=()=>{R.value<cI.value&&R.value++};return vue.watch(()=>b.url,WI),vue.watch(R,U),vue.onMounted(WI),(W,z)=>(vue.openBlock(),vue.createElementBlock("div",_hoisted_1,[vue.createElementVNode("canvas",{ref_key:"canvasRef",ref:ZI},null,512),vue.createElementVNode("div",_hoisted_2,[vue.createElementVNode("button",{onClick:L,disabled:R.value<=1},"Previous",8,_hoisted_3),vue.createElementVNode("span",null,"Page "+vue.toDisplayString(R.value)+" of "+vue.toDisplayString(cI.value),1),vue.createElementVNode("button",{onClick:e,disabled:R.value>=cI.value},"Next",8,_hoisted_4)])]))}},PdfViewer=_export_sfc(_sfc_main,[["__scopeId","data-v-10d43522"]]),components=Object.freeze(Object.defineProperty({__proto__:null,AuthForm:_sfc_main$1,SigningPad,UiPdfViewer:PdfViewer},Symbol.toStringTag,{value:"Module"})),index={install(wI){for(const b in components)wI.component(b,components[b])}};return index});
